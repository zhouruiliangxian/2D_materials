2024/04/14 22:10:14 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.19 (default, Mar 20 2024, 19:58:24) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 0
    GPU 0,1: NVIDIA RTX A2000 12GB
    CUDA_HOME: /home/zhouruiliang/.conda/envs/mmseg
    NVCC: Cuda compilation tools, release 11.6, V11.6.124
    GCC: gcc (Ubuntu 7.5.0-6ubuntu2) 7.5.0
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 4.9.0
    MMEngine: 0.10.3

Runtime environment:
    cudnn_benchmark: True
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 0
    Distributed launcher: pytorch
    Distributed training: True
    GPU number: 2
------------------------------------------------------------

2024/04/14 22:10:15 - mmengine - INFO - Config:
conv_kernel_size = 1
crop_size = (
    640,
    640,
)
custom_imports = dict(
    allow_failed_imports=False, imports=[
        'mmpretrain.models',
    ])
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    pad_val=0,
    seg_pad_val=255,
    size=(
        512,
        512,
    ),
    std=[
        58.395,
        57.12,
        57.375,
    ],
    type='SegDataPreProcessor')
data_root = 'MoS2_data/'
dataset_type = 'MoSdata'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False,
        interval=2500,
        max_keep_ckpts=1,
        save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=100, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'pytorch'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        features_only=True,
        model_name='fastvit_t8',
        out_indices=(
            0,
            1,
            3,
        ),
        pretrained=True,
        type='mmpretrain.TIMMBackbone'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            640,
            640,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        kernel_generate_head=dict(
            act_cfg=dict(type='ReLU'),
            align_corners=False,
            channels=128,
            dropout_ratio=0.1,
            in_channels=(
                48,
                96,
                384,
            ),
            in_index=(
                0,
                1,
                2,
            ),
            input_transform='multiple_select',
            loss_decode=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            norm_cfg=dict(requires_grad=True, type='SyncBN'),
            num_classes=4,
            type='LRASPPHead'),
        kernel_update_head=[
            dict(
                conv_kernel_size=1,
                dropout=0.0,
                feat_transform_cfg=dict(
                    act_cfg=None, conv_cfg=dict(type='Conv2d')),
                feedforward_channels=2048,
                ffn_act_cfg=dict(inplace=True, type='ReLU'),
                in_channels=128,
                kernel_updator_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    feat_channels=256,
                    in_channels=256,
                    norm_cfg=dict(type='LN'),
                    out_channels=256,
                    type='KernelUpdator'),
                num_classes=4,
                num_ffn_fcs=2,
                num_heads=8,
                num_mask_fcs=1,
                out_channels=128,
                type='KernelUpdateHead',
                with_ffn=True),
            dict(
                conv_kernel_size=1,
                dropout=0.0,
                feat_transform_cfg=dict(
                    act_cfg=None, conv_cfg=dict(type='Conv2d')),
                feedforward_channels=2048,
                ffn_act_cfg=dict(inplace=True, type='ReLU'),
                in_channels=128,
                kernel_updator_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    feat_channels=256,
                    in_channels=256,
                    norm_cfg=dict(type='LN'),
                    out_channels=256,
                    type='KernelUpdator'),
                num_classes=4,
                num_ffn_fcs=2,
                num_heads=8,
                num_mask_fcs=1,
                out_channels=128,
                type='KernelUpdateHead',
                with_ffn=True),
            dict(
                conv_kernel_size=1,
                dropout=0.0,
                feat_transform_cfg=dict(
                    act_cfg=None, conv_cfg=dict(type='Conv2d')),
                feedforward_channels=2048,
                ffn_act_cfg=dict(inplace=True, type='ReLU'),
                in_channels=128,
                kernel_updator_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    feat_channels=256,
                    in_channels=256,
                    norm_cfg=dict(type='LN'),
                    out_channels=256,
                    type='KernelUpdator'),
                num_classes=4,
                num_ffn_fcs=2,
                num_heads=8,
                num_mask_fcs=1,
                out_channels=128,
                type='KernelUpdateHead',
                with_ffn=True),
        ],
        num_stages=3,
        type='IterativeDecodeHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
norm_cfg = dict(requires_grad=True, type='SyncBN')
num_stages = 3
optim_wrapper = dict(
    clip_grad=dict(max_norm=1, norm_type=2),
    optimizer=dict(lr=0.0001, type='AdamW', weight_decay=0.005),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=1000, start_factor=0.001,
        type='LinearLR'),
    dict(
        begin=1000,
        by_epoch=False,
        end=20000,
        milestones=[
            10000,
            15000,
        ],
        type='MultiStepLR'),
]
randomness = dict(seed=0)
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(img_path='img_dir/test', seg_map_path='ann_dir/test'),
        data_root='MoS2_data/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                1024,
            ), type='Resize'),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='MoSdata'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
        'mDice',
        'mFscore',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        1024,
    ), type='Resize'),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(max_iters=20000, type='IterBasedTrainLoop', val_interval=500)
train_dataloader = dict(
    batch_size=8,
    dataset=dict(
        data_prefix=dict(
            img_path='img_dir/train', seg_map_path='ann_dir/train'),
        data_root='MoS2_data/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.5,
                    2.0,
                ),
                scale=(
                    2048,
                    1024,
                ),
                type='RandomResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    640,
                    640,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='MoSdata'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.5,
            2.0,
        ),
        scale=(
            2048,
            1024,
        ),
        type='RandomResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(file_client_args=dict(backend='disk'), type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(img_path='img_dir/val', seg_map_path='ann_dir/val'),
        data_root='MoS2_data/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                1024,
            ), type='Resize'),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='MoSdata'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
        'mDice',
        'mFscore',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/lraspp_ket_fastvit_ful'

2024/04/14 22:10:25 - mmengine - INFO - backbone out_indices: (0, 1, 3)
2024/04/14 22:10:25 - mmengine - INFO - backbone out_channels: [48, 96, 384]
2024/04/14 22:10:25 - mmengine - INFO - backbone out_strides: [4, 8, 32]
2024/04/14 22:10:26 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/04/14 22:10:26 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Name of parameter - Initialization information

backbone.timm_model.stem_0.conv_kxk.0.conv.weight - torch.Size([48, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_0.conv_kxk.0.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_0.conv_kxk.0.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_0.conv_scale.conv.weight - torch.Size([48, 3, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_0.conv_scale.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_0.conv_scale.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_1.conv_kxk.0.conv.weight - torch.Size([48, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_1.conv_kxk.0.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_1.conv_kxk.0.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_1.conv_scale.conv.weight - torch.Size([48, 1, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_1.conv_scale.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_1.conv_scale.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_2.identity.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_2.identity.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_2.conv_kxk.0.conv.weight - torch.Size([48, 48, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_2.conv_kxk.0.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_2.conv_kxk.0.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.token_mixer.norm.identity.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.token_mixer.norm.identity.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.token_mixer.mixer.identity.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.token_mixer.mixer.identity.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.token_mixer.mixer.conv_kxk.0.conv.weight - torch.Size([48, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.token_mixer.mixer.conv_kxk.0.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.token_mixer.mixer.conv_kxk.0.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.token_mixer.mixer.conv_scale.conv.weight - torch.Size([48, 1, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.token_mixer.mixer.conv_scale.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.token_mixer.mixer.conv_scale.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.token_mixer.layer_scale.gamma - torch.Size([48, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.mlp.conv.conv.weight - torch.Size([48, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.mlp.conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.mlp.conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.mlp.fc1.weight - torch.Size([144, 48, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.mlp.fc1.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.mlp.fc2.weight - torch.Size([48, 144, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.mlp.fc2.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.layer_scale.gamma - torch.Size([48, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.token_mixer.norm.identity.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.token_mixer.norm.identity.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.token_mixer.mixer.identity.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.token_mixer.mixer.identity.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.token_mixer.mixer.conv_kxk.0.conv.weight - torch.Size([48, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.token_mixer.mixer.conv_kxk.0.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.token_mixer.mixer.conv_kxk.0.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.token_mixer.mixer.conv_scale.conv.weight - torch.Size([48, 1, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.token_mixer.mixer.conv_scale.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.token_mixer.mixer.conv_scale.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.token_mixer.layer_scale.gamma - torch.Size([48, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.mlp.conv.conv.weight - torch.Size([48, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.mlp.conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.mlp.conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.mlp.fc1.weight - torch.Size([144, 48, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.mlp.fc1.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.mlp.fc2.weight - torch.Size([48, 144, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.mlp.fc2.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.layer_scale.gamma - torch.Size([48, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.downsample.proj.0.large_conv.conv.weight - torch.Size([96, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.downsample.proj.0.large_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.downsample.proj.0.large_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.downsample.proj.0.small_conv.conv.weight - torch.Size([96, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.downsample.proj.0.small_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.downsample.proj.0.small_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.downsample.proj.1.identity.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.downsample.proj.1.identity.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.downsample.proj.1.conv_kxk.0.conv.weight - torch.Size([96, 96, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.downsample.proj.1.conv_kxk.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.downsample.proj.1.conv_kxk.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.token_mixer.norm.identity.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.token_mixer.norm.identity.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.token_mixer.mixer.identity.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.token_mixer.mixer.identity.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.token_mixer.mixer.conv_kxk.0.conv.weight - torch.Size([96, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.token_mixer.mixer.conv_kxk.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.token_mixer.mixer.conv_kxk.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.token_mixer.mixer.conv_scale.conv.weight - torch.Size([96, 1, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.token_mixer.mixer.conv_scale.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.token_mixer.mixer.conv_scale.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.token_mixer.layer_scale.gamma - torch.Size([96, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.mlp.conv.conv.weight - torch.Size([96, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.mlp.conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.mlp.conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.mlp.fc1.weight - torch.Size([288, 96, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.mlp.fc1.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.mlp.fc2.weight - torch.Size([96, 288, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.mlp.fc2.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.layer_scale.gamma - torch.Size([96, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.token_mixer.norm.identity.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.token_mixer.norm.identity.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.token_mixer.mixer.identity.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.token_mixer.mixer.identity.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.token_mixer.mixer.conv_kxk.0.conv.weight - torch.Size([96, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.token_mixer.mixer.conv_kxk.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.token_mixer.mixer.conv_kxk.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.token_mixer.mixer.conv_scale.conv.weight - torch.Size([96, 1, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.token_mixer.mixer.conv_scale.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.token_mixer.mixer.conv_scale.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.token_mixer.layer_scale.gamma - torch.Size([96, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.mlp.conv.conv.weight - torch.Size([96, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.mlp.conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.mlp.conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.mlp.fc1.weight - torch.Size([288, 96, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.mlp.fc1.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.mlp.fc2.weight - torch.Size([96, 288, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.mlp.fc2.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.layer_scale.gamma - torch.Size([96, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.downsample.proj.0.large_conv.conv.weight - torch.Size([192, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.downsample.proj.0.large_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.downsample.proj.0.large_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.downsample.proj.0.small_conv.conv.weight - torch.Size([192, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.downsample.proj.0.small_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.downsample.proj.0.small_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.downsample.proj.1.identity.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.downsample.proj.1.identity.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.downsample.proj.1.conv_kxk.0.conv.weight - torch.Size([192, 192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.downsample.proj.1.conv_kxk.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.downsample.proj.1.conv_kxk.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.token_mixer.norm.identity.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.token_mixer.norm.identity.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.token_mixer.mixer.identity.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.token_mixer.mixer.identity.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.token_mixer.mixer.conv_kxk.0.conv.weight - torch.Size([192, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.token_mixer.mixer.conv_kxk.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.token_mixer.mixer.conv_kxk.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.token_mixer.mixer.conv_scale.conv.weight - torch.Size([192, 1, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.token_mixer.mixer.conv_scale.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.token_mixer.mixer.conv_scale.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.token_mixer.layer_scale.gamma - torch.Size([192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.mlp.conv.conv.weight - torch.Size([192, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.mlp.conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.mlp.conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.mlp.fc1.weight - torch.Size([576, 192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.mlp.fc1.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.mlp.fc2.weight - torch.Size([192, 576, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.mlp.fc2.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.layer_scale.gamma - torch.Size([192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.token_mixer.norm.identity.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.token_mixer.norm.identity.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.token_mixer.mixer.identity.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.token_mixer.mixer.identity.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.token_mixer.mixer.conv_kxk.0.conv.weight - torch.Size([192, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.token_mixer.mixer.conv_kxk.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.token_mixer.mixer.conv_kxk.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.token_mixer.mixer.conv_scale.conv.weight - torch.Size([192, 1, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.token_mixer.mixer.conv_scale.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.token_mixer.mixer.conv_scale.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.token_mixer.layer_scale.gamma - torch.Size([192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.mlp.conv.conv.weight - torch.Size([192, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.mlp.conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.mlp.conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.mlp.fc1.weight - torch.Size([576, 192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.mlp.fc1.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.mlp.fc2.weight - torch.Size([192, 576, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.mlp.fc2.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.layer_scale.gamma - torch.Size([192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.token_mixer.norm.identity.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.token_mixer.norm.identity.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.token_mixer.mixer.identity.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.token_mixer.mixer.identity.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.token_mixer.mixer.conv_kxk.0.conv.weight - torch.Size([192, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.token_mixer.mixer.conv_kxk.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.token_mixer.mixer.conv_kxk.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.token_mixer.mixer.conv_scale.conv.weight - torch.Size([192, 1, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.token_mixer.mixer.conv_scale.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.token_mixer.mixer.conv_scale.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.token_mixer.layer_scale.gamma - torch.Size([192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.mlp.conv.conv.weight - torch.Size([192, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.mlp.conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.mlp.conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.mlp.fc1.weight - torch.Size([576, 192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.mlp.fc1.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.mlp.fc2.weight - torch.Size([192, 576, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.mlp.fc2.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.layer_scale.gamma - torch.Size([192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.token_mixer.norm.identity.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.token_mixer.norm.identity.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.token_mixer.mixer.identity.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.token_mixer.mixer.identity.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.token_mixer.mixer.conv_kxk.0.conv.weight - torch.Size([192, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.token_mixer.mixer.conv_kxk.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.token_mixer.mixer.conv_kxk.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.token_mixer.mixer.conv_scale.conv.weight - torch.Size([192, 1, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.token_mixer.mixer.conv_scale.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.token_mixer.mixer.conv_scale.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.token_mixer.layer_scale.gamma - torch.Size([192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.mlp.conv.conv.weight - torch.Size([192, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.mlp.conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.mlp.conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.mlp.fc1.weight - torch.Size([576, 192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.mlp.fc1.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.mlp.fc2.weight - torch.Size([192, 576, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.mlp.fc2.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.layer_scale.gamma - torch.Size([192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.downsample.proj.0.large_conv.conv.weight - torch.Size([384, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.downsample.proj.0.large_conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.downsample.proj.0.large_conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.downsample.proj.0.small_conv.conv.weight - torch.Size([384, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.downsample.proj.0.small_conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.downsample.proj.0.small_conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.downsample.proj.1.identity.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.downsample.proj.1.identity.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.downsample.proj.1.conv_kxk.0.conv.weight - torch.Size([384, 384, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.downsample.proj.1.conv_kxk.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.downsample.proj.1.conv_kxk.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.token_mixer.norm.identity.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.token_mixer.norm.identity.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.token_mixer.mixer.identity.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.token_mixer.mixer.identity.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.token_mixer.mixer.conv_kxk.0.conv.weight - torch.Size([384, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.token_mixer.mixer.conv_kxk.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.token_mixer.mixer.conv_kxk.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.token_mixer.mixer.conv_scale.conv.weight - torch.Size([384, 1, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.token_mixer.mixer.conv_scale.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.token_mixer.mixer.conv_scale.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.token_mixer.layer_scale.gamma - torch.Size([384, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.mlp.conv.conv.weight - torch.Size([384, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.mlp.conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.mlp.conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.mlp.fc1.weight - torch.Size([1152, 384, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.mlp.fc1.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.mlp.fc2.weight - torch.Size([384, 1152, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.mlp.fc2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.layer_scale.gamma - torch.Size([384, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.token_mixer.norm.identity.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.token_mixer.norm.identity.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.token_mixer.mixer.identity.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.token_mixer.mixer.identity.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.token_mixer.mixer.conv_kxk.0.conv.weight - torch.Size([384, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.token_mixer.mixer.conv_kxk.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.token_mixer.mixer.conv_kxk.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.token_mixer.mixer.conv_scale.conv.weight - torch.Size([384, 1, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.token_mixer.mixer.conv_scale.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.token_mixer.mixer.conv_scale.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.token_mixer.layer_scale.gamma - torch.Size([384, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.mlp.conv.conv.weight - torch.Size([384, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.mlp.conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.mlp.conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.mlp.fc1.weight - torch.Size([1152, 384, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.mlp.fc1.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.mlp.fc2.weight - torch.Size([384, 1152, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.mlp.fc2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.layer_scale.gamma - torch.Size([384, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_generate_head.conv_seg.weight - torch.Size([4, 128, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.kernel_generate_head.conv_seg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.kernel_generate_head.convs.conv0.weight - torch.Size([32, 48, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_generate_head.convs.conv1.weight - torch.Size([64, 96, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_generate_head.conv_ups.conv_up0.conv.weight - torch.Size([128, 160, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_generate_head.conv_ups.conv_up0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_generate_head.conv_ups.conv_up0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_generate_head.conv_ups.conv_up1.conv.weight - torch.Size([128, 192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_generate_head.conv_ups.conv_up1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_generate_head.conv_ups.conv_up1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_generate_head.conv_up_input.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_generate_head.conv_up_input.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_generate_head.aspp_conv.conv.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.kernel_generate_head.aspp_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_generate_head.aspp_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_generate_head.image_pool.1.conv.weight - torch.Size([128, 384, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.attention.attn.in_proj_weight - torch.Size([384, 128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.attention.attn.in_proj_bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.attention.attn.out_proj.weight - torch.Size([128, 128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.attention.attn.out_proj.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.attention_norm.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.attention_norm.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.kernel_update_conv.dynamic_layer.weight - torch.Size([512, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.kernel_update_conv.dynamic_layer.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.kernel_update_conv.input_layer.weight - torch.Size([512, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.kernel_update_conv.input_layer.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.kernel_update_conv.input_gate.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.kernel_update_conv.input_gate.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.kernel_update_conv.update_gate.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.kernel_update_conv.update_gate.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.kernel_update_conv.norm_in.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.kernel_update_conv.norm_in.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.kernel_update_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.kernel_update_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.kernel_update_conv.input_norm_in.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.kernel_update_conv.input_norm_in.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.kernel_update_conv.input_norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.kernel_update_conv.input_norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.kernel_update_conv.fc_layer.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.kernel_update_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.kernel_update_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.kernel_update_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.feat_transform.conv.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.feat_transform.conv.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.ffn.layers.0.0.weight - torch.Size([2048, 128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.ffn.layers.1.weight - torch.Size([128, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.ffn.layers.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.ffn_norm.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.ffn_norm.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.mask_fcs.0.weight - torch.Size([128, 128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.mask_fcs.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.mask_fcs.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.fc_mask.weight - torch.Size([128, 128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.0.fc_mask.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.attention.attn.in_proj_weight - torch.Size([384, 128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.attention.attn.in_proj_bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.attention.attn.out_proj.weight - torch.Size([128, 128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.attention.attn.out_proj.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.attention_norm.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.attention_norm.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.kernel_update_conv.dynamic_layer.weight - torch.Size([512, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.kernel_update_conv.dynamic_layer.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.kernel_update_conv.input_layer.weight - torch.Size([512, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.kernel_update_conv.input_layer.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.kernel_update_conv.input_gate.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.kernel_update_conv.input_gate.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.kernel_update_conv.update_gate.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.kernel_update_conv.update_gate.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.kernel_update_conv.norm_in.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.kernel_update_conv.norm_in.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.kernel_update_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.kernel_update_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.kernel_update_conv.input_norm_in.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.kernel_update_conv.input_norm_in.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.kernel_update_conv.input_norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.kernel_update_conv.input_norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.kernel_update_conv.fc_layer.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.kernel_update_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.kernel_update_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.kernel_update_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.feat_transform.conv.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.feat_transform.conv.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.ffn.layers.0.0.weight - torch.Size([2048, 128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.ffn.layers.1.weight - torch.Size([128, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.ffn.layers.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.ffn_norm.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.ffn_norm.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.mask_fcs.0.weight - torch.Size([128, 128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.mask_fcs.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.mask_fcs.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.fc_mask.weight - torch.Size([128, 128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.1.fc_mask.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.attention.attn.in_proj_weight - torch.Size([384, 128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.attention.attn.in_proj_bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.attention.attn.out_proj.weight - torch.Size([128, 128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.attention.attn.out_proj.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.attention_norm.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.attention_norm.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.kernel_update_conv.dynamic_layer.weight - torch.Size([512, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.kernel_update_conv.dynamic_layer.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.kernel_update_conv.input_layer.weight - torch.Size([512, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.kernel_update_conv.input_layer.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.kernel_update_conv.input_gate.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.kernel_update_conv.input_gate.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.kernel_update_conv.update_gate.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.kernel_update_conv.update_gate.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.kernel_update_conv.norm_in.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.kernel_update_conv.norm_in.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.kernel_update_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.kernel_update_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.kernel_update_conv.input_norm_in.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.kernel_update_conv.input_norm_in.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.kernel_update_conv.input_norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.kernel_update_conv.input_norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.kernel_update_conv.fc_layer.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.kernel_update_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.kernel_update_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.kernel_update_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.feat_transform.conv.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.feat_transform.conv.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.ffn.layers.0.0.weight - torch.Size([2048, 128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.ffn.layers.1.weight - torch.Size([128, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.ffn.layers.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.ffn_norm.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.ffn_norm.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.mask_fcs.0.weight - torch.Size([128, 128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.mask_fcs.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.mask_fcs.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.fc_mask.weight - torch.Size([128, 128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.kernel_update_head.2.fc_mask.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2024/04/14 22:10:27 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2024/04/14 22:10:27 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2024/04/14 22:10:27 - mmengine - INFO - Checkpoints will be saved to /home/zhouruiliang/code/mmsegmentation-main/work_dirs/lraspp_ket_fastvit_ful.
2024/04/14 22:10:46 - mmengine - INFO - Exp name: lraspp_ket_fastvit_ful_20240414_221012
2024/04/14 22:10:46 - mmengine - INFO - Iter(train) [   14/20000]  lr: 1.4000e-06  eta: 7:39:32  time: 0.7099  data_time: 0.0208  memory: 7190  grad_norm: 598.3338  loss: 8.1566  decode.loss_ce.s0: 1.3751  decode.acc_seg.s0: 26.0668  decode.loss_ce.s1: 2.2046  decode.acc_seg.s1: 33.3427  decode.loss_ce.s2: 2.1416  decode.acc_seg.s2: 28.2694  decode.loss_ce.s3: 2.4353  decode.acc_seg.s3: 23.8249
2024/04/14 22:11:47 - mmengine - INFO - Iter(train) [  100/20000]  lr: 1.0000e-05  eta: 4:25:25  time: 0.7102  data_time: 0.0220  memory: 4839  grad_norm: 598.8721  loss: 6.1525  decode.loss_ce.s0: 1.3727  decode.acc_seg.s0: 29.9237  decode.loss_ce.s1: 1.5352  decode.acc_seg.s1: 47.3393  decode.loss_ce.s2: 1.6602  decode.acc_seg.s2: 26.8917  decode.loss_ce.s3: 1.5843  decode.acc_seg.s3: 49.7807
2024/04/14 22:12:57 - mmengine - INFO - Iter(train) [  200/20000]  lr: 2.0000e-05  eta: 4:08:28  time: 0.7046  data_time: 0.0195  memory: 4840  grad_norm: 138.3426  loss: 4.7666  decode.loss_ce.s0: 1.3789  decode.acc_seg.s0: 35.0188  decode.loss_ce.s1: 1.1703  decode.acc_seg.s1: 58.7699  decode.loss_ce.s2: 1.1012  decode.acc_seg.s2: 58.2297  decode.loss_ce.s3: 1.1161  decode.acc_seg.s3: 58.6077
2024/04/14 22:14:08 - mmengine - INFO - Iter(train) [  300/20000]  lr: 3.0000e-05  eta: 4:02:05  time: 0.7021  data_time: 0.0220  memory: 4840  grad_norm: 91.6725  loss: 4.1587  decode.loss_ce.s0: 1.3664  decode.acc_seg.s0: 46.0603  decode.loss_ce.s1: 0.9700  decode.acc_seg.s1: 74.9595  decode.loss_ce.s2: 0.9151  decode.acc_seg.s2: 78.3687  decode.loss_ce.s3: 0.9071  decode.acc_seg.s3: 79.5355
2024/04/14 22:15:18 - mmengine - INFO - Iter(train) [  400/20000]  lr: 4.0000e-05  eta: 3:58:14  time: 0.7053  data_time: 0.0214  memory: 4840  grad_norm: 151.6099  loss: 3.9653  decode.loss_ce.s0: 1.3313  decode.acc_seg.s0: 48.7138  decode.loss_ce.s1: 0.9318  decode.acc_seg.s1: 61.8718  decode.loss_ce.s2: 0.8688  decode.acc_seg.s2: 64.6208  decode.loss_ce.s3: 0.8334  decode.acc_seg.s3: 59.4564
2024/04/14 22:16:29 - mmengine - INFO - Iter(train) [  500/20000]  lr: 5.0000e-05  eta: 3:55:36  time: 0.7105  data_time: 0.0241  memory: 4840  grad_norm: 59.7956  loss: 3.5741  decode.loss_ce.s0: 1.3151  decode.acc_seg.s0: 47.5827  decode.loss_ce.s1: 0.7827  decode.acc_seg.s1: 72.6496  decode.loss_ce.s2: 0.7260  decode.acc_seg.s2: 75.5153  decode.loss_ce.s3: 0.7503  decode.acc_seg.s3: 72.5472
2024/04/14 22:16:32 - mmengine - INFO - per class results:
2024/04/14 22:16:32 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 83.97 |  91.7 | 91.29 | 91.29  |   90.87   |  91.7  |
| monolayer  | 57.85 | 76.32 |  73.3 |  73.3  |   70.51   | 76.32  |
|  bilayer   | 23.32 | 24.43 | 37.82 | 37.82  |   83.72   | 24.43  |
| multilayer | 75.69 | 90.58 | 86.16 | 86.16  |   82.16   | 90.58  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/14 22:16:32 - mmengine - INFO - Iter(val) [8/8]    aAcc: 84.0400  mIoU: 60.2100  mAcc: 70.7600  mDice: 72.1400  mFscore: 72.1400  mPrecision: 81.8100  mRecall: 70.7600  data_time: 0.2208  time: 0.3955
2024/04/14 22:16:33 - mmengine - INFO - The best checkpoint with 60.2100 mIoU at 500 iter is saved to best_mIoU_iter_500.pth.
2024/04/14 22:17:43 - mmengine - INFO - Iter(train) [  600/20000]  lr: 6.0000e-05  eta: 3:53:39  time: 0.7061  data_time: 0.0201  memory: 4941  grad_norm: 62.9545  loss: 3.0469  decode.loss_ce.s0: 1.2447  decode.acc_seg.s0: 47.8321  decode.loss_ce.s1: 0.6287  decode.acc_seg.s1: 52.1150  decode.loss_ce.s2: 0.5882  decode.acc_seg.s2: 56.7918  decode.loss_ce.s3: 0.5853  decode.acc_seg.s3: 59.3309
2024/04/14 22:18:54 - mmengine - INFO - Iter(train) [  700/20000]  lr: 7.0000e-05  eta: 3:51:50  time: 0.7112  data_time: 0.0242  memory: 4840  grad_norm: 39.7035  loss: 2.6983  decode.loss_ce.s0: 1.1486  decode.acc_seg.s0: 52.5700  decode.loss_ce.s1: 0.5582  decode.acc_seg.s1: 71.2844  decode.loss_ce.s2: 0.5021  decode.acc_seg.s2: 71.6832  decode.loss_ce.s3: 0.4895  decode.acc_seg.s3: 71.5207
2024/04/14 22:20:05 - mmengine - INFO - Iter(train) [  800/20000]  lr: 8.0000e-05  eta: 3:50:11  time: 0.7087  data_time: 0.0225  memory: 4840  grad_norm: 37.1216  loss: 2.4583  decode.loss_ce.s0: 1.0358  decode.acc_seg.s0: 64.7751  decode.loss_ce.s1: 0.4905  decode.acc_seg.s1: 78.6020  decode.loss_ce.s2: 0.4691  decode.acc_seg.s2: 66.6161  decode.loss_ce.s3: 0.4628  decode.acc_seg.s3: 68.5161
2024/04/14 22:21:16 - mmengine - INFO - Iter(train) [  900/20000]  lr: 9.0000e-05  eta: 3:48:38  time: 0.7068  data_time: 0.0215  memory: 4840  grad_norm: 46.4736  loss: 2.7041  decode.loss_ce.s0: 0.9778  decode.acc_seg.s0: 52.7979  decode.loss_ce.s1: 0.5724  decode.acc_seg.s1: 82.9544  decode.loss_ce.s2: 0.5815  decode.acc_seg.s2: 76.7040  decode.loss_ce.s3: 0.5724  decode.acc_seg.s3: 82.4687
2024/04/14 22:22:27 - mmengine - INFO - Exp name: lraspp_ket_fastvit_ful_20240414_221012
2024/04/14 22:22:27 - mmengine - INFO - Iter(train) [ 1000/20000]  lr: 1.0000e-04  eta: 3:47:05  time: 0.7077  data_time: 0.0243  memory: 4840  grad_norm: 68.2398  loss: 2.1584  decode.loss_ce.s0: 0.8417  decode.acc_seg.s0: 79.4688  decode.loss_ce.s1: 0.4422  decode.acc_seg.s1: 82.1401  decode.loss_ce.s2: 0.4201  decode.acc_seg.s2: 85.0960  decode.loss_ce.s3: 0.4545  decode.acc_seg.s3: 84.3381
2024/04/14 22:22:27 - mmengine - INFO - per class results:
2024/04/14 22:22:27 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 86.08 | 92.77 | 92.52 | 92.52  |   92.27   | 92.77  |
| monolayer  | 62.35 | 78.69 | 76.81 | 76.81  |   75.02   | 78.69  |
|  bilayer   | 44.72 | 49.17 |  61.8 |  61.8  |   83.15   | 49.17  |
| multilayer | 82.61 | 92.91 | 90.48 | 90.48  |   88.17   | 92.91  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/14 22:22:27 - mmengine - INFO - Iter(val) [8/8]    aAcc: 86.7800  mIoU: 68.9400  mAcc: 78.3900  mDice: 80.4000  mFscore: 80.4000  mPrecision: 84.6500  mRecall: 78.3900  data_time: 0.0140  time: 0.0568
2024/04/14 22:22:27 - mmengine - INFO - The previous best checkpoint /home/zhouruiliang/code/mmsegmentation-main/work_dirs/lraspp_ket_fastvit_ful/best_mIoU_iter_500.pth is removed
2024/04/14 22:22:28 - mmengine - INFO - The best checkpoint with 68.9400 mIoU at 1000 iter is saved to best_mIoU_iter_1000.pth.
2024/04/14 22:23:38 - mmengine - INFO - Iter(train) [ 1100/20000]  lr: 1.0000e-04  eta: 3:45:40  time: 0.7038  data_time: 0.0197  memory: 4840  grad_norm: 51.5479  loss: 1.7748  decode.loss_ce.s0: 0.7720  decode.acc_seg.s0: 55.3564  decode.loss_ce.s1: 0.3460  decode.acc_seg.s1: 75.2303  decode.loss_ce.s2: 0.3311  decode.acc_seg.s2: 77.4871  decode.loss_ce.s3: 0.3257  decode.acc_seg.s3: 75.8498
2024/04/14 22:24:49 - mmengine - INFO - Iter(train) [ 1200/20000]  lr: 1.0000e-04  eta: 3:44:11  time: 0.7048  data_time: 0.0239  memory: 4840  grad_norm: 39.0795  loss: 1.5246  decode.loss_ce.s0: 0.6519  decode.acc_seg.s0: 74.9870  decode.loss_ce.s1: 0.3108  decode.acc_seg.s1: 84.7606  decode.loss_ce.s2: 0.2874  decode.acc_seg.s2: 86.2322  decode.loss_ce.s3: 0.2743  decode.acc_seg.s3: 84.7233
2024/04/14 22:25:59 - mmengine - INFO - Iter(train) [ 1300/20000]  lr: 1.0000e-04  eta: 3:42:43  time: 0.7023  data_time: 0.0209  memory: 4840  grad_norm: 34.9141  loss: 1.5395  decode.loss_ce.s0: 0.6661  decode.acc_seg.s0: 74.8624  decode.loss_ce.s1: 0.3144  decode.acc_seg.s1: 82.1892  decode.loss_ce.s2: 0.2868  decode.acc_seg.s2: 84.6488  decode.loss_ce.s3: 0.2721  decode.acc_seg.s3: 85.6216
2024/04/14 22:27:09 - mmengine - INFO - Iter(train) [ 1400/20000]  lr: 1.0000e-04  eta: 3:41:16  time: 0.7001  data_time: 0.0217  memory: 4840  grad_norm: 55.2794  loss: 1.5984  decode.loss_ce.s0: 0.6794  decode.acc_seg.s0: 57.4076  decode.loss_ce.s1: 0.3351  decode.acc_seg.s1: 85.5080  decode.loss_ce.s2: 0.2892  decode.acc_seg.s2: 90.9968  decode.loss_ce.s3: 0.2947  decode.acc_seg.s3: 89.8091
2024/04/14 22:28:20 - mmengine - INFO - Iter(train) [ 1500/20000]  lr: 1.0000e-04  eta: 3:39:51  time: 0.7045  data_time: 0.0232  memory: 4840  grad_norm: 31.8406  loss: 1.4030  decode.loss_ce.s0: 0.5757  decode.acc_seg.s0: 82.6689  decode.loss_ce.s1: 0.2815  decode.acc_seg.s1: 95.6890  decode.loss_ce.s2: 0.2730  decode.acc_seg.s2: 95.1080  decode.loss_ce.s3: 0.2728  decode.acc_seg.s3: 95.1071
2024/04/14 22:28:20 - mmengine - INFO - per class results:
2024/04/14 22:28:20 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 87.64 | 94.39 | 93.41 | 93.41  |   92.46   | 94.39  |
| monolayer  | 66.74 |  76.3 | 80.05 | 80.05  |   84.19   |  76.3  |
|  bilayer   | 52.19 | 55.54 | 68.59 | 68.59  |   89.65   | 55.54  |
| multilayer | 71.48 | 98.87 | 83.37 | 83.37  |   72.07   | 98.87  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/14 22:28:20 - mmengine - INFO - Iter(val) [8/8]    aAcc: 87.9500  mIoU: 69.5100  mAcc: 81.2800  mDice: 81.3600  mFscore: 81.3600  mPrecision: 84.5900  mRecall: 81.2800  data_time: 0.0149  time: 0.0574
2024/04/14 22:28:20 - mmengine - INFO - The previous best checkpoint /home/zhouruiliang/code/mmsegmentation-main/work_dirs/lraspp_ket_fastvit_ful/best_mIoU_iter_1000.pth is removed
2024/04/14 22:28:21 - mmengine - INFO - The best checkpoint with 69.5100 mIoU at 1500 iter is saved to best_mIoU_iter_1500.pth.
2024/04/14 22:29:31 - mmengine - INFO - Iter(train) [ 1600/20000]  lr: 1.0000e-04  eta: 3:38:30  time: 0.6962  data_time: 0.0231  memory: 4840  grad_norm: 27.8595  loss: 1.2554  decode.loss_ce.s0: 0.5539  decode.acc_seg.s0: 67.5255  decode.loss_ce.s1: 0.2465  decode.acc_seg.s1: 88.3577  decode.loss_ce.s2: 0.2304  decode.acc_seg.s2: 89.1074  decode.loss_ce.s3: 0.2246  decode.acc_seg.s3: 89.8996
2024/04/14 22:30:40 - mmengine - INFO - Iter(train) [ 1700/20000]  lr: 1.0000e-04  eta: 3:37:02  time: 0.6962  data_time: 0.0230  memory: 4840  grad_norm: 40.2002  loss: 1.3508  decode.loss_ce.s0: 0.4747  decode.acc_seg.s0: 88.6977  decode.loss_ce.s1: 0.2859  decode.acc_seg.s1: 92.8798  decode.loss_ce.s2: 0.2878  decode.acc_seg.s2: 93.7751  decode.loss_ce.s3: 0.3023  decode.acc_seg.s3: 93.6060
2024/04/14 22:31:50 - mmengine - INFO - Iter(train) [ 1800/20000]  lr: 1.0000e-04  eta: 3:35:37  time: 0.6970  data_time: 0.0249  memory: 4840  grad_norm: 33.4717  loss: 0.8427  decode.loss_ce.s0: 0.3616  decode.acc_seg.s0: 82.3947  decode.loss_ce.s1: 0.1702  decode.acc_seg.s1: 92.2602  decode.loss_ce.s2: 0.1572  decode.acc_seg.s2: 93.1472  decode.loss_ce.s3: 0.1538  decode.acc_seg.s3: 93.5277
2024/04/14 22:33:00 - mmengine - INFO - Iter(train) [ 1900/20000]  lr: 1.0000e-04  eta: 3:34:13  time: 0.6985  data_time: 0.0225  memory: 4840  grad_norm: 32.9034  loss: 1.0042  decode.loss_ce.s0: 0.3643  decode.acc_seg.s0: 90.0841  decode.loss_ce.s1: 0.2167  decode.acc_seg.s1: 93.2168  decode.loss_ce.s2: 0.2109  decode.acc_seg.s2: 93.3068  decode.loss_ce.s3: 0.2123  decode.acc_seg.s3: 93.4414
2024/04/14 22:34:10 - mmengine - INFO - Exp name: lraspp_ket_fastvit_ful_20240414_221012
2024/04/14 22:34:10 - mmengine - INFO - Iter(train) [ 2000/20000]  lr: 1.0000e-04  eta: 3:32:50  time: 0.6966  data_time: 0.0243  memory: 4839  grad_norm: 38.5665  loss: 0.9890  decode.loss_ce.s0: 0.3392  decode.acc_seg.s0: 92.1192  decode.loss_ce.s1: 0.2240  decode.acc_seg.s1: 93.9785  decode.loss_ce.s2: 0.2096  decode.acc_seg.s2: 94.2455  decode.loss_ce.s3: 0.2161  decode.acc_seg.s3: 94.1191
2024/04/14 22:34:10 - mmengine - INFO - per class results:
2024/04/14 22:34:10 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 88.87 | 97.17 | 94.11 | 94.11  |   91.24   | 97.17  |
| monolayer  | 71.74 | 79.85 | 83.55 | 83.55  |    87.6   | 79.85  |
|  bilayer   | 46.46 | 48.64 | 63.44 | 63.44  |    91.2   | 48.64  |
| multilayer | 81.39 | 94.36 | 89.74 | 89.74  |   85.55   | 94.36  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/14 22:34:10 - mmengine - INFO - Iter(val) [8/8]    aAcc: 89.8100  mIoU: 72.1200  mAcc: 80.0100  mDice: 82.7100  mFscore: 82.7100  mPrecision: 88.9000  mRecall: 80.0100  data_time: 0.0127  time: 0.0552
2024/04/14 22:34:10 - mmengine - INFO - The previous best checkpoint /home/zhouruiliang/code/mmsegmentation-main/work_dirs/lraspp_ket_fastvit_ful/best_mIoU_iter_1500.pth is removed
2024/04/14 22:34:11 - mmengine - INFO - The best checkpoint with 72.1200 mIoU at 2000 iter is saved to best_mIoU_iter_2000.pth.
2024/04/14 22:35:20 - mmengine - INFO - Iter(train) [ 2100/20000]  lr: 1.0000e-04  eta: 3:31:31  time: 0.6954  data_time: 0.0232  memory: 4839  grad_norm: 70.2244  loss: 1.5603  decode.loss_ce.s0: 0.4073  decode.acc_seg.s0: 85.2867  decode.loss_ce.s1: 0.3746  decode.acc_seg.s1: 92.0439  decode.loss_ce.s2: 0.3891  decode.acc_seg.s2: 92.1896  decode.loss_ce.s3: 0.3893  decode.acc_seg.s3: 92.2161
2024/04/14 22:36:30 - mmengine - INFO - Iter(train) [ 2200/20000]  lr: 1.0000e-04  eta: 3:30:11  time: 0.6970  data_time: 0.0227  memory: 4840  grad_norm: 69.9381  loss: 1.1344  decode.loss_ce.s0: 0.3843  decode.acc_seg.s0: 86.9054  decode.loss_ce.s1: 0.2450  decode.acc_seg.s1: 93.5341  decode.loss_ce.s2: 0.2486  decode.acc_seg.s2: 93.6753  decode.loss_ce.s3: 0.2565  decode.acc_seg.s3: 93.8618
2024/04/14 22:37:39 - mmengine - INFO - Iter(train) [ 2300/20000]  lr: 1.0000e-04  eta: 3:28:50  time: 0.6914  data_time: 0.0232  memory: 4840  grad_norm: 35.4259  loss: 0.9994  decode.loss_ce.s0: 0.3235  decode.acc_seg.s0: 89.2376  decode.loss_ce.s1: 0.2364  decode.acc_seg.s1: 89.7015  decode.loss_ce.s2: 0.2254  decode.acc_seg.s2: 91.0541  decode.loss_ce.s3: 0.2142  decode.acc_seg.s3: 92.4164
2024/04/14 22:38:49 - mmengine - INFO - Iter(train) [ 2400/20000]  lr: 1.0000e-04  eta: 3:27:29  time: 0.6948  data_time: 0.0219  memory: 4840  grad_norm: 58.1933  loss: 1.0034  decode.loss_ce.s0: 0.3288  decode.acc_seg.s0: 79.6820  decode.loss_ce.s1: 0.2411  decode.acc_seg.s1: 73.2723  decode.loss_ce.s2: 0.2173  decode.acc_seg.s2: 77.1464  decode.loss_ce.s3: 0.2161  decode.acc_seg.s3: 76.6221
2024/04/14 22:39:58 - mmengine - INFO - Iter(train) [ 2500/20000]  lr: 1.0000e-04  eta: 3:26:09  time: 0.6981  data_time: 0.0221  memory: 4840  grad_norm: 16.0895  loss: 0.7272  decode.loss_ce.s0: 0.2256  decode.acc_seg.s0: 85.7467  decode.loss_ce.s1: 0.1660  decode.acc_seg.s1: 84.6427  decode.loss_ce.s2: 0.1703  decode.acc_seg.s2: 84.8340  decode.loss_ce.s3: 0.1652  decode.acc_seg.s3: 84.3397
2024/04/14 22:39:58 - mmengine - INFO - Saving checkpoint at 2500 iterations
2024/04/14 22:39:59 - mmengine - INFO - per class results:
2024/04/14 22:39:59 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 88.34 | 98.05 | 93.81 | 93.81  |   89.92   | 98.05  |
| monolayer  | 67.91 | 74.72 | 80.89 | 80.89  |   88.16   | 74.72  |
|  bilayer   | 44.34 | 49.47 | 61.44 | 61.44  |   81.05   | 49.47  |
| multilayer |  82.3 | 93.96 | 90.29 | 90.29  |    86.9   | 93.96  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/14 22:39:59 - mmengine - INFO - Iter(val) [8/8]    aAcc: 88.9600  mIoU: 70.7200  mAcc: 79.0500  mDice: 81.6100  mFscore: 81.6100  mPrecision: 86.5100  mRecall: 79.0500  data_time: 0.0108  time: 0.0537
2024/04/14 22:41:09 - mmengine - INFO - Iter(train) [ 2600/20000]  lr: 1.0000e-04  eta: 3:24:51  time: 0.6972  data_time: 0.0194  memory: 4840  grad_norm: 43.6060  loss: 0.7953  decode.loss_ce.s0: 0.2546  decode.acc_seg.s0: 95.0708  decode.loss_ce.s1: 0.1824  decode.acc_seg.s1: 95.6149  decode.loss_ce.s2: 0.1803  decode.acc_seg.s2: 95.7539  decode.loss_ce.s3: 0.1780  decode.acc_seg.s3: 96.0112
2024/04/14 22:42:18 - mmengine - INFO - Iter(train) [ 2700/20000]  lr: 1.0000e-04  eta: 3:23:33  time: 0.6964  data_time: 0.0205  memory: 4839  grad_norm: 20.7229  loss: 0.6734  decode.loss_ce.s0: 0.2090  decode.acc_seg.s0: 90.7605  decode.loss_ce.s1: 0.1528  decode.acc_seg.s1: 93.2358  decode.loss_ce.s2: 0.1571  decode.acc_seg.s2: 92.9684  decode.loss_ce.s3: 0.1546  decode.acc_seg.s3: 92.7738
2024/04/14 22:43:28 - mmengine - INFO - Iter(train) [ 2800/20000]  lr: 1.0000e-04  eta: 3:22:16  time: 0.6990  data_time: 0.0227  memory: 4840  grad_norm: 14.3349  loss: 0.5981  decode.loss_ce.s0: 0.1986  decode.acc_seg.s0: 92.6743  decode.loss_ce.s1: 0.1358  decode.acc_seg.s1: 92.9351  decode.loss_ce.s2: 0.1323  decode.acc_seg.s2: 92.6373  decode.loss_ce.s3: 0.1314  decode.acc_seg.s3: 93.2768
2024/04/14 22:44:37 - mmengine - INFO - Iter(train) [ 2900/20000]  lr: 1.0000e-04  eta: 3:20:59  time: 0.6954  data_time: 0.0229  memory: 4840  grad_norm: 65.1181  loss: 0.5906  decode.loss_ce.s0: 0.1829  decode.acc_seg.s0: 96.2101  decode.loss_ce.s1: 0.1362  decode.acc_seg.s1: 96.5153  decode.loss_ce.s2: 0.1371  decode.acc_seg.s2: 96.6532  decode.loss_ce.s3: 0.1344  decode.acc_seg.s3: 96.7181
2024/04/14 22:45:47 - mmengine - INFO - Exp name: lraspp_ket_fastvit_ful_20240414_221012
2024/04/14 22:45:47 - mmengine - INFO - Iter(train) [ 3000/20000]  lr: 1.0000e-04  eta: 3:19:43  time: 0.6958  data_time: 0.0210  memory: 4840  grad_norm: 14.2308  loss: 0.5952  decode.loss_ce.s0: 0.1757  decode.acc_seg.s0: 93.5110  decode.loss_ce.s1: 0.1420  decode.acc_seg.s1: 94.8880  decode.loss_ce.s2: 0.1389  decode.acc_seg.s2: 94.9726  decode.loss_ce.s3: 0.1387  decode.acc_seg.s3: 95.0499
2024/04/14 22:45:48 - mmengine - INFO - per class results:
2024/04/14 22:45:48 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 90.89 | 98.05 | 95.23 | 95.23  |   92.57   | 98.05  |
| monolayer  | 70.13 | 76.51 | 82.44 | 82.44  |   89.37   | 76.51  |
|  bilayer   | 48.01 | 49.95 | 64.87 | 64.87  |    92.5   | 49.95  |
| multilayer | 75.22 |  99.2 | 85.86 | 85.86  |   75.68   |  99.2  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/14 22:45:48 - mmengine - INFO - Iter(val) [8/8]    aAcc: 89.9200  mIoU: 71.0600  mAcc: 80.9300  mDice: 82.1000  mFscore: 82.1000  mPrecision: 87.5300  mRecall: 80.9300  data_time: 0.0144  time: 0.0570
2024/04/14 22:46:57 - mmengine - INFO - Iter(train) [ 3100/20000]  lr: 1.0000e-04  eta: 3:18:28  time: 0.7011  data_time: 0.0218  memory: 4840  grad_norm: 24.4290  loss: 0.9035  decode.loss_ce.s0: 0.2856  decode.acc_seg.s0: 86.4742  decode.loss_ce.s1: 0.2122  decode.acc_seg.s1: 93.2665  decode.loss_ce.s2: 0.2037  decode.acc_seg.s2: 93.7172  decode.loss_ce.s3: 0.2021  decode.acc_seg.s3: 93.6755
2024/04/14 22:48:07 - mmengine - INFO - Iter(train) [ 3200/20000]  lr: 1.0000e-04  eta: 3:17:12  time: 0.6960  data_time: 0.0201  memory: 4840  grad_norm: 31.4720  loss: 0.5661  decode.loss_ce.s0: 0.1726  decode.acc_seg.s0: 95.6056  decode.loss_ce.s1: 0.1311  decode.acc_seg.s1: 97.2496  decode.loss_ce.s2: 0.1293  decode.acc_seg.s2: 97.2222  decode.loss_ce.s3: 0.1331  decode.acc_seg.s3: 97.3286
2024/04/14 22:49:16 - mmengine - INFO - Iter(train) [ 3300/20000]  lr: 1.0000e-04  eta: 3:15:56  time: 0.6896  data_time: 0.0206  memory: 4840  grad_norm: 31.3253  loss: 0.5467  decode.loss_ce.s0: 0.1723  decode.acc_seg.s0: 96.6229  decode.loss_ce.s1: 0.1286  decode.acc_seg.s1: 96.5174  decode.loss_ce.s2: 0.1222  decode.acc_seg.s2: 96.4515  decode.loss_ce.s3: 0.1236  decode.acc_seg.s3: 96.4993
2024/04/14 22:50:25 - mmengine - INFO - Iter(train) [ 3400/20000]  lr: 1.0000e-04  eta: 3:14:41  time: 0.6946  data_time: 0.0217  memory: 4840  grad_norm: 72.7153  loss: 0.6012  decode.loss_ce.s0: 0.1858  decode.acc_seg.s0: 90.2299  decode.loss_ce.s1: 0.1351  decode.acc_seg.s1: 90.8773  decode.loss_ce.s2: 0.1379  decode.acc_seg.s2: 89.4574  decode.loss_ce.s3: 0.1425  decode.acc_seg.s3: 88.6736
2024/04/14 22:51:35 - mmengine - INFO - Iter(train) [ 3500/20000]  lr: 1.0000e-04  eta: 3:13:26  time: 0.6932  data_time: 0.0215  memory: 4840  grad_norm: 22.9867  loss: 0.5603  decode.loss_ce.s0: 0.1709  decode.acc_seg.s0: 94.0294  decode.loss_ce.s1: 0.1326  decode.acc_seg.s1: 95.6216  decode.loss_ce.s2: 0.1284  decode.acc_seg.s2: 95.6345  decode.loss_ce.s3: 0.1283  decode.acc_seg.s3: 95.9714
2024/04/14 22:51:35 - mmengine - INFO - per class results:
2024/04/14 22:51:35 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 90.38 | 95.44 | 94.94 | 94.94  |   94.45   | 95.44  |
| monolayer  | 70.89 | 80.99 | 82.96 | 82.96  |   85.03   | 80.99  |
|  bilayer   | 60.46 | 69.97 | 75.36 | 75.36  |   81.64   | 69.97  |
| multilayer | 74.91 | 92.49 | 85.65 | 85.65  |   79.76   | 92.49  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/14 22:51:35 - mmengine - INFO - Iter(val) [8/8]    aAcc: 90.0200  mIoU: 74.1600  mAcc: 84.7200  mDice: 84.7300  mFscore: 84.7300  mPrecision: 85.2200  mRecall: 84.7200  data_time: 0.0171  time: 0.0597
2024/04/14 22:51:35 - mmengine - INFO - The previous best checkpoint /home/zhouruiliang/code/mmsegmentation-main/work_dirs/lraspp_ket_fastvit_ful/best_mIoU_iter_2000.pth is removed
2024/04/14 22:51:36 - mmengine - INFO - The best checkpoint with 74.1600 mIoU at 3500 iter is saved to best_mIoU_iter_3500.pth.
2024/04/14 22:52:46 - mmengine - INFO - Iter(train) [ 3600/20000]  lr: 1.0000e-04  eta: 3:12:18  time: 0.7005  data_time: 0.0243  memory: 4840  grad_norm: 36.9929  loss: 0.8073  decode.loss_ce.s0: 0.2159  decode.acc_seg.s0: 93.5135  decode.loss_ce.s1: 0.1884  decode.acc_seg.s1: 96.8729  decode.loss_ce.s2: 0.2029  decode.acc_seg.s2: 96.9434  decode.loss_ce.s3: 0.2001  decode.acc_seg.s3: 96.9911
2024/04/14 22:53:56 - mmengine - INFO - Iter(train) [ 3700/20000]  lr: 1.0000e-04  eta: 3:11:03  time: 0.6866  data_time: 0.0202  memory: 4839  grad_norm: 8.8871  loss: 0.4912  decode.loss_ce.s0: 0.1588  decode.acc_seg.s0: 95.3554  decode.loss_ce.s1: 0.1109  decode.acc_seg.s1: 97.7421  decode.loss_ce.s2: 0.1102  decode.acc_seg.s2: 97.9004  decode.loss_ce.s3: 0.1114  decode.acc_seg.s3: 97.8820
2024/04/14 22:55:05 - mmengine - INFO - Iter(train) [ 3800/20000]  lr: 1.0000e-04  eta: 3:09:48  time: 0.6965  data_time: 0.0230  memory: 4840  grad_norm: 25.8085  loss: 0.6493  decode.loss_ce.s0: 0.2068  decode.acc_seg.s0: 95.5750  decode.loss_ce.s1: 0.1514  decode.acc_seg.s1: 96.9380  decode.loss_ce.s2: 0.1435  decode.acc_seg.s2: 96.9521  decode.loss_ce.s3: 0.1476  decode.acc_seg.s3: 96.8922
2024/04/14 22:56:14 - mmengine - INFO - Iter(train) [ 3900/20000]  lr: 1.0000e-04  eta: 3:08:33  time: 0.6883  data_time: 0.0218  memory: 4839  grad_norm: 62.5084  loss: 0.4918  decode.loss_ce.s0: 0.1637  decode.acc_seg.s0: 96.7745  decode.loss_ce.s1: 0.1079  decode.acc_seg.s1: 97.2805  decode.loss_ce.s2: 0.1123  decode.acc_seg.s2: 97.1431  decode.loss_ce.s3: 0.1079  decode.acc_seg.s3: 97.1615
2024/04/14 22:57:23 - mmengine - INFO - Exp name: lraspp_ket_fastvit_ful_20240414_221012
2024/04/14 22:57:23 - mmengine - INFO - Iter(train) [ 4000/20000]  lr: 1.0000e-04  eta: 3:07:18  time: 0.6882  data_time: 0.0223  memory: 4840  grad_norm: 11.5296  loss: 0.3926  decode.loss_ce.s0: 0.1144  decode.acc_seg.s0: 96.5333  decode.loss_ce.s1: 0.0927  decode.acc_seg.s1: 97.0583  decode.loss_ce.s2: 0.0922  decode.acc_seg.s2: 97.1634  decode.loss_ce.s3: 0.0933  decode.acc_seg.s3: 97.2110
2024/04/14 22:57:23 - mmengine - INFO - per class results:
2024/04/14 22:57:23 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 85.93 | 92.59 | 92.43 | 92.43  |   92.28   | 92.59  |
| monolayer  | 66.64 | 77.03 | 79.98 | 79.98  |   83.16   | 77.03  |
|  bilayer   | 37.96 | 41.05 | 55.04 | 55.04  |   83.47   | 41.05  |
| multilayer | 63.52 | 97.36 | 77.69 | 77.69  |   64.64   | 97.36  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/14 22:57:23 - mmengine - INFO - Iter(val) [8/8]    aAcc: 86.2000  mIoU: 63.5100  mAcc: 77.0100  mDice: 76.2900  mFscore: 76.2900  mPrecision: 80.8900  mRecall: 77.0100  data_time: 0.0152  time: 0.0579
2024/04/14 22:58:33 - mmengine - INFO - Iter(train) [ 4100/20000]  lr: 1.0000e-04  eta: 3:06:04  time: 0.6943  data_time: 0.0234  memory: 4840  grad_norm: 20.0489  loss: 0.4893  decode.loss_ce.s0: 0.1389  decode.acc_seg.s0: 96.7486  decode.loss_ce.s1: 0.1161  decode.acc_seg.s1: 96.9189  decode.loss_ce.s2: 0.1173  decode.acc_seg.s2: 96.9087  decode.loss_ce.s3: 0.1170  decode.acc_seg.s3: 97.0789
2024/04/14 22:59:42 - mmengine - INFO - Iter(train) [ 4200/20000]  lr: 1.0000e-04  eta: 3:04:50  time: 0.6958  data_time: 0.0233  memory: 4840  grad_norm: 8.3159  loss: 0.4012  decode.loss_ce.s0: 0.1229  decode.acc_seg.s0: 96.6850  decode.loss_ce.s1: 0.0928  decode.acc_seg.s1: 96.8141  decode.loss_ce.s2: 0.0923  decode.acc_seg.s2: 96.7303  decode.loss_ce.s3: 0.0931  decode.acc_seg.s3: 96.8283
2024/04/14 23:00:51 - mmengine - INFO - Iter(train) [ 4300/20000]  lr: 1.0000e-04  eta: 3:03:37  time: 0.6914  data_time: 0.0210  memory: 4840  grad_norm: 24.1731  loss: 0.6415  decode.loss_ce.s0: 0.1524  decode.acc_seg.s0: 88.4714  decode.loss_ce.s1: 0.1657  decode.acc_seg.s1: 92.5893  decode.loss_ce.s2: 0.1629  decode.acc_seg.s2: 92.3759  decode.loss_ce.s3: 0.1606  decode.acc_seg.s3: 92.2398
2024/04/14 23:02:01 - mmengine - INFO - Iter(train) [ 4400/20000]  lr: 1.0000e-04  eta: 3:02:24  time: 0.6930  data_time: 0.0210  memory: 4840  grad_norm: 14.3818  loss: 0.6392  decode.loss_ce.s0: 0.1799  decode.acc_seg.s0: 88.3420  decode.loss_ce.s1: 0.1581  decode.acc_seg.s1: 90.1532  decode.loss_ce.s2: 0.1504  decode.acc_seg.s2: 84.4780  decode.loss_ce.s3: 0.1509  decode.acc_seg.s3: 84.2226
2024/04/14 23:03:10 - mmengine - INFO - Iter(train) [ 4500/20000]  lr: 1.0000e-04  eta: 3:01:10  time: 0.6925  data_time: 0.0209  memory: 4840  grad_norm: 12.6782  loss: 0.3433  decode.loss_ce.s0: 0.1025  decode.acc_seg.s0: 93.3241  decode.loss_ce.s1: 0.0801  decode.acc_seg.s1: 96.5225  decode.loss_ce.s2: 0.0800  decode.acc_seg.s2: 96.3979  decode.loss_ce.s3: 0.0807  decode.acc_seg.s3: 96.4333
2024/04/14 23:03:10 - mmengine - INFO - per class results:
2024/04/14 23:03:10 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background |  89.4 | 95.27 |  94.4 |  94.4  |   93.55   | 95.27  |
| monolayer  | 70.21 | 78.48 |  82.5 |  82.5  |   86.95   | 78.48  |
|  bilayer   | 45.23 | 47.38 | 62.29 | 62.29  |    90.9   | 47.38  |
| multilayer |  66.3 | 98.05 | 79.74 | 79.74  |   67.19   | 98.05  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/14 23:03:10 - mmengine - INFO - Iter(val) [8/8]    aAcc: 88.5600  mIoU: 67.7900  mAcc: 79.8000  mDice: 79.7300  mFscore: 79.7300  mPrecision: 84.6500  mRecall: 79.8000  data_time: 0.0162  time: 0.0588
2024/04/14 23:04:19 - mmengine - INFO - Iter(train) [ 4600/20000]  lr: 1.0000e-04  eta: 2:59:56  time: 0.6877  data_time: 0.0222  memory: 4840  grad_norm: 25.5237  loss: 0.3591  decode.loss_ce.s0: 0.1147  decode.acc_seg.s0: 97.7467  decode.loss_ce.s1: 0.0833  decode.acc_seg.s1: 98.0299  decode.loss_ce.s2: 0.0809  decode.acc_seg.s2: 98.0765  decode.loss_ce.s3: 0.0802  decode.acc_seg.s3: 98.0412
2024/04/14 23:05:28 - mmengine - INFO - Iter(train) [ 4700/20000]  lr: 1.0000e-04  eta: 2:58:42  time: 0.6989  data_time: 0.0212  memory: 4840  grad_norm: 10.7823  loss: 0.4318  decode.loss_ce.s0: 0.1190  decode.acc_seg.s0: 95.8362  decode.loss_ce.s1: 0.1052  decode.acc_seg.s1: 96.5849  decode.loss_ce.s2: 0.1033  decode.acc_seg.s2: 96.4731  decode.loss_ce.s3: 0.1043  decode.acc_seg.s3: 96.4375
2024/04/14 23:06:37 - mmengine - INFO - Iter(train) [ 4800/20000]  lr: 1.0000e-04  eta: 2:57:28  time: 0.6826  data_time: 0.0170  memory: 4840  grad_norm: 6.7832  loss: 0.3958  decode.loss_ce.s0: 0.1147  decode.acc_seg.s0: 97.4034  decode.loss_ce.s1: 0.0949  decode.acc_seg.s1: 98.0398  decode.loss_ce.s2: 0.0930  decode.acc_seg.s2: 97.9302  decode.loss_ce.s3: 0.0932  decode.acc_seg.s3: 97.9284
2024/04/14 23:07:46 - mmengine - INFO - Iter(train) [ 4900/20000]  lr: 1.0000e-04  eta: 2:56:13  time: 0.6822  data_time: 0.0207  memory: 4840  grad_norm: 6.9071  loss: 0.4596  decode.loss_ce.s0: 0.1440  decode.acc_seg.s0: 96.1715  decode.loss_ce.s1: 0.1035  decode.acc_seg.s1: 95.9203  decode.loss_ce.s2: 0.1058  decode.acc_seg.s2: 96.0356  decode.loss_ce.s3: 0.1063  decode.acc_seg.s3: 96.0042
2024/04/14 23:08:55 - mmengine - INFO - Exp name: lraspp_ket_fastvit_ful_20240414_221012
2024/04/14 23:08:55 - mmengine - INFO - Iter(train) [ 5000/20000]  lr: 1.0000e-04  eta: 2:55:02  time: 0.6854  data_time: 0.0219  memory: 4840  grad_norm: 14.1173  loss: 0.3456  decode.loss_ce.s0: 0.1038  decode.acc_seg.s0: 96.6562  decode.loss_ce.s1: 0.0807  decode.acc_seg.s1: 97.4998  decode.loss_ce.s2: 0.0807  decode.acc_seg.s2: 97.3261  decode.loss_ce.s3: 0.0802  decode.acc_seg.s3: 97.4427
2024/04/14 23:08:55 - mmengine - INFO - Saving checkpoint at 5000 iterations
2024/04/14 23:08:56 - mmengine - INFO - per class results:
2024/04/14 23:08:56 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 91.04 | 95.63 | 95.31 | 95.31  |   94.99   | 95.63  |
| monolayer  | 71.28 | 78.82 | 83.23 | 83.23  |   88.17   | 78.82  |
|  bilayer   | 46.06 | 48.11 | 63.07 | 63.07  |   91.54   | 48.11  |
| multilayer | 62.26 | 98.36 | 76.74 | 76.74  |   62.91   | 98.36  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/14 23:08:56 - mmengine - INFO - Iter(val) [8/8]    aAcc: 88.9400  mIoU: 67.6600  mAcc: 80.2300  mDice: 79.5900  mFscore: 79.5900  mPrecision: 84.4000  mRecall: 80.2300  data_time: 0.0125  time: 0.0555
2024/04/14 23:10:05 - mmengine - INFO - Iter(train) [ 5100/20000]  lr: 1.0000e-04  eta: 2:53:47  time: 0.6897  data_time: 0.0212  memory: 4840  grad_norm: 18.1649  loss: 0.4140  decode.loss_ce.s0: 0.1305  decode.acc_seg.s0: 96.3929  decode.loss_ce.s1: 0.0946  decode.acc_seg.s1: 96.3877  decode.loss_ce.s2: 0.0935  decode.acc_seg.s2: 96.4732  decode.loss_ce.s3: 0.0954  decode.acc_seg.s3: 96.4763
2024/04/14 23:11:13 - mmengine - INFO - Iter(train) [ 5200/20000]  lr: 1.0000e-04  eta: 2:52:33  time: 0.6831  data_time: 0.0204  memory: 4840  grad_norm: 21.0821  loss: 0.3537  decode.loss_ce.s0: 0.1037  decode.acc_seg.s0: 96.3826  decode.loss_ce.s1: 0.0837  decode.acc_seg.s1: 96.5142  decode.loss_ce.s2: 0.0826  decode.acc_seg.s2: 96.7110  decode.loss_ce.s3: 0.0837  decode.acc_seg.s3: 96.4459
2024/04/14 23:12:22 - mmengine - INFO - Iter(train) [ 5300/20000]  lr: 1.0000e-04  eta: 2:51:19  time: 0.6850  data_time: 0.0213  memory: 4840  grad_norm: 64.2803  loss: 0.4082  decode.loss_ce.s0: 0.1139  decode.acc_seg.s0: 95.5582  decode.loss_ce.s1: 0.0993  decode.acc_seg.s1: 96.4627  decode.loss_ce.s2: 0.0982  decode.acc_seg.s2: 96.9218  decode.loss_ce.s3: 0.0967  decode.acc_seg.s3: 97.0198
2024/04/14 23:13:30 - mmengine - INFO - Iter(train) [ 5400/20000]  lr: 1.0000e-04  eta: 2:50:05  time: 0.6843  data_time: 0.0212  memory: 4839  grad_norm: 26.9425  loss: 0.3948  decode.loss_ce.s0: 0.1107  decode.acc_seg.s0: 98.0403  decode.loss_ce.s1: 0.0955  decode.acc_seg.s1: 98.2499  decode.loss_ce.s2: 0.0933  decode.acc_seg.s2: 98.1924  decode.loss_ce.s3: 0.0954  decode.acc_seg.s3: 98.1985
2024/04/14 23:14:39 - mmengine - INFO - Iter(train) [ 5500/20000]  lr: 1.0000e-04  eta: 2:48:51  time: 0.6827  data_time: 0.0236  memory: 4839  grad_norm: 17.5229  loss: 0.2617  decode.loss_ce.s0: 0.0805  decode.acc_seg.s0: 97.1013  decode.loss_ce.s1: 0.0623  decode.acc_seg.s1: 97.2524  decode.loss_ce.s2: 0.0594  decode.acc_seg.s2: 97.3228  decode.loss_ce.s3: 0.0595  decode.acc_seg.s3: 97.2509
2024/04/14 23:14:39 - mmengine - INFO - per class results:
2024/04/14 23:14:39 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 90.79 | 92.32 | 95.17 | 95.17  |   98.21   | 92.32  |
| monolayer  | 75.34 | 89.73 | 85.94 | 85.94  |   82.46   | 89.73  |
|  bilayer   | 64.02 | 72.24 | 78.07 | 78.07  |   84.92   | 72.24  |
| multilayer | 72.38 | 93.57 | 83.97 | 83.97  |   76.16   | 93.57  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/14 23:14:39 - mmengine - INFO - Iter(val) [8/8]    aAcc: 90.7000  mIoU: 75.6300  mAcc: 86.9600  mDice: 85.7900  mFscore: 85.7900  mPrecision: 85.4400  mRecall: 86.9600  data_time: 0.0178  time: 0.0605
2024/04/14 23:14:39 - mmengine - INFO - The previous best checkpoint /home/zhouruiliang/code/mmsegmentation-main/work_dirs/lraspp_ket_fastvit_ful/best_mIoU_iter_3500.pth is removed
2024/04/14 23:14:40 - mmengine - INFO - The best checkpoint with 75.6300 mIoU at 5500 iter is saved to best_mIoU_iter_5500.pth.
2024/04/14 23:15:49 - mmengine - INFO - Iter(train) [ 5600/20000]  lr: 1.0000e-04  eta: 2:47:41  time: 0.6853  data_time: 0.0206  memory: 4839  grad_norm: 33.9032  loss: 0.6657  decode.loss_ce.s0: 0.1576  decode.acc_seg.s0: 92.5476  decode.loss_ce.s1: 0.1680  decode.acc_seg.s1: 92.6279  decode.loss_ce.s2: 0.1722  decode.acc_seg.s2: 92.9032  decode.loss_ce.s3: 0.1680  decode.acc_seg.s3: 92.6225
2024/04/14 23:16:57 - mmengine - INFO - Iter(train) [ 5700/20000]  lr: 1.0000e-04  eta: 2:46:28  time: 0.6895  data_time: 0.0243  memory: 4840  grad_norm: 19.7330  loss: 0.5692  decode.loss_ce.s0: 0.1694  decode.acc_seg.s0: 90.0830  decode.loss_ce.s1: 0.1342  decode.acc_seg.s1: 92.7289  decode.loss_ce.s2: 0.1340  decode.acc_seg.s2: 93.8332  decode.loss_ce.s3: 0.1315  decode.acc_seg.s3: 93.4762
2024/04/14 23:18:06 - mmengine - INFO - Iter(train) [ 5800/20000]  lr: 1.0000e-04  eta: 2:45:15  time: 0.6807  data_time: 0.0224  memory: 4840  grad_norm: 10.1415  loss: 0.3074  decode.loss_ce.s0: 0.0997  decode.acc_seg.s0: 97.5032  decode.loss_ce.s1: 0.0707  decode.acc_seg.s1: 97.6636  decode.loss_ce.s2: 0.0695  decode.acc_seg.s2: 97.6885  decode.loss_ce.s3: 0.0674  decode.acc_seg.s3: 97.7325
2024/04/14 23:19:14 - mmengine - INFO - Iter(train) [ 5900/20000]  lr: 1.0000e-04  eta: 2:44:01  time: 0.6822  data_time: 0.0205  memory: 4840  grad_norm: 11.3084  loss: 0.4677  decode.loss_ce.s0: 0.1329  decode.acc_seg.s0: 94.7347  decode.loss_ce.s1: 0.1129  decode.acc_seg.s1: 97.0245  decode.loss_ce.s2: 0.1106  decode.acc_seg.s2: 97.0735  decode.loss_ce.s3: 0.1113  decode.acc_seg.s3: 96.9957
2024/04/14 23:20:23 - mmengine - INFO - Exp name: lraspp_ket_fastvit_ful_20240414_221012
2024/04/14 23:20:23 - mmengine - INFO - Iter(train) [ 6000/20000]  lr: 1.0000e-04  eta: 2:42:49  time: 0.6819  data_time: 0.0198  memory: 4840  grad_norm: 27.4245  loss: 0.3789  decode.loss_ce.s0: 0.1045  decode.acc_seg.s0: 96.9839  decode.loss_ce.s1: 0.0917  decode.acc_seg.s1: 97.1021  decode.loss_ce.s2: 0.0922  decode.acc_seg.s2: 97.0496  decode.loss_ce.s3: 0.0905  decode.acc_seg.s3: 97.0257
2024/04/14 23:20:23 - mmengine - INFO - per class results:
2024/04/14 23:20:23 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 92.09 | 96.47 | 95.88 | 95.88  |    95.3   | 96.47  |
| monolayer  | 75.19 | 84.69 | 85.84 | 85.84  |   87.01   | 84.69  |
|  bilayer   | 65.73 | 73.53 | 79.32 | 79.32  |   86.11   | 73.53  |
| multilayer | 80.07 | 92.68 | 88.93 | 88.93  |   85.47   | 92.68  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/14 23:20:23 - mmengine - INFO - Iter(val) [8/8]    aAcc: 91.8200  mIoU: 78.2700  mAcc: 86.8400  mDice: 87.4900  mFscore: 87.4900  mPrecision: 88.4700  mRecall: 86.8400  data_time: 0.0149  time: 0.0577
2024/04/14 23:20:23 - mmengine - INFO - The previous best checkpoint /home/zhouruiliang/code/mmsegmentation-main/work_dirs/lraspp_ket_fastvit_ful/best_mIoU_iter_5500.pth is removed
2024/04/14 23:20:24 - mmengine - INFO - The best checkpoint with 78.2700 mIoU at 6000 iter is saved to best_mIoU_iter_6000.pth.
2024/04/14 23:21:33 - mmengine - INFO - Iter(train) [ 6100/20000]  lr: 1.0000e-04  eta: 2:41:38  time: 0.6850  data_time: 0.0222  memory: 4840  grad_norm: 9.9397  loss: 0.3635  decode.loss_ce.s0: 0.1063  decode.acc_seg.s0: 96.3306  decode.loss_ce.s1: 0.0855  decode.acc_seg.s1: 97.9846  decode.loss_ce.s2: 0.0855  decode.acc_seg.s2: 98.0841  decode.loss_ce.s3: 0.0862  decode.acc_seg.s3: 98.0561
2024/04/14 23:22:41 - mmengine - INFO - Iter(train) [ 6200/20000]  lr: 1.0000e-04  eta: 2:40:26  time: 0.6833  data_time: 0.0245  memory: 4839  grad_norm: 4.6965  loss: 0.2532  decode.loss_ce.s0: 0.0719  decode.acc_seg.s0: 97.2890  decode.loss_ce.s1: 0.0603  decode.acc_seg.s1: 97.3250  decode.loss_ce.s2: 0.0598  decode.acc_seg.s2: 97.3524  decode.loss_ce.s3: 0.0611  decode.acc_seg.s3: 97.3028
2024/04/14 23:23:49 - mmengine - INFO - Iter(train) [ 6300/20000]  lr: 1.0000e-04  eta: 2:39:13  time: 0.6819  data_time: 0.0220  memory: 4840  grad_norm: 4.0390  loss: 0.3203  decode.loss_ce.s0: 0.0899  decode.acc_seg.s0: 97.5838  decode.loss_ce.s1: 0.0764  decode.acc_seg.s1: 97.6794  decode.loss_ce.s2: 0.0772  decode.acc_seg.s2: 97.6821  decode.loss_ce.s3: 0.0768  decode.acc_seg.s3: 97.6746
2024/04/14 23:24:58 - mmengine - INFO - Iter(train) [ 6400/20000]  lr: 1.0000e-04  eta: 2:38:01  time: 0.7089  data_time: 0.0203  memory: 4840  grad_norm: 10.1371  loss: 0.2814  decode.loss_ce.s0: 0.0800  decode.acc_seg.s0: 97.0884  decode.loss_ce.s1: 0.0670  decode.acc_seg.s1: 97.3381  decode.loss_ce.s2: 0.0670  decode.acc_seg.s2: 97.3350  decode.loss_ce.s3: 0.0674  decode.acc_seg.s3: 97.3362
2024/04/14 23:26:07 - mmengine - INFO - Iter(train) [ 6500/20000]  lr: 1.0000e-04  eta: 2:36:48  time: 0.6797  data_time: 0.0182  memory: 4840  grad_norm: 12.4022  loss: 0.5419  decode.loss_ce.s0: 0.1468  decode.acc_seg.s0: 98.3095  decode.loss_ce.s1: 0.1295  decode.acc_seg.s1: 98.4994  decode.loss_ce.s2: 0.1315  decode.acc_seg.s2: 98.4957  decode.loss_ce.s3: 0.1341  decode.acc_seg.s3: 98.5071
2024/04/14 23:26:07 - mmengine - INFO - per class results:
2024/04/14 23:26:07 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 84.62 | 88.94 | 91.67 | 91.67  |   94.57   | 88.94  |
| monolayer  |  50.4 | 53.67 | 67.02 | 67.02  |   89.21   | 53.67  |
|  bilayer   | 38.93 | 42.61 | 56.05 | 56.05  |   81.87   | 42.61  |
| multilayer |  33.5 | 98.56 | 50.19 | 50.19  |   33.66   | 98.56  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/14 23:26:07 - mmengine - INFO - Iter(val) [8/8]    aAcc: 77.9600  mIoU: 51.8600  mAcc: 70.9500  mDice: 66.2300  mFscore: 66.2300  mPrecision: 74.8300  mRecall: 70.9500  data_time: 0.0136  time: 0.0564
2024/04/14 23:27:16 - mmengine - INFO - Iter(train) [ 6600/20000]  lr: 1.0000e-04  eta: 2:35:38  time: 0.6727  data_time: 0.0146  memory: 4840  grad_norm: 6.3724  loss: 0.2807  decode.loss_ce.s0: 0.0837  decode.acc_seg.s0: 98.1503  decode.loss_ce.s1: 0.0659  decode.acc_seg.s1: 98.3741  decode.loss_ce.s2: 0.0654  decode.acc_seg.s2: 98.3482  decode.loss_ce.s3: 0.0657  decode.acc_seg.s3: 98.3604
2024/04/14 23:28:25 - mmengine - INFO - Iter(train) [ 6700/20000]  lr: 1.0000e-04  eta: 2:34:26  time: 0.7271  data_time: 0.0699  memory: 4840  grad_norm: 6.0819  loss: 0.2915  decode.loss_ce.s0: 0.0894  decode.acc_seg.s0: 96.2399  decode.loss_ce.s1: 0.0673  decode.acc_seg.s1: 97.6502  decode.loss_ce.s2: 0.0675  decode.acc_seg.s2: 97.5887  decode.loss_ce.s3: 0.0674  decode.acc_seg.s3: 97.5857
2024/04/14 23:29:34 - mmengine - INFO - Iter(train) [ 6800/20000]  lr: 1.0000e-04  eta: 2:33:16  time: 0.6803  data_time: 0.0201  memory: 4839  grad_norm: 61.6967  loss: 0.5471  decode.loss_ce.s0: 0.1613  decode.acc_seg.s0: 94.8974  decode.loss_ce.s1: 0.1325  decode.acc_seg.s1: 95.6765  decode.loss_ce.s2: 0.1262  decode.acc_seg.s2: 95.7115  decode.loss_ce.s3: 0.1271  decode.acc_seg.s3: 95.5292
2024/04/14 23:30:42 - mmengine - INFO - Iter(train) [ 6900/20000]  lr: 1.0000e-04  eta: 2:32:03  time: 0.6750  data_time: 0.0191  memory: 4840  grad_norm: 80.2165  loss: 0.2957  decode.loss_ce.s0: 0.0806  decode.acc_seg.s0: 96.7474  decode.loss_ce.s1: 0.0711  decode.acc_seg.s1: 96.9543  decode.loss_ce.s2: 0.0718  decode.acc_seg.s2: 96.9625  decode.loss_ce.s3: 0.0723  decode.acc_seg.s3: 96.9773
2024/04/14 23:31:52 - mmengine - INFO - Exp name: lraspp_ket_fastvit_ful_20240414_221012
2024/04/14 23:31:52 - mmengine - INFO - Iter(train) [ 7000/20000]  lr: 1.0000e-04  eta: 2:30:53  time: 0.6800  data_time: 0.0226  memory: 4840  grad_norm: 9.8364  loss: 0.4039  decode.loss_ce.s0: 0.1125  decode.acc_seg.s0: 96.7056  decode.loss_ce.s1: 0.0948  decode.acc_seg.s1: 97.7879  decode.loss_ce.s2: 0.0999  decode.acc_seg.s2: 97.7941  decode.loss_ce.s3: 0.0967  decode.acc_seg.s3: 97.7439
2024/04/14 23:31:53 - mmengine - INFO - per class results:
2024/04/14 23:31:53 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 92.14 | 96.83 | 95.91 | 95.91  |   95.01   | 96.83  |
| monolayer  | 70.94 | 79.32 |  83.0 |  83.0  |   87.04   | 79.32  |
|  bilayer   | 47.09 | 48.99 | 64.03 | 64.03  |   92.41   | 48.99  |
| multilayer |  67.4 | 97.49 | 80.53 | 80.53  |   68.59   | 97.49  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/14 23:31:53 - mmengine - INFO - Iter(val) [8/8]    aAcc: 89.7500  mIoU: 69.3900  mAcc: 80.6600  mDice: 80.8700  mFscore: 80.8700  mPrecision: 85.7600  mRecall: 80.6600  data_time: 0.0196  time: 0.0619
2024/04/14 23:33:01 - mmengine - INFO - Iter(train) [ 7100/20000]  lr: 1.0000e-04  eta: 2:29:41  time: 0.6767  data_time: 0.0212  memory: 4840  grad_norm: 11.6065  loss: 0.3474  decode.loss_ce.s0: 0.1021  decode.acc_seg.s0: 97.7928  decode.loss_ce.s1: 0.0819  decode.acc_seg.s1: 97.8085  decode.loss_ce.s2: 0.0810  decode.acc_seg.s2: 97.7672  decode.loss_ce.s3: 0.0824  decode.acc_seg.s3: 97.8322
2024/04/14 23:34:09 - mmengine - INFO - Iter(train) [ 7200/20000]  lr: 1.0000e-04  eta: 2:28:29  time: 0.6783  data_time: 0.0210  memory: 4840  grad_norm: 10.7415  loss: 0.2005  decode.loss_ce.s0: 0.0566  decode.acc_seg.s0: 97.1522  decode.loss_ce.s1: 0.0483  decode.acc_seg.s1: 97.3952  decode.loss_ce.s2: 0.0478  decode.acc_seg.s2: 97.4823  decode.loss_ce.s3: 0.0479  decode.acc_seg.s3: 97.4679
2024/04/14 23:35:17 - mmengine - INFO - Iter(train) [ 7300/20000]  lr: 1.0000e-04  eta: 2:27:17  time: 0.6789  data_time: 0.0218  memory: 4840  grad_norm: 14.2986  loss: 0.4432  decode.loss_ce.s0: 0.1208  decode.acc_seg.s0: 96.4042  decode.loss_ce.s1: 0.1089  decode.acc_seg.s1: 96.5044  decode.loss_ce.s2: 0.1063  decode.acc_seg.s2: 96.5223  decode.loss_ce.s3: 0.1073  decode.acc_seg.s3: 96.6716
2024/04/14 23:36:25 - mmengine - INFO - Iter(train) [ 7400/20000]  lr: 1.0000e-04  eta: 2:26:05  time: 0.6804  data_time: 0.0189  memory: 4840  grad_norm: 3.9682  loss: 0.2131  decode.loss_ce.s0: 0.0560  decode.acc_seg.s0: 97.3961  decode.loss_ce.s1: 0.0526  decode.acc_seg.s1: 97.6575  decode.loss_ce.s2: 0.0522  decode.acc_seg.s2: 97.7210  decode.loss_ce.s3: 0.0523  decode.acc_seg.s3: 97.7134
2024/04/14 23:37:34 - mmengine - INFO - Iter(train) [ 7500/20000]  lr: 1.0000e-04  eta: 2:24:53  time: 0.6834  data_time: 0.0232  memory: 4840  grad_norm: 5.3215  loss: 0.3658  decode.loss_ce.s0: 0.1047  decode.acc_seg.s0: 96.4275  decode.loss_ce.s1: 0.0853  decode.acc_seg.s1: 98.1276  decode.loss_ce.s2: 0.0879  decode.acc_seg.s2: 98.2336  decode.loss_ce.s3: 0.0879  decode.acc_seg.s3: 98.2155
2024/04/14 23:37:34 - mmengine - INFO - Saving checkpoint at 7500 iterations
2024/04/14 23:37:35 - mmengine - INFO - per class results:
2024/04/14 23:37:35 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 90.48 | 93.26 |  95.0 |  95.0  |   96.81   | 93.26  |
| monolayer  | 52.48 | 55.77 | 68.84 | 68.84  |   89.89   | 55.77  |
|  bilayer   | 42.57 | 44.23 | 59.71 | 59.71  |   91.89   | 44.23  |
| multilayer | 35.51 | 97.87 |  52.4 |  52.4  |   35.78   | 97.87  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/14 23:37:35 - mmengine - INFO - Iter(val) [8/8]    aAcc: 81.1200  mIoU: 55.2600  mAcc: 72.7800  mDice: 68.9900  mFscore: 68.9900  mPrecision: 78.5900  mRecall: 72.7800  data_time: 0.0101  time: 0.0530
2024/04/14 23:38:43 - mmengine - INFO - Iter(train) [ 7600/20000]  lr: 1.0000e-04  eta: 2:23:41  time: 0.6805  data_time: 0.0221  memory: 4840  grad_norm: 5.0495  loss: 0.3100  decode.loss_ce.s0: 0.0924  decode.acc_seg.s0: 97.5063  decode.loss_ce.s1: 0.0717  decode.acc_seg.s1: 97.8078  decode.loss_ce.s2: 0.0723  decode.acc_seg.s2: 97.8172  decode.loss_ce.s3: 0.0735  decode.acc_seg.s3: 97.8495
2024/04/14 23:39:51 - mmengine - INFO - Iter(train) [ 7700/20000]  lr: 1.0000e-04  eta: 2:22:30  time: 0.6789  data_time: 0.0195  memory: 4840  grad_norm: 12.7537  loss: 0.3269  decode.loss_ce.s0: 0.0884  decode.acc_seg.s0: 98.1328  decode.loss_ce.s1: 0.0804  decode.acc_seg.s1: 98.0938  decode.loss_ce.s2: 0.0790  decode.acc_seg.s2: 98.0203  decode.loss_ce.s3: 0.0791  decode.acc_seg.s3: 98.0412
2024/04/14 23:40:59 - mmengine - INFO - Iter(train) [ 7800/20000]  lr: 1.0000e-04  eta: 2:21:18  time: 0.6790  data_time: 0.0202  memory: 4840  grad_norm: 13.9405  loss: 0.2814  decode.loss_ce.s0: 0.0808  decode.acc_seg.s0: 96.7934  decode.loss_ce.s1: 0.0665  decode.acc_seg.s1: 98.4274  decode.loss_ce.s2: 0.0672  decode.acc_seg.s2: 98.4453  decode.loss_ce.s3: 0.0670  decode.acc_seg.s3: 98.4788
2024/04/14 23:42:08 - mmengine - INFO - Iter(train) [ 7900/20000]  lr: 1.0000e-04  eta: 2:20:07  time: 0.6795  data_time: 0.0218  memory: 4840  grad_norm: 4.0269  loss: 0.2686  decode.loss_ce.s0: 0.0756  decode.acc_seg.s0: 93.3518  decode.loss_ce.s1: 0.0647  decode.acc_seg.s1: 93.6321  decode.loss_ce.s2: 0.0639  decode.acc_seg.s2: 93.4503  decode.loss_ce.s3: 0.0643  decode.acc_seg.s3: 93.4080
2024/04/14 23:43:17 - mmengine - INFO - Exp name: lraspp_ket_fastvit_ful_20240414_221012
2024/04/14 23:43:17 - mmengine - INFO - Iter(train) [ 8000/20000]  lr: 1.0000e-04  eta: 2:18:57  time: 0.6769  data_time: 0.0204  memory: 4840  grad_norm: 23.4068  loss: 0.3972  decode.loss_ce.s0: 0.1038  decode.acc_seg.s0: 86.2717  decode.loss_ce.s1: 0.1061  decode.acc_seg.s1: 85.4573  decode.loss_ce.s2: 0.0941  decode.acc_seg.s2: 85.4533  decode.loss_ce.s3: 0.0931  decode.acc_seg.s3: 85.4361
2024/04/14 23:43:17 - mmengine - INFO - per class results:
2024/04/14 23:43:17 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 92.93 | 97.11 | 96.34 | 96.34  |   95.58   | 97.11  |
| monolayer  |  77.9 | 86.03 | 87.58 | 87.58  |   89.18   | 86.03  |
|  bilayer   | 66.89 | 77.14 | 80.16 | 80.16  |   83.43   | 77.14  |
| multilayer | 82.53 | 92.42 | 90.43 | 90.43  |   88.52   | 92.42  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/14 23:43:17 - mmengine - INFO - Iter(val) [8/8]    aAcc: 92.7200  mIoU: 80.0600  mAcc: 88.1700  mDice: 88.6300  mFscore: 88.6300  mPrecision: 89.1800  mRecall: 88.1700  data_time: 0.0148  time: 0.0575
2024/04/14 23:43:17 - mmengine - INFO - The previous best checkpoint /home/zhouruiliang/code/mmsegmentation-main/work_dirs/lraspp_ket_fastvit_ful/best_mIoU_iter_6000.pth is removed
2024/04/14 23:43:18 - mmengine - INFO - The best checkpoint with 80.0600 mIoU at 8000 iter is saved to best_mIoU_iter_8000.pth.
2024/04/14 23:44:26 - mmengine - INFO - Iter(train) [ 8100/20000]  lr: 1.0000e-04  eta: 2:17:47  time: 0.6755  data_time: 0.0220  memory: 4839  grad_norm: 6.9753  loss: 0.3021  decode.loss_ce.s0: 0.1031  decode.acc_seg.s0: 96.7988  decode.loss_ce.s1: 0.0658  decode.acc_seg.s1: 97.9724  decode.loss_ce.s2: 0.0671  decode.acc_seg.s2: 98.0131  decode.loss_ce.s3: 0.0662  decode.acc_seg.s3: 98.0046
2024/04/14 23:45:34 - mmengine - INFO - Iter(train) [ 8200/20000]  lr: 1.0000e-04  eta: 2:16:35  time: 0.6755  data_time: 0.0210  memory: 4840  grad_norm: 30.8366  loss: 0.3427  decode.loss_ce.s0: 0.1096  decode.acc_seg.s0: 98.0067  decode.loss_ce.s1: 0.0854  decode.acc_seg.s1: 97.8356  decode.loss_ce.s2: 0.0745  decode.acc_seg.s2: 97.9075  decode.loss_ce.s3: 0.0732  decode.acc_seg.s3: 97.8925
2024/04/14 23:46:43 - mmengine - INFO - Iter(train) [ 8300/20000]  lr: 1.0000e-04  eta: 2:15:25  time: 0.6761  data_time: 0.0190  memory: 4840  grad_norm: 34.8112  loss: 0.3074  decode.loss_ce.s0: 0.0878  decode.acc_seg.s0: 98.2818  decode.loss_ce.s1: 0.0688  decode.acc_seg.s1: 98.2833  decode.loss_ce.s2: 0.0732  decode.acc_seg.s2: 98.3013  decode.loss_ce.s3: 0.0776  decode.acc_seg.s3: 98.3045
2024/04/14 23:47:52 - mmengine - INFO - Iter(train) [ 8400/20000]  lr: 1.0000e-04  eta: 2:14:15  time: 0.6736  data_time: 0.0163  memory: 4840  grad_norm: 6.9006  loss: 0.2662  decode.loss_ce.s0: 0.0861  decode.acc_seg.s0: 96.6612  decode.loss_ce.s1: 0.0603  decode.acc_seg.s1: 97.2598  decode.loss_ce.s2: 0.0597  decode.acc_seg.s2: 97.2510  decode.loss_ce.s3: 0.0600  decode.acc_seg.s3: 97.2581
2024/04/14 23:49:02 - mmengine - INFO - Iter(train) [ 8500/20000]  lr: 1.0000e-04  eta: 2:13:06  time: 0.6786  data_time: 0.0232  memory: 4840  grad_norm: 8.1859  loss: 0.2731  decode.loss_ce.s0: 0.0756  decode.acc_seg.s0: 97.9193  decode.loss_ce.s1: 0.0664  decode.acc_seg.s1: 98.1584  decode.loss_ce.s2: 0.0668  decode.acc_seg.s2: 98.2018  decode.loss_ce.s3: 0.0643  decode.acc_seg.s3: 98.2180
2024/04/14 23:49:03 - mmengine - INFO - per class results:
2024/04/14 23:49:03 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 89.09 | 97.52 | 94.23 | 94.23  |   91.15   | 97.52  |
| monolayer  | 52.16 |  55.9 | 68.56 | 68.56  |   88.64   |  55.9  |
|  bilayer   | 39.87 | 41.94 | 57.01 | 57.01  |   88.95   | 41.94  |
| multilayer | 47.82 | 96.29 |  64.7 |  64.7  |   48.72   | 96.29  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/14 23:49:03 - mmengine - INFO - Iter(val) [8/8]    aAcc: 83.4300  mIoU: 57.2300  mAcc: 72.9100  mDice: 71.1200  mFscore: 71.1200  mPrecision: 79.3600  mRecall: 72.9100  data_time: 0.0105  time: 0.0532
2024/04/14 23:50:12 - mmengine - INFO - Iter(train) [ 8600/20000]  lr: 1.0000e-04  eta: 2:11:56  time: 0.7495  data_time: 0.0158  memory: 4840  grad_norm: 9.8273  loss: 0.2466  decode.loss_ce.s0: 0.0688  decode.acc_seg.s0: 98.4279  decode.loss_ce.s1: 0.0585  decode.acc_seg.s1: 98.5431  decode.loss_ce.s2: 0.0603  decode.acc_seg.s2: 98.5273  decode.loss_ce.s3: 0.0590  decode.acc_seg.s3: 98.4971
2024/04/14 23:51:20 - mmengine - INFO - Iter(train) [ 8700/20000]  lr: 1.0000e-04  eta: 2:10:45  time: 0.6727  data_time: 0.0214  memory: 4840  grad_norm: 6.2640  loss: 0.2615  decode.loss_ce.s0: 0.0753  decode.acc_seg.s0: 98.4132  decode.loss_ce.s1: 0.0629  decode.acc_seg.s1: 98.5747  decode.loss_ce.s2: 0.0612  decode.acc_seg.s2: 98.4479  decode.loss_ce.s3: 0.0621  decode.acc_seg.s3: 98.1926
2024/04/14 23:52:29 - mmengine - INFO - Iter(train) [ 8800/20000]  lr: 1.0000e-04  eta: 2:09:36  time: 0.7187  data_time: 0.0645  memory: 4840  grad_norm: 36.9249  loss: 0.5011  decode.loss_ce.s0: 0.1363  decode.acc_seg.s0: 87.0687  decode.loss_ce.s1: 0.1225  decode.acc_seg.s1: 87.2348  decode.loss_ce.s2: 0.1198  decode.acc_seg.s2: 87.2301  decode.loss_ce.s3: 0.1226  decode.acc_seg.s3: 87.2097
2024/04/14 23:53:39 - mmengine - INFO - Iter(train) [ 8900/20000]  lr: 1.0000e-04  eta: 2:08:26  time: 0.6699  data_time: 0.0163  memory: 4840  grad_norm: 9.2588  loss: 0.2577  decode.loss_ce.s0: 0.0755  decode.acc_seg.s0: 98.6643  decode.loss_ce.s1: 0.0612  decode.acc_seg.s1: 98.6876  decode.loss_ce.s2: 0.0601  decode.acc_seg.s2: 98.7012  decode.loss_ce.s3: 0.0609  decode.acc_seg.s3: 98.6677
2024/04/14 23:54:48 - mmengine - INFO - Exp name: lraspp_ket_fastvit_ful_20240414_221012
2024/04/14 23:54:48 - mmengine - INFO - Iter(train) [ 9000/20000]  lr: 1.0000e-04  eta: 2:07:16  time: 0.7257  data_time: 0.0219  memory: 4840  grad_norm: 13.0221  loss: 0.4099  decode.loss_ce.s0: 0.1199  decode.acc_seg.s0: 98.4925  decode.loss_ce.s1: 0.0998  decode.acc_seg.s1: 98.4536  decode.loss_ce.s2: 0.0938  decode.acc_seg.s2: 98.4375  decode.loss_ce.s3: 0.0964  decode.acc_seg.s3: 98.4536
2024/04/14 23:54:48 - mmengine - INFO - per class results:
2024/04/14 23:54:48 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 95.34 | 97.66 | 97.61 | 97.61  |   97.57   | 97.66  |
| monolayer  |  82.8 | 91.19 | 90.59 | 90.59  |    90.0   | 91.19  |
|  bilayer   | 65.59 | 74.74 | 79.22 | 79.22  |   84.28   | 74.74  |
| multilayer | 85.76 | 93.29 | 92.33 | 92.33  |    91.4   | 93.29  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/14 23:54:48 - mmengine - INFO - Iter(val) [8/8]    aAcc: 94.3700  mIoU: 82.3700  mAcc: 89.2200  mDice: 89.9400  mFscore: 89.9400  mPrecision: 90.8100  mRecall: 89.2200  data_time: 0.0150  time: 0.0575
2024/04/14 23:54:48 - mmengine - INFO - The previous best checkpoint /home/zhouruiliang/code/mmsegmentation-main/work_dirs/lraspp_ket_fastvit_ful/best_mIoU_iter_8000.pth is removed
2024/04/14 23:54:49 - mmengine - INFO - The best checkpoint with 82.3700 mIoU at 9000 iter is saved to best_mIoU_iter_9000.pth.
2024/04/14 23:55:57 - mmengine - INFO - Iter(train) [ 9100/20000]  lr: 1.0000e-04  eta: 2:06:06  time: 0.6719  data_time: 0.0212  memory: 4840  grad_norm: 4.4367  loss: 0.2290  decode.loss_ce.s0: 0.0676  decode.acc_seg.s0: 98.2251  decode.loss_ce.s1: 0.0548  decode.acc_seg.s1: 98.0730  decode.loss_ce.s2: 0.0540  decode.acc_seg.s2: 98.1371  decode.loss_ce.s3: 0.0526  decode.acc_seg.s3: 98.0502
2024/04/14 23:57:05 - mmengine - INFO - Iter(train) [ 9200/20000]  lr: 1.0000e-04  eta: 2:04:55  time: 0.6748  data_time: 0.0208  memory: 4839  grad_norm: 10.4844  loss: 0.3139  decode.loss_ce.s0: 0.1013  decode.acc_seg.s0: 91.2841  decode.loss_ce.s1: 0.0727  decode.acc_seg.s1: 92.4327  decode.loss_ce.s2: 0.0704  decode.acc_seg.s2: 92.9191  decode.loss_ce.s3: 0.0696  decode.acc_seg.s3: 93.1209
2024/04/14 23:58:14 - mmengine - INFO - Iter(train) [ 9300/20000]  lr: 1.0000e-04  eta: 2:03:45  time: 0.6696  data_time: 0.0186  memory: 4840  grad_norm: 4.4442  loss: 0.3169  decode.loss_ce.s0: 0.0832  decode.acc_seg.s0: 98.3913  decode.loss_ce.s1: 0.0782  decode.acc_seg.s1: 98.4318  decode.loss_ce.s2: 0.0780  decode.acc_seg.s2: 98.4121  decode.loss_ce.s3: 0.0775  decode.acc_seg.s3: 98.4210
2024/04/14 23:59:23 - mmengine - INFO - Iter(train) [ 9400/20000]  lr: 1.0000e-04  eta: 2:02:36  time: 0.6728  data_time: 0.0215  memory: 4840  grad_norm: 6.4807  loss: 0.1831  decode.loss_ce.s0: 0.0504  decode.acc_seg.s0: 98.2253  decode.loss_ce.s1: 0.0444  decode.acc_seg.s1: 98.2848  decode.loss_ce.s2: 0.0441  decode.acc_seg.s2: 98.2639  decode.loss_ce.s3: 0.0442  decode.acc_seg.s3: 98.3156
2024/04/15 00:00:31 - mmengine - INFO - Iter(train) [ 9500/20000]  lr: 1.0000e-04  eta: 2:01:25  time: 0.6747  data_time: 0.0265  memory: 4840  grad_norm: 6.0049  loss: 0.1976  decode.loss_ce.s0: 0.0560  decode.acc_seg.s0: 94.9254  decode.loss_ce.s1: 0.0463  decode.acc_seg.s1: 97.7701  decode.loss_ce.s2: 0.0474  decode.acc_seg.s2: 97.7895  decode.loss_ce.s3: 0.0478  decode.acc_seg.s3: 97.5317
2024/04/15 00:00:32 - mmengine - INFO - per class results:
2024/04/15 00:00:32 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 92.77 | 95.15 | 96.25 | 96.25  |   97.37   | 95.15  |
| monolayer  | 79.45 | 90.58 | 88.55 | 88.55  |    86.6   | 90.58  |
|  bilayer   | 72.45 | 81.78 | 84.03 | 84.03  |    86.4   | 81.78  |
| multilayer | 84.28 | 93.58 | 91.47 | 91.47  |   89.45   | 93.58  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/15 00:00:32 - mmengine - INFO - Iter(val) [8/8]    aAcc: 93.1100  mIoU: 82.2400  mAcc: 90.2700  mDice: 90.0700  mFscore: 90.0700  mPrecision: 89.9600  mRecall: 90.2700  data_time: 0.0288  time: 0.0711
2024/04/15 00:01:40 - mmengine - INFO - Iter(train) [ 9600/20000]  lr: 1.0000e-04  eta: 2:00:14  time: 0.6967  data_time: 0.0458  memory: 4840  grad_norm: 11.7608  loss: 0.3435  decode.loss_ce.s0: 0.0996  decode.acc_seg.s0: 98.2891  decode.loss_ce.s1: 0.0792  decode.acc_seg.s1: 98.5608  decode.loss_ce.s2: 0.0819  decode.acc_seg.s2: 98.5448  decode.loss_ce.s3: 0.0828  decode.acc_seg.s3: 98.4903
2024/04/15 00:02:48 - mmengine - INFO - Iter(train) [ 9700/20000]  lr: 1.0000e-04  eta: 1:59:04  time: 0.6727  data_time: 0.0155  memory: 4839  grad_norm: 5.5085  loss: 0.2825  decode.loss_ce.s0: 0.0757  decode.acc_seg.s0: 98.2766  decode.loss_ce.s1: 0.0703  decode.acc_seg.s1: 98.3328  decode.loss_ce.s2: 0.0675  decode.acc_seg.s2: 98.3612  decode.loss_ce.s3: 0.0691  decode.acc_seg.s3: 98.3506
2024/04/15 00:03:57 - mmengine - INFO - Iter(train) [ 9800/20000]  lr: 1.0000e-04  eta: 1:57:53  time: 0.6819  data_time: 0.0316  memory: 4840  grad_norm: 5.1570  loss: 0.2615  decode.loss_ce.s0: 0.0703  decode.acc_seg.s0: 89.3787  decode.loss_ce.s1: 0.0624  decode.acc_seg.s1: 89.2858  decode.loss_ce.s2: 0.0647  decode.acc_seg.s2: 89.2566  decode.loss_ce.s3: 0.0641  decode.acc_seg.s3: 89.3526
2024/04/15 00:05:06 - mmengine - INFO - Iter(train) [ 9900/20000]  lr: 1.0000e-04  eta: 1:56:43  time: 0.6703  data_time: 0.0184  memory: 4839  grad_norm: 4.7496  loss: 0.3505  decode.loss_ce.s0: 0.0899  decode.acc_seg.s0: 94.4617  decode.loss_ce.s1: 0.0885  decode.acc_seg.s1: 94.3026  decode.loss_ce.s2: 0.0861  decode.acc_seg.s2: 95.1690  decode.loss_ce.s3: 0.0860  decode.acc_seg.s3: 95.1255
2024/04/15 00:06:15 - mmengine - INFO - Exp name: lraspp_ket_fastvit_ful_20240414_221012
2024/04/15 00:06:15 - mmengine - INFO - Iter(train) [10000/20000]  lr: 1.0000e-04  eta: 1:55:34  time: 0.7606  data_time: 0.0193  memory: 4840  grad_norm: 8.9832  loss: 0.2920  decode.loss_ce.s0: 0.0836  decode.acc_seg.s0: 93.2827  decode.loss_ce.s1: 0.0694  decode.acc_seg.s1: 92.6355  decode.loss_ce.s2: 0.0679  decode.acc_seg.s2: 93.6737  decode.loss_ce.s3: 0.0711  decode.acc_seg.s3: 89.1310
2024/04/15 00:06:15 - mmengine - INFO - Saving checkpoint at 10000 iterations
2024/04/15 00:06:16 - mmengine - INFO - per class results:
2024/04/15 00:06:16 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 94.54 | 97.06 | 97.19 | 97.19  |   97.32   | 97.06  |
| monolayer  |  81.2 | 89.58 | 89.63 | 89.63  |   89.67   | 89.58  |
|  bilayer   | 68.22 | 76.19 | 81.11 | 81.11  |   86.71   | 76.19  |
| multilayer | 80.46 | 93.34 | 89.17 | 89.17  |   85.36   | 93.34  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/15 00:06:16 - mmengine - INFO - Iter(val) [8/8]    aAcc: 93.6700  mIoU: 81.1100  mAcc: 89.0400  mDice: 89.2800  mFscore: 89.2800  mPrecision: 89.7700  mRecall: 89.0400  data_time: 0.0091  time: 0.0519
2024/04/15 00:07:23 - mmengine - INFO - Iter(train) [10100/20000]  lr: 1.0000e-04  eta: 1:54:22  time: 0.6706  data_time: 0.0232  memory: 4840  grad_norm: 14.0635  loss: 0.2654  decode.loss_ce.s0: 0.0778  decode.acc_seg.s0: 87.0134  decode.loss_ce.s1: 0.0613  decode.acc_seg.s1: 89.9475  decode.loss_ce.s2: 0.0638  decode.acc_seg.s2: 88.9948  decode.loss_ce.s3: 0.0625  decode.acc_seg.s3: 90.1538
2024/04/15 00:08:32 - mmengine - INFO - Iter(train) [10200/20000]  lr: 1.0000e-04  eta: 1:53:13  time: 0.7014  data_time: 0.0192  memory: 4840  grad_norm: 4.8333  loss: 0.2265  decode.loss_ce.s0: 0.0602  decode.acc_seg.s0: 97.6718  decode.loss_ce.s1: 0.0549  decode.acc_seg.s1: 97.8681  decode.loss_ce.s2: 0.0568  decode.acc_seg.s2: 97.8777  decode.loss_ce.s3: 0.0547  decode.acc_seg.s3: 97.9149
2024/04/15 00:09:41 - mmengine - INFO - Iter(train) [10300/20000]  lr: 1.0000e-04  eta: 1:52:03  time: 0.7182  data_time: 0.0194  memory: 4840  grad_norm: 23.3143  loss: 0.2189  decode.loss_ce.s0: 0.0627  decode.acc_seg.s0: 98.5711  decode.loss_ce.s1: 0.0534  decode.acc_seg.s1: 98.5807  decode.loss_ce.s2: 0.0516  decode.acc_seg.s2: 98.5803  decode.loss_ce.s3: 0.0512  decode.acc_seg.s3: 98.6006
2024/04/15 00:10:51 - mmengine - INFO - Iter(train) [10400/20000]  lr: 1.0000e-04  eta: 1:50:54  time: 0.6702  data_time: 0.0175  memory: 4840  grad_norm: 10.7353  loss: 0.2467  decode.loss_ce.s0: 0.0649  decode.acc_seg.s0: 94.7184  decode.loss_ce.s1: 0.0609  decode.acc_seg.s1: 94.7077  decode.loss_ce.s2: 0.0597  decode.acc_seg.s2: 94.7408  decode.loss_ce.s3: 0.0612  decode.acc_seg.s3: 94.8547
2024/04/15 00:12:00 - mmengine - INFO - Iter(train) [10500/20000]  lr: 1.0000e-04  eta: 1:49:45  time: 0.7690  data_time: 0.1176  memory: 4840  grad_norm: 8.0835  loss: 0.2272  decode.loss_ce.s0: 0.0617  decode.acc_seg.s0: 98.6242  decode.loss_ce.s1: 0.0553  decode.acc_seg.s1: 98.6360  decode.loss_ce.s2: 0.0544  decode.acc_seg.s2: 98.6447  decode.loss_ce.s3: 0.0558  decode.acc_seg.s3: 98.6386
2024/04/15 00:12:01 - mmengine - INFO - per class results:
2024/04/15 00:12:01 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 90.05 | 92.11 | 94.77 | 94.77  |   97.58   | 92.11  |
| monolayer  | 74.81 |  85.0 | 85.59 | 85.59  |   86.19   |  85.0  |
|  bilayer   | 45.75 | 47.76 | 62.78 | 62.78  |   91.57   | 47.76  |
| multilayer | 56.73 |  98.2 | 72.39 | 72.39  |   57.33   |  98.2  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/15 00:12:01 - mmengine - INFO - Iter(val) [8/8]    aAcc: 88.4600  mIoU: 66.8400  mAcc: 80.7700  mDice: 78.8800  mFscore: 78.8800  mPrecision: 83.1700  mRecall: 80.7700  data_time: 0.0225  time: 0.0657
2024/04/15 00:13:10 - mmengine - INFO - Iter(train) [10600/20000]  lr: 1.0000e-04  eta: 1:48:35  time: 0.6912  data_time: 0.0179  memory: 4840  grad_norm: 12.7508  loss: 0.4722  decode.loss_ce.s0: 0.1014  decode.acc_seg.s0: 97.9839  decode.loss_ce.s1: 0.1270  decode.acc_seg.s1: 97.8093  decode.loss_ce.s2: 0.1255  decode.acc_seg.s2: 97.7636  decode.loss_ce.s3: 0.1183  decode.acc_seg.s3: 97.7710
2024/04/15 00:14:18 - mmengine - INFO - Iter(train) [10700/20000]  lr: 1.0000e-04  eta: 1:47:25  time: 0.6683  data_time: 0.0182  memory: 4840  grad_norm: 13.2275  loss: 0.6261  decode.loss_ce.s0: 0.1469  decode.acc_seg.s0: 98.0109  decode.loss_ce.s1: 0.1606  decode.acc_seg.s1: 98.3998  decode.loss_ce.s2: 0.1609  decode.acc_seg.s2: 98.3900  decode.loss_ce.s3: 0.1576  decode.acc_seg.s3: 98.4114
2024/04/15 00:15:26 - mmengine - INFO - Iter(train) [10800/20000]  lr: 1.0000e-04  eta: 1:46:14  time: 0.6675  data_time: 0.0186  memory: 4840  grad_norm: 4.9524  loss: 0.1639  decode.loss_ce.s0: 0.0463  decode.acc_seg.s0: 98.5937  decode.loss_ce.s1: 0.0395  decode.acc_seg.s1: 98.6859  decode.loss_ce.s2: 0.0392  decode.acc_seg.s2: 98.6810  decode.loss_ce.s3: 0.0390  decode.acc_seg.s3: 98.6850
2024/04/15 00:16:36 - mmengine - INFO - Iter(train) [10900/20000]  lr: 1.0000e-04  eta: 1:45:05  time: 0.6835  data_time: 0.0192  memory: 4840  grad_norm: 40.1033  loss: 0.2396  decode.loss_ce.s0: 0.0726  decode.acc_seg.s0: 95.5323  decode.loss_ce.s1: 0.0560  decode.acc_seg.s1: 96.7142  decode.loss_ce.s2: 0.0560  decode.acc_seg.s2: 96.3246  decode.loss_ce.s3: 0.0550  decode.acc_seg.s3: 96.2600
2024/04/15 00:17:44 - mmengine - INFO - Exp name: lraspp_ket_fastvit_ful_20240414_221012
2024/04/15 00:17:44 - mmengine - INFO - Iter(train) [11000/20000]  lr: 1.0000e-04  eta: 1:43:55  time: 0.6692  data_time: 0.0197  memory: 4840  grad_norm: 6.4880  loss: 0.1788  decode.loss_ce.s0: 0.0537  decode.acc_seg.s0: 98.1563  decode.loss_ce.s1: 0.0422  decode.acc_seg.s1: 98.7156  decode.loss_ce.s2: 0.0414  decode.acc_seg.s2: 98.7009  decode.loss_ce.s3: 0.0414  decode.acc_seg.s3: 98.6859
2024/04/15 00:17:44 - mmengine - INFO - per class results:
2024/04/15 00:17:44 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 90.02 | 92.36 | 94.75 | 94.75  |   97.26   | 92.36  |
| monolayer  | 66.75 | 71.17 | 80.06 | 80.06  |   91.48   | 71.17  |
|  bilayer   | 44.48 | 46.73 | 61.58 | 61.58  |   90.25   | 46.73  |
| multilayer | 42.65 | 99.28 |  59.8 |  59.8  |   42.78   | 99.28  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/15 00:17:44 - mmengine - INFO - Iter(val) [8/8]    aAcc: 84.9500  mIoU: 60.9800  mAcc: 77.3900  mDice: 74.0400  mFscore: 74.0400  mPrecision: 80.4400  mRecall: 77.3900  data_time: 0.0249  time: 0.0674
2024/04/15 00:18:54 - mmengine - INFO - Iter(train) [11100/20000]  lr: 1.0000e-05  eta: 1:42:46  time: 0.7266  data_time: 0.0801  memory: 4840  grad_norm: 2.9704  loss: 0.1430  decode.loss_ce.s0: 0.0385  decode.acc_seg.s0: 98.6784  decode.loss_ce.s1: 0.0350  decode.acc_seg.s1: 98.7068  decode.loss_ce.s2: 0.0349  decode.acc_seg.s2: 98.7162  decode.loss_ce.s3: 0.0346  decode.acc_seg.s3: 98.7149
2024/04/15 00:20:03 - mmengine - INFO - Iter(train) [11200/20000]  lr: 1.0000e-05  eta: 1:41:37  time: 0.6700  data_time: 0.0213  memory: 4840  grad_norm: 3.0138  loss: 0.1819  decode.loss_ce.s0: 0.0512  decode.acc_seg.s0: 93.4016  decode.loss_ce.s1: 0.0429  decode.acc_seg.s1: 95.9146  decode.loss_ce.s2: 0.0442  decode.acc_seg.s2: 91.4461  decode.loss_ce.s3: 0.0437  decode.acc_seg.s3: 95.2408
2024/04/15 00:21:10 - mmengine - INFO - Iter(train) [11300/20000]  lr: 1.0000e-05  eta: 1:40:26  time: 0.6710  data_time: 0.0198  memory: 4840  grad_norm: 4.1427  loss: 0.1216  decode.loss_ce.s0: 0.0327  decode.acc_seg.s0: 98.4226  decode.loss_ce.s1: 0.0298  decode.acc_seg.s1: 98.6634  decode.loss_ce.s2: 0.0296  decode.acc_seg.s2: 98.6822  decode.loss_ce.s3: 0.0295  decode.acc_seg.s3: 98.6849
2024/04/15 00:22:19 - mmengine - INFO - Iter(train) [11400/20000]  lr: 1.0000e-05  eta: 1:39:16  time: 0.6655  data_time: 0.0198  memory: 4840  grad_norm: 3.5848  loss: 0.1648  decode.loss_ce.s0: 0.0485  decode.acc_seg.s0: 98.2030  decode.loss_ce.s1: 0.0389  decode.acc_seg.s1: 98.4099  decode.loss_ce.s2: 0.0388  decode.acc_seg.s2: 98.3979  decode.loss_ce.s3: 0.0386  decode.acc_seg.s3: 98.4085
2024/04/15 00:23:27 - mmengine - INFO - Iter(train) [11500/20000]  lr: 1.0000e-05  eta: 1:38:06  time: 0.6654  data_time: 0.0197  memory: 4840  grad_norm: 28.8919  loss: 0.2132  decode.loss_ce.s0: 0.0588  decode.acc_seg.s0: 98.7133  decode.loss_ce.s1: 0.0519  decode.acc_seg.s1: 98.7345  decode.loss_ce.s2: 0.0513  decode.acc_seg.s2: 98.7255  decode.loss_ce.s3: 0.0512  decode.acc_seg.s3: 98.7503
2024/04/15 00:23:27 - mmengine - INFO - per class results:
2024/04/15 00:23:27 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 94.35 | 96.75 | 97.09 | 97.09  |   97.44   | 96.75  |
| monolayer  | 83.31 | 91.73 | 90.89 | 90.89  |   90.07   | 91.73  |
|  bilayer   | 75.32 | 85.01 | 85.92 | 85.92  |   86.86   | 85.01  |
| multilayer | 87.08 | 93.32 | 93.09 | 93.09  |   92.86   | 93.32  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/15 00:23:27 - mmengine - INFO - Iter(val) [8/8]    aAcc: 94.5100  mIoU: 85.0100  mAcc: 91.7000  mDice: 91.7500  mFscore: 91.7500  mPrecision: 91.8100  mRecall: 91.7000  data_time: 0.0183  time: 0.0608
2024/04/15 00:23:27 - mmengine - INFO - The previous best checkpoint /home/zhouruiliang/code/mmsegmentation-main/work_dirs/lraspp_ket_fastvit_ful/best_mIoU_iter_9000.pth is removed
2024/04/15 00:23:28 - mmengine - INFO - The best checkpoint with 85.0100 mIoU at 11500 iter is saved to best_mIoU_iter_11500.pth.
2024/04/15 00:24:36 - mmengine - INFO - Iter(train) [11600/20000]  lr: 1.0000e-05  eta: 1:36:56  time: 0.6694  data_time: 0.0225  memory: 4840  grad_norm: 5.7770  loss: 0.1071  decode.loss_ce.s0: 0.0287  decode.acc_seg.s0: 98.8587  decode.loss_ce.s1: 0.0261  decode.acc_seg.s1: 98.9557  decode.loss_ce.s2: 0.0261  decode.acc_seg.s2: 98.9607  decode.loss_ce.s3: 0.0261  decode.acc_seg.s3: 98.9658
2024/04/15 00:25:43 - mmengine - INFO - Iter(train) [11700/20000]  lr: 1.0000e-05  eta: 1:35:45  time: 0.6733  data_time: 0.0210  memory: 4840  grad_norm: 7.9359  loss: 0.3614  decode.loss_ce.s0: 0.1143  decode.acc_seg.s0: 87.4473  decode.loss_ce.s1: 0.0808  decode.acc_seg.s1: 91.6405  decode.loss_ce.s2: 0.0831  decode.acc_seg.s2: 90.9769  decode.loss_ce.s3: 0.0832  decode.acc_seg.s3: 91.8099
2024/04/15 00:26:50 - mmengine - INFO - Iter(train) [11800/20000]  lr: 1.0000e-05  eta: 1:34:35  time: 0.6678  data_time: 0.0214  memory: 4840  grad_norm: 37.2507  loss: 0.2350  decode.loss_ce.s0: 0.0627  decode.acc_seg.s0: 97.3871  decode.loss_ce.s1: 0.0492  decode.acc_seg.s1: 97.6092  decode.loss_ce.s2: 0.0571  decode.acc_seg.s2: 97.6080  decode.loss_ce.s3: 0.0660  decode.acc_seg.s3: 97.5951
2024/04/15 00:27:59 - mmengine - INFO - Iter(train) [11900/20000]  lr: 1.0000e-05  eta: 1:33:25  time: 0.6687  data_time: 0.0210  memory: 4840  grad_norm: 2.5746  loss: 0.1688  decode.loss_ce.s0: 0.0456  decode.acc_seg.s0: 99.1309  decode.loss_ce.s1: 0.0409  decode.acc_seg.s1: 99.2164  decode.loss_ce.s2: 0.0413  decode.acc_seg.s2: 99.2126  decode.loss_ce.s3: 0.0410  decode.acc_seg.s3: 99.2167
2024/04/15 00:29:07 - mmengine - INFO - Exp name: lraspp_ket_fastvit_ful_20240414_221012
2024/04/15 00:29:07 - mmengine - INFO - Iter(train) [12000/20000]  lr: 1.0000e-05  eta: 1:32:15  time: 0.6679  data_time: 0.0201  memory: 4840  grad_norm: 3.7881  loss: 0.1885  decode.loss_ce.s0: 0.0502  decode.acc_seg.s0: 98.4303  decode.loss_ce.s1: 0.0460  decode.acc_seg.s1: 98.4920  decode.loss_ce.s2: 0.0459  decode.acc_seg.s2: 98.4897  decode.loss_ce.s3: 0.0464  decode.acc_seg.s3: 98.4987
2024/04/15 00:29:07 - mmengine - INFO - per class results:
2024/04/15 00:29:07 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 94.81 | 97.09 | 97.33 | 97.33  |   97.57   | 97.09  |
| monolayer  | 84.28 | 91.93 | 91.47 | 91.47  |   91.01   | 91.93  |
|  bilayer   | 75.43 | 85.34 |  86.0 |  86.0  |   86.66   | 85.34  |
| multilayer | 86.55 | 93.32 | 92.79 | 92.79  |   92.27   | 93.32  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/15 00:29:07 - mmengine - INFO - Iter(val) [8/8]    aAcc: 94.7900  mIoU: 85.2700  mAcc: 91.9200  mDice: 91.9000  mFscore: 91.9000  mPrecision: 91.8800  mRecall: 91.9200  data_time: 0.0151  time: 0.0577
2024/04/15 00:29:07 - mmengine - INFO - The previous best checkpoint /home/zhouruiliang/code/mmsegmentation-main/work_dirs/lraspp_ket_fastvit_ful/best_mIoU_iter_11500.pth is removed
2024/04/15 00:29:08 - mmengine - INFO - The best checkpoint with 85.2700 mIoU at 12000 iter is saved to best_mIoU_iter_12000.pth.
2024/04/15 00:30:15 - mmengine - INFO - Iter(train) [12100/20000]  lr: 1.0000e-05  eta: 1:31:05  time: 0.6697  data_time: 0.0241  memory: 4840  grad_norm: 5.8239  loss: 0.1882  decode.loss_ce.s0: 0.0562  decode.acc_seg.s0: 98.3652  decode.loss_ce.s1: 0.0445  decode.acc_seg.s1: 98.4787  decode.loss_ce.s2: 0.0425  decode.acc_seg.s2: 98.4527  decode.loss_ce.s3: 0.0450  decode.acc_seg.s3: 98.4618
2024/04/15 00:31:24 - mmengine - INFO - Iter(train) [12200/20000]  lr: 1.0000e-05  eta: 1:29:56  time: 0.6690  data_time: 0.0201  memory: 4840  grad_norm: 3.6057  loss: 0.2269  decode.loss_ce.s0: 0.0645  decode.acc_seg.s0: 93.5701  decode.loss_ce.s1: 0.0541  decode.acc_seg.s1: 94.1937  decode.loss_ce.s2: 0.0542  decode.acc_seg.s2: 93.6654  decode.loss_ce.s3: 0.0541  decode.acc_seg.s3: 94.0117
2024/04/15 00:32:33 - mmengine - INFO - Iter(train) [12300/20000]  lr: 1.0000e-05  eta: 1:28:46  time: 0.6704  data_time: 0.0249  memory: 4840  grad_norm: 4.3012  loss: 0.2247  decode.loss_ce.s0: 0.0743  decode.acc_seg.s0: 98.7247  decode.loss_ce.s1: 0.0519  decode.acc_seg.s1: 98.7719  decode.loss_ce.s2: 0.0499  decode.acc_seg.s2: 98.7605  decode.loss_ce.s3: 0.0487  decode.acc_seg.s3: 98.7502
2024/04/15 00:33:42 - mmengine - INFO - Iter(train) [12400/20000]  lr: 1.0000e-05  eta: 1:27:37  time: 0.6670  data_time: 0.0193  memory: 4840  grad_norm: 4.0133  loss: 0.1238  decode.loss_ce.s0: 0.0348  decode.acc_seg.s0: 99.0632  decode.loss_ce.s1: 0.0304  decode.acc_seg.s1: 99.1344  decode.loss_ce.s2: 0.0293  decode.acc_seg.s2: 99.1369  decode.loss_ce.s3: 0.0293  decode.acc_seg.s3: 99.1365
2024/04/15 00:34:49 - mmengine - INFO - Iter(train) [12500/20000]  lr: 1.0000e-05  eta: 1:26:27  time: 0.6667  data_time: 0.0185  memory: 4840  grad_norm: 5.5406  loss: 0.1521  decode.loss_ce.s0: 0.0465  decode.acc_seg.s0: 97.9155  decode.loss_ce.s1: 0.0356  decode.acc_seg.s1: 98.0439  decode.loss_ce.s2: 0.0349  decode.acc_seg.s2: 98.0832  decode.loss_ce.s3: 0.0352  decode.acc_seg.s3: 98.0736
2024/04/15 00:34:49 - mmengine - INFO - Saving checkpoint at 12500 iterations
2024/04/15 00:34:51 - mmengine - INFO - per class results:
2024/04/15 00:34:51 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 94.69 | 96.95 | 97.27 | 97.27  |   97.61   | 96.95  |
| monolayer  | 84.17 | 91.83 |  91.4 |  91.4  |   90.98   | 91.83  |
|  bilayer   | 74.74 |  85.7 | 85.54 | 85.54  |   85.39   |  85.7  |
| multilayer | 86.58 | 93.53 | 92.81 | 92.81  |    92.1   | 93.53  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/15 00:34:51 - mmengine - INFO - Iter(val) [8/8]    aAcc: 94.7100  mIoU: 85.0500  mAcc: 92.0000  mDice: 91.7600  mFscore: 91.7600  mPrecision: 91.5200  mRecall: 92.0000  data_time: 0.0128  time: 0.0559
2024/04/15 00:35:58 - mmengine - INFO - Iter(train) [12600/20000]  lr: 1.0000e-05  eta: 1:25:17  time: 0.7162  data_time: 0.0666  memory: 4840  grad_norm: 4.8849  loss: 0.1628  decode.loss_ce.s0: 0.0453  decode.acc_seg.s0: 97.6543  decode.loss_ce.s1: 0.0395  decode.acc_seg.s1: 98.0227  decode.loss_ce.s2: 0.0389  decode.acc_seg.s2: 97.9006  decode.loss_ce.s3: 0.0392  decode.acc_seg.s3: 97.9511
2024/04/15 00:37:05 - mmengine - INFO - Iter(train) [12700/20000]  lr: 1.0000e-05  eta: 1:24:06  time: 0.6689  data_time: 0.0204  memory: 4840  grad_norm: 4.8107  loss: 0.3249  decode.loss_ce.s0: 0.0894  decode.acc_seg.s0: 98.4092  decode.loss_ce.s1: 0.0764  decode.acc_seg.s1: 98.5300  decode.loss_ce.s2: 0.0765  decode.acc_seg.s2: 98.5561  decode.loss_ce.s3: 0.0827  decode.acc_seg.s3: 98.5383
2024/04/15 00:38:13 - mmengine - INFO - Iter(train) [12800/20000]  lr: 1.0000e-05  eta: 1:22:56  time: 0.6700  data_time: 0.0201  memory: 4839  grad_norm: 2.0061  loss: 0.1490  decode.loss_ce.s0: 0.0415  decode.acc_seg.s0: 98.7442  decode.loss_ce.s1: 0.0360  decode.acc_seg.s1: 98.8404  decode.loss_ce.s2: 0.0357  decode.acc_seg.s2: 98.7960  decode.loss_ce.s3: 0.0358  decode.acc_seg.s3: 98.7988
2024/04/15 00:39:22 - mmengine - INFO - Iter(train) [12900/20000]  lr: 1.0000e-05  eta: 1:21:47  time: 0.6814  data_time: 0.0323  memory: 4840  grad_norm: 2.6747  loss: 0.1225  decode.loss_ce.s0: 0.0326  decode.acc_seg.s0: 98.6785  decode.loss_ce.s1: 0.0300  decode.acc_seg.s1: 98.6869  decode.loss_ce.s2: 0.0301  decode.acc_seg.s2: 98.6868  decode.loss_ce.s3: 0.0299  decode.acc_seg.s3: 98.7068
2024/04/15 00:40:31 - mmengine - INFO - Exp name: lraspp_ket_fastvit_ful_20240414_221012
2024/04/15 00:40:31 - mmengine - INFO - Iter(train) [13000/20000]  lr: 1.0000e-05  eta: 1:20:38  time: 0.6663  data_time: 0.0195  memory: 4840  grad_norm: 18.4527  loss: 0.1599  decode.loss_ce.s0: 0.0510  decode.acc_seg.s0: 97.3558  decode.loss_ce.s1: 0.0386  decode.acc_seg.s1: 97.3799  decode.loss_ce.s2: 0.0355  decode.acc_seg.s2: 97.4507  decode.loss_ce.s3: 0.0348  decode.acc_seg.s3: 97.4412
2024/04/15 00:40:31 - mmengine - INFO - per class results:
2024/04/15 00:40:31 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 95.27 | 97.56 | 97.58 | 97.58  |    97.6   | 97.56  |
| monolayer  | 84.92 | 91.96 | 91.85 | 91.85  |   91.73   | 91.96  |
|  bilayer   |  74.8 | 84.63 | 85.58 | 85.58  |   86.56   | 84.63  |
| multilayer | 86.29 | 93.02 | 92.64 | 92.64  |   92.27   | 93.02  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/15 00:40:31 - mmengine - INFO - Iter(val) [8/8]    aAcc: 95.0100  mIoU: 85.3200  mAcc: 91.7900  mDice: 91.9100  mFscore: 91.9100  mPrecision: 92.0400  mRecall: 91.7900  data_time: 0.0145  time: 0.0574
2024/04/15 00:40:31 - mmengine - INFO - The previous best checkpoint /home/zhouruiliang/code/mmsegmentation-main/work_dirs/lraspp_ket_fastvit_ful/best_mIoU_iter_12000.pth is removed
2024/04/15 00:40:32 - mmengine - INFO - The best checkpoint with 85.3200 mIoU at 13000 iter is saved to best_mIoU_iter_13000.pth.
2024/04/15 00:41:39 - mmengine - INFO - Iter(train) [13100/20000]  lr: 1.0000e-05  eta: 1:19:28  time: 0.6701  data_time: 0.0147  memory: 4839  grad_norm: 5.5198  loss: 0.1686  decode.loss_ce.s0: 0.0486  decode.acc_seg.s0: 97.6640  decode.loss_ce.s1: 0.0399  decode.acc_seg.s1: 97.7669  decode.loss_ce.s2: 0.0398  decode.acc_seg.s2: 97.7316  decode.loss_ce.s3: 0.0402  decode.acc_seg.s3: 97.6253
2024/04/15 00:42:49 - mmengine - INFO - Iter(train) [13200/20000]  lr: 1.0000e-05  eta: 1:18:19  time: 0.7586  data_time: 0.1091  memory: 4840  grad_norm: 3.5380  loss: 0.2142  decode.loss_ce.s0: 0.0610  decode.acc_seg.s0: 98.9476  decode.loss_ce.s1: 0.0504  decode.acc_seg.s1: 98.9106  decode.loss_ce.s2: 0.0512  decode.acc_seg.s2: 98.9298  decode.loss_ce.s3: 0.0516  decode.acc_seg.s3: 98.9149
2024/04/15 00:43:57 - mmengine - INFO - Iter(train) [13300/20000]  lr: 1.0000e-05  eta: 1:17:10  time: 0.6682  data_time: 0.0208  memory: 4840  grad_norm: 5.6947  loss: 0.1490  decode.loss_ce.s0: 0.0435  decode.acc_seg.s0: 98.7439  decode.loss_ce.s1: 0.0355  decode.acc_seg.s1: 98.8527  decode.loss_ce.s2: 0.0345  decode.acc_seg.s2: 98.8845  decode.loss_ce.s3: 0.0355  decode.acc_seg.s3: 98.8633
2024/04/15 00:45:05 - mmengine - INFO - Iter(train) [13400/20000]  lr: 1.0000e-05  eta: 1:16:00  time: 0.6666  data_time: 0.0171  memory: 4840  grad_norm: 2.6186  loss: 0.1421  decode.loss_ce.s0: 0.0399  decode.acc_seg.s0: 98.6922  decode.loss_ce.s1: 0.0338  decode.acc_seg.s1: 98.6884  decode.loss_ce.s2: 0.0339  decode.acc_seg.s2: 98.6968  decode.loss_ce.s3: 0.0345  decode.acc_seg.s3: 98.6911
2024/04/15 00:46:15 - mmengine - INFO - Iter(train) [13500/20000]  lr: 1.0000e-05  eta: 1:14:51  time: 0.7718  data_time: 0.0964  memory: 4840  grad_norm: 13.0287  loss: 0.3448  decode.loss_ce.s0: 0.1108  decode.acc_seg.s0: 94.1974  decode.loss_ce.s1: 0.0777  decode.acc_seg.s1: 94.7343  decode.loss_ce.s2: 0.0775  decode.acc_seg.s2: 94.5007  decode.loss_ce.s3: 0.0788  decode.acc_seg.s3: 94.5670
2024/04/15 00:46:16 - mmengine - INFO - per class results:
2024/04/15 00:46:16 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 95.22 | 97.78 | 97.55 | 97.55  |   97.33   | 97.78  |
| monolayer  | 84.27 | 91.49 | 91.46 | 91.46  |   91.43   | 91.49  |
|  bilayer   | 70.15 | 78.87 | 82.46 | 82.46  |   86.39   | 78.87  |
| multilayer | 85.77 | 93.17 | 92.34 | 92.34  |   91.52   | 93.17  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/15 00:46:16 - mmengine - INFO - Iter(val) [8/8]    aAcc: 94.7300  mIoU: 83.8500  mAcc: 90.3300  mDice: 90.9500  mFscore: 90.9500  mPrecision: 91.6700  mRecall: 90.3300  data_time: 0.0153  time: 0.0580
2024/04/15 00:47:24 - mmengine - INFO - Iter(train) [13600/20000]  lr: 1.0000e-05  eta: 1:13:42  time: 0.6695  data_time: 0.0198  memory: 4839  grad_norm: 3.0194  loss: 0.2491  decode.loss_ce.s0: 0.0626  decode.acc_seg.s0: 99.0173  decode.loss_ce.s1: 0.0616  decode.acc_seg.s1: 99.2266  decode.loss_ce.s2: 0.0618  decode.acc_seg.s2: 99.2147  decode.loss_ce.s3: 0.0631  decode.acc_seg.s3: 99.2211
2024/04/15 00:48:31 - mmengine - INFO - Iter(train) [13700/20000]  lr: 1.0000e-05  eta: 1:12:32  time: 0.6979  data_time: 0.0207  memory: 4840  grad_norm: 6.3037  loss: 0.1568  decode.loss_ce.s0: 0.0408  decode.acc_seg.s0: 98.9456  decode.loss_ce.s1: 0.0385  decode.acc_seg.s1: 99.0820  decode.loss_ce.s2: 0.0385  decode.acc_seg.s2: 99.0764  decode.loss_ce.s3: 0.0390  decode.acc_seg.s3: 99.0925
2024/04/15 00:49:40 - mmengine - INFO - Iter(train) [13800/20000]  lr: 1.0000e-05  eta: 1:11:23  time: 0.6659  data_time: 0.0166  memory: 4840  grad_norm: 4.8183  loss: 0.1553  decode.loss_ce.s0: 0.0431  decode.acc_seg.s0: 98.8356  decode.loss_ce.s1: 0.0369  decode.acc_seg.s1: 98.8276  decode.loss_ce.s2: 0.0373  decode.acc_seg.s2: 98.8150  decode.loss_ce.s3: 0.0381  decode.acc_seg.s3: 98.8138
2024/04/15 00:50:50 - mmengine - INFO - Iter(train) [13900/20000]  lr: 1.0000e-05  eta: 1:10:14  time: 0.7056  data_time: 0.0584  memory: 4840  grad_norm: 5.4693  loss: 0.2004  decode.loss_ce.s0: 0.0530  decode.acc_seg.s0: 98.0397  decode.loss_ce.s1: 0.0480  decode.acc_seg.s1: 98.3000  decode.loss_ce.s2: 0.0491  decode.acc_seg.s2: 98.3315  decode.loss_ce.s3: 0.0502  decode.acc_seg.s3: 98.3048
2024/04/15 00:51:59 - mmengine - INFO - Exp name: lraspp_ket_fastvit_ful_20240414_221012
2024/04/15 00:51:59 - mmengine - INFO - Iter(train) [14000/20000]  lr: 1.0000e-05  eta: 1:09:05  time: 0.7297  data_time: 0.0785  memory: 4840  grad_norm: 17.1463  loss: 0.2153  decode.loss_ce.s0: 0.0493  decode.acc_seg.s0: 98.8806  decode.loss_ce.s1: 0.0535  decode.acc_seg.s1: 98.9737  decode.loss_ce.s2: 0.0578  decode.acc_seg.s2: 98.9840  decode.loss_ce.s3: 0.0547  decode.acc_seg.s3: 98.9798
2024/04/15 00:52:00 - mmengine - INFO - per class results:
2024/04/15 00:52:00 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 94.61 | 97.09 | 97.23 | 97.23  |   97.37   | 97.09  |
| monolayer  | 83.61 |  91.5 | 91.07 | 91.07  |   90.65   |  91.5  |
|  bilayer   | 73.21 | 82.45 | 84.54 | 84.54  |   86.73   | 82.45  |
| multilayer | 85.78 | 93.31 | 92.35 | 92.35  |   91.41   | 93.31  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/15 00:52:00 - mmengine - INFO - Iter(val) [8/8]    aAcc: 94.5100  mIoU: 84.3000  mAcc: 91.0900  mDice: 91.3000  mFscore: 91.3000  mPrecision: 91.5400  mRecall: 91.0900  data_time: 0.0165  time: 0.0587
2024/04/15 00:53:08 - mmengine - INFO - Iter(train) [14100/20000]  lr: 1.0000e-05  eta: 1:07:56  time: 0.7627  data_time: 0.1131  memory: 4840  grad_norm: 2.4001  loss: 0.1747  decode.loss_ce.s0: 0.0467  decode.acc_seg.s0: 96.5715  decode.loss_ce.s1: 0.0427  decode.acc_seg.s1: 97.4997  decode.loss_ce.s2: 0.0423  decode.acc_seg.s2: 97.6215  decode.loss_ce.s3: 0.0430  decode.acc_seg.s3: 97.4823
2024/04/15 00:54:16 - mmengine - INFO - Iter(train) [14200/20000]  lr: 1.0000e-05  eta: 1:06:46  time: 0.6687  data_time: 0.0208  memory: 4839  grad_norm: 2.5466  loss: 0.1518  decode.loss_ce.s0: 0.0405  decode.acc_seg.s0: 98.7211  decode.loss_ce.s1: 0.0371  decode.acc_seg.s1: 98.9173  decode.loss_ce.s2: 0.0371  decode.acc_seg.s2: 98.9263  decode.loss_ce.s3: 0.0371  decode.acc_seg.s3: 98.9159
2024/04/15 00:55:25 - mmengine - INFO - Iter(train) [14300/20000]  lr: 1.0000e-05  eta: 1:05:37  time: 0.6638  data_time: 0.0166  memory: 4840  grad_norm: 4.2130  loss: 0.1660  decode.loss_ce.s0: 0.0456  decode.acc_seg.s0: 98.8542  decode.loss_ce.s1: 0.0403  decode.acc_seg.s1: 98.9581  decode.loss_ce.s2: 0.0398  decode.acc_seg.s2: 98.9687  decode.loss_ce.s3: 0.0403  decode.acc_seg.s3: 98.9672
2024/04/15 00:56:34 - mmengine - INFO - Iter(train) [14400/20000]  lr: 1.0000e-05  eta: 1:04:28  time: 0.6682  data_time: 0.0186  memory: 4840  grad_norm: 19.3701  loss: 0.3873  decode.loss_ce.s0: 0.1181  decode.acc_seg.s0: 98.9270  decode.loss_ce.s1: 0.0868  decode.acc_seg.s1: 98.9407  decode.loss_ce.s2: 0.0886  decode.acc_seg.s2: 98.9500  decode.loss_ce.s3: 0.0938  decode.acc_seg.s3: 98.9571
2024/04/15 00:57:43 - mmengine - INFO - Iter(train) [14500/20000]  lr: 1.0000e-05  eta: 1:03:19  time: 0.6671  data_time: 0.0179  memory: 4839  grad_norm: 5.4113  loss: 0.2210  decode.loss_ce.s0: 0.0691  decode.acc_seg.s0: 99.0482  decode.loss_ce.s1: 0.0523  decode.acc_seg.s1: 99.0975  decode.loss_ce.s2: 0.0500  decode.acc_seg.s2: 99.1036  decode.loss_ce.s3: 0.0496  decode.acc_seg.s3: 99.1146
2024/04/15 00:57:43 - mmengine - INFO - per class results:
2024/04/15 00:57:43 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 94.85 | 97.22 | 97.35 | 97.35  |   97.49   | 97.22  |
| monolayer  | 84.16 | 91.88 |  91.4 |  91.4  |   90.91   | 91.88  |
|  bilayer   | 73.06 | 82.34 | 84.43 | 84.43  |   86.63   | 82.34  |
| multilayer | 86.16 | 93.27 | 92.57 | 92.57  |   91.88   | 93.27  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/15 00:57:43 - mmengine - INFO - Iter(val) [8/8]    aAcc: 94.6900  mIoU: 84.5500  mAcc: 91.1800  mDice: 91.4400  mFscore: 91.4400  mPrecision: 91.7300  mRecall: 91.1800  data_time: 0.0177  time: 0.0603
2024/04/15 00:58:52 - mmengine - INFO - Iter(train) [14600/20000]  lr: 1.0000e-05  eta: 1:02:09  time: 0.6718  data_time: 0.0217  memory: 4840  grad_norm: 4.7004  loss: 0.1858  decode.loss_ce.s0: 0.0497  decode.acc_seg.s0: 98.8194  decode.loss_ce.s1: 0.0454  decode.acc_seg.s1: 98.8543  decode.loss_ce.s2: 0.0453  decode.acc_seg.s2: 98.8417  decode.loss_ce.s3: 0.0454  decode.acc_seg.s3: 98.8653
2024/04/15 01:00:00 - mmengine - INFO - Iter(train) [14700/20000]  lr: 1.0000e-05  eta: 1:01:00  time: 0.6704  data_time: 0.0203  memory: 4840  grad_norm: 3.1496  loss: 0.1064  decode.loss_ce.s0: 0.0318  decode.acc_seg.s0: 98.2790  decode.loss_ce.s1: 0.0248  decode.acc_seg.s1: 98.3705  decode.loss_ce.s2: 0.0248  decode.acc_seg.s2: 98.4241  decode.loss_ce.s3: 0.0249  decode.acc_seg.s3: 98.4131
2024/04/15 01:01:08 - mmengine - INFO - Iter(train) [14800/20000]  lr: 1.0000e-05  eta: 0:59:51  time: 0.6688  data_time: 0.0198  memory: 4839  grad_norm: 17.0399  loss: 0.3554  decode.loss_ce.s0: 0.0914  decode.acc_seg.s0: 98.8503  decode.loss_ce.s1: 0.0870  decode.acc_seg.s1: 98.9288  decode.loss_ce.s2: 0.0881  decode.acc_seg.s2: 98.9173  decode.loss_ce.s3: 0.0888  decode.acc_seg.s3: 98.9161
2024/04/15 01:02:19 - mmengine - INFO - Iter(train) [14900/20000]  lr: 1.0000e-05  eta: 0:58:42  time: 0.8216  data_time: 0.1674  memory: 4840  grad_norm: 5.5360  loss: 0.2613  decode.loss_ce.s0: 0.0740  decode.acc_seg.s0: 99.2393  decode.loss_ce.s1: 0.0625  decode.acc_seg.s1: 99.2641  decode.loss_ce.s2: 0.0628  decode.acc_seg.s2: 99.2770  decode.loss_ce.s3: 0.0620  decode.acc_seg.s3: 99.2835
2024/04/15 01:03:26 - mmengine - INFO - Exp name: lraspp_ket_fastvit_ful_20240414_221012
2024/04/15 01:03:26 - mmengine - INFO - Iter(train) [15000/20000]  lr: 1.0000e-05  eta: 0:57:32  time: 0.6666  data_time: 0.0173  memory: 4840  grad_norm: 2.3599  loss: 0.1349  decode.loss_ce.s0: 0.0379  decode.acc_seg.s0: 96.2615  decode.loss_ce.s1: 0.0322  decode.acc_seg.s1: 97.1929  decode.loss_ce.s2: 0.0322  decode.acc_seg.s2: 97.0540  decode.loss_ce.s3: 0.0325  decode.acc_seg.s3: 96.8135
2024/04/15 01:03:26 - mmengine - INFO - Saving checkpoint at 15000 iterations
2024/04/15 01:03:27 - mmengine - INFO - per class results:
2024/04/15 01:03:27 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 94.88 | 97.05 | 97.37 | 97.37  |   97.69   | 97.05  |
| monolayer  | 84.41 | 92.19 | 91.55 | 91.55  |   90.91   | 92.19  |
|  bilayer   | 74.28 | 83.71 | 85.24 | 85.24  |   86.84   | 83.71  |
| multilayer | 86.17 | 93.61 | 92.57 | 92.57  |   91.55   | 93.61  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/15 01:03:27 - mmengine - INFO - Iter(val) [8/8]    aAcc: 94.7700  mIoU: 84.9300  mAcc: 91.6400  mDice: 91.6800  mFscore: 91.6800  mPrecision: 91.7500  mRecall: 91.6400  data_time: 0.0119  time: 0.0545
2024/04/15 01:04:37 - mmengine - INFO - Iter(train) [15100/20000]  lr: 1.0000e-05  eta: 0:56:23  time: 0.7484  data_time: 0.0187  memory: 4840  grad_norm: 22.3592  loss: 0.5677  decode.loss_ce.s0: 0.1520  decode.acc_seg.s0: 98.7909  decode.loss_ce.s1: 0.1490  decode.acc_seg.s1: 98.9301  decode.loss_ce.s2: 0.1335  decode.acc_seg.s2: 98.9582  decode.loss_ce.s3: 0.1332  decode.acc_seg.s3: 98.9543
2024/04/15 01:05:45 - mmengine - INFO - Iter(train) [15200/20000]  lr: 1.0000e-05  eta: 0:55:14  time: 0.7454  data_time: 0.0988  memory: 4840  grad_norm: 3.3031  loss: 0.1215  decode.loss_ce.s0: 0.0403  decode.acc_seg.s0: 99.0784  decode.loss_ce.s1: 0.0277  decode.acc_seg.s1: 99.0824  decode.loss_ce.s2: 0.0267  decode.acc_seg.s2: 99.0968  decode.loss_ce.s3: 0.0268  decode.acc_seg.s3: 99.0702
2024/04/15 01:06:55 - mmengine - INFO - Iter(train) [15300/20000]  lr: 1.0000e-05  eta: 0:54:05  time: 0.6654  data_time: 0.0209  memory: 4840  grad_norm: 3.7526  loss: 0.1822  decode.loss_ce.s0: 0.0481  decode.acc_seg.s0: 98.0350  decode.loss_ce.s1: 0.0448  decode.acc_seg.s1: 99.0379  decode.loss_ce.s2: 0.0447  decode.acc_seg.s2: 99.0496  decode.loss_ce.s3: 0.0446  decode.acc_seg.s3: 99.0382
2024/04/15 01:08:03 - mmengine - INFO - Iter(train) [15400/20000]  lr: 1.0000e-05  eta: 0:52:56  time: 0.6656  data_time: 0.0166  memory: 4840  grad_norm: 4.0275  loss: 0.1241  decode.loss_ce.s0: 0.0336  decode.acc_seg.s0: 99.1058  decode.loss_ce.s1: 0.0298  decode.acc_seg.s1: 99.0997  decode.loss_ce.s2: 0.0300  decode.acc_seg.s2: 99.1059  decode.loss_ce.s3: 0.0308  decode.acc_seg.s3: 99.1014
2024/04/15 01:09:12 - mmengine - INFO - Iter(train) [15500/20000]  lr: 1.0000e-05  eta: 0:51:47  time: 0.7316  data_time: 0.0832  memory: 4840  grad_norm: 2.8904  loss: 0.1950  decode.loss_ce.s0: 0.0579  decode.acc_seg.s0: 98.7799  decode.loss_ce.s1: 0.0456  decode.acc_seg.s1: 98.8285  decode.loss_ce.s2: 0.0458  decode.acc_seg.s2: 98.8179  decode.loss_ce.s3: 0.0457  decode.acc_seg.s3: 98.8251
2024/04/15 01:09:13 - mmengine - INFO - per class results:
2024/04/15 01:09:13 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 95.77 | 98.05 | 97.84 | 97.84  |   97.63   | 98.05  |
| monolayer  | 85.33 | 91.98 | 92.08 | 92.08  |   92.19   | 91.98  |
|  bilayer   | 73.26 | 82.57 | 84.57 | 84.57  |   86.66   | 82.57  |
| multilayer | 87.47 | 93.58 | 93.31 | 93.31  |   93.05   | 93.58  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/15 01:09:13 - mmengine - INFO - Iter(val) [8/8]    aAcc: 95.2500  mIoU: 85.4600  mAcc: 91.5400  mDice: 91.9500  mFscore: 91.9500  mPrecision: 92.3800  mRecall: 91.5400  data_time: 0.0181  time: 0.0613
2024/04/15 01:09:13 - mmengine - INFO - The previous best checkpoint /home/zhouruiliang/code/mmsegmentation-main/work_dirs/lraspp_ket_fastvit_ful/best_mIoU_iter_13000.pth is removed
2024/04/15 01:09:13 - mmengine - INFO - The best checkpoint with 85.4600 mIoU at 15500 iter is saved to best_mIoU_iter_15500.pth.
2024/04/15 01:10:21 - mmengine - INFO - Iter(train) [15600/20000]  lr: 1.0000e-05  eta: 0:50:38  time: 0.6659  data_time: 0.0207  memory: 4840  grad_norm: 3.5033  loss: 0.1141  decode.loss_ce.s0: 0.0321  decode.acc_seg.s0: 98.8194  decode.loss_ce.s1: 0.0273  decode.acc_seg.s1: 98.9157  decode.loss_ce.s2: 0.0274  decode.acc_seg.s2: 98.9321  decode.loss_ce.s3: 0.0273  decode.acc_seg.s3: 98.9144
2024/04/15 01:11:29 - mmengine - INFO - Iter(train) [15700/20000]  lr: 1.0000e-05  eta: 0:49:28  time: 0.6672  data_time: 0.0201  memory: 4840  grad_norm: 3.4391  loss: 0.1065  decode.loss_ce.s0: 0.0295  decode.acc_seg.s0: 98.7953  decode.loss_ce.s1: 0.0257  decode.acc_seg.s1: 98.8460  decode.loss_ce.s2: 0.0257  decode.acc_seg.s2: 98.8484  decode.loss_ce.s3: 0.0256  decode.acc_seg.s3: 98.8529
2024/04/15 01:12:36 - mmengine - INFO - Iter(train) [15800/20000]  lr: 1.0000e-05  eta: 0:48:19  time: 0.6731  data_time: 0.0253  memory: 4840  grad_norm: 31.9715  loss: 0.3133  decode.loss_ce.s0: 0.0896  decode.acc_seg.s0: 92.9702  decode.loss_ce.s1: 0.0751  decode.acc_seg.s1: 93.2966  decode.loss_ce.s2: 0.0744  decode.acc_seg.s2: 93.8098  decode.loss_ce.s3: 0.0740  decode.acc_seg.s3: 93.1973
2024/04/15 01:13:44 - mmengine - INFO - Iter(train) [15900/20000]  lr: 1.0000e-05  eta: 0:47:10  time: 0.6719  data_time: 0.0252  memory: 4840  grad_norm: 2.7543  loss: 0.1653  decode.loss_ce.s0: 0.0446  decode.acc_seg.s0: 98.2892  decode.loss_ce.s1: 0.0400  decode.acc_seg.s1: 98.2837  decode.loss_ce.s2: 0.0403  decode.acc_seg.s2: 98.3047  decode.loss_ce.s3: 0.0403  decode.acc_seg.s3: 98.2993
2024/04/15 01:14:53 - mmengine - INFO - Exp name: lraspp_ket_fastvit_ful_20240414_221012
2024/04/15 01:14:53 - mmengine - INFO - Iter(train) [16000/20000]  lr: 1.0000e-05  eta: 0:46:00  time: 0.6666  data_time: 0.0214  memory: 4840  grad_norm: 2.8068  loss: 0.1613  decode.loss_ce.s0: 0.0474  decode.acc_seg.s0: 99.0202  decode.loss_ce.s1: 0.0384  decode.acc_seg.s1: 99.1943  decode.loss_ce.s2: 0.0375  decode.acc_seg.s2: 99.1977  decode.loss_ce.s3: 0.0381  decode.acc_seg.s3: 99.1786
2024/04/15 01:14:54 - mmengine - INFO - per class results:
2024/04/15 01:14:54 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 95.84 | 97.89 | 97.88 | 97.88  |   97.86   | 97.89  |
| monolayer  | 85.94 | 92.44 | 92.44 | 92.44  |   92.43   | 92.44  |
|  bilayer   | 74.27 | 83.85 | 85.23 | 85.23  |   86.67   | 83.85  |
| multilayer | 86.27 |  93.4 | 92.63 | 92.63  |   91.86   |  93.4  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/15 01:14:54 - mmengine - INFO - Iter(val) [8/8]    aAcc: 95.3300  mIoU: 85.5800  mAcc: 91.9000  mDice: 92.0400  mFscore: 92.0400  mPrecision: 92.2100  mRecall: 91.9000  data_time: 0.0169  time: 0.0598
2024/04/15 01:14:54 - mmengine - INFO - The previous best checkpoint /home/zhouruiliang/code/mmsegmentation-main/work_dirs/lraspp_ket_fastvit_ful/best_mIoU_iter_15500.pth is removed
2024/04/15 01:14:54 - mmengine - INFO - The best checkpoint with 85.5800 mIoU at 16000 iter is saved to best_mIoU_iter_16000.pth.
2024/04/15 01:16:03 - mmengine - INFO - Iter(train) [16100/20000]  lr: 1.0000e-06  eta: 0:44:52  time: 0.6690  data_time: 0.0181  memory: 4840  grad_norm: 3.6255  loss: 0.1899  decode.loss_ce.s0: 0.0594  decode.acc_seg.s0: 99.3309  decode.loss_ce.s1: 0.0437  decode.acc_seg.s1: 99.3563  decode.loss_ce.s2: 0.0430  decode.acc_seg.s2: 99.3647  decode.loss_ce.s3: 0.0438  decode.acc_seg.s3: 99.3640
2024/04/15 01:17:11 - mmengine - INFO - Iter(train) [16200/20000]  lr: 1.0000e-06  eta: 0:43:42  time: 0.6777  data_time: 0.0182  memory: 4840  grad_norm: 2.8956  loss: 0.1115  decode.loss_ce.s0: 0.0300  decode.acc_seg.s0: 99.2036  decode.loss_ce.s1: 0.0271  decode.acc_seg.s1: 99.2074  decode.loss_ce.s2: 0.0272  decode.acc_seg.s2: 99.2224  decode.loss_ce.s3: 0.0272  decode.acc_seg.s3: 99.2170
2024/04/15 01:18:22 - mmengine - INFO - Iter(train) [16300/20000]  lr: 1.0000e-06  eta: 0:42:34  time: 0.6748  data_time: 0.0242  memory: 4839  grad_norm: 6.0684  loss: 0.3071  decode.loss_ce.s0: 0.0936  decode.acc_seg.s0: 94.5062  decode.loss_ce.s1: 0.0717  decode.acc_seg.s1: 92.9136  decode.loss_ce.s2: 0.0708  decode.acc_seg.s2: 92.6590  decode.loss_ce.s3: 0.0710  decode.acc_seg.s3: 93.9869
2024/04/15 01:19:30 - mmengine - INFO - Iter(train) [16400/20000]  lr: 1.0000e-06  eta: 0:41:24  time: 0.6700  data_time: 0.0180  memory: 4840  grad_norm: 4.9337  loss: 0.1936  decode.loss_ce.s0: 0.0557  decode.acc_seg.s0: 98.0858  decode.loss_ce.s1: 0.0465  decode.acc_seg.s1: 98.6180  decode.loss_ce.s2: 0.0456  decode.acc_seg.s2: 98.6500  decode.loss_ce.s3: 0.0457  decode.acc_seg.s3: 98.6496
2024/04/15 01:20:37 - mmengine - INFO - Iter(train) [16500/20000]  lr: 1.0000e-06  eta: 0:40:15  time: 0.6683  data_time: 0.0195  memory: 4840  grad_norm: 12.5594  loss: 0.1939  decode.loss_ce.s0: 0.0524  decode.acc_seg.s0: 98.7329  decode.loss_ce.s1: 0.0478  decode.acc_seg.s1: 98.7832  decode.loss_ce.s2: 0.0470  decode.acc_seg.s2: 98.7861  decode.loss_ce.s3: 0.0466  decode.acc_seg.s3: 98.7865
2024/04/15 01:20:38 - mmengine - INFO - per class results:
2024/04/15 01:20:38 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 95.34 | 97.76 | 97.62 | 97.62  |   97.47   | 97.76  |
| monolayer  | 85.07 | 91.91 | 91.93 | 91.93  |   91.96   | 91.91  |
|  bilayer   | 72.72 | 81.81 | 84.21 | 84.21  |   86.75   | 81.81  |
| multilayer | 86.11 | 93.25 | 92.54 | 92.54  |   91.83   | 93.25  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/15 01:20:38 - mmengine - INFO - Iter(val) [8/8]    aAcc: 94.9900  mIoU: 84.8100  mAcc: 91.1800  mDice: 91.5700  mFscore: 91.5700  mPrecision: 92.0000  mRecall: 91.1800  data_time: 0.0165  time: 0.0594
2024/04/15 01:21:46 - mmengine - INFO - Iter(train) [16600/20000]  lr: 1.0000e-06  eta: 0:39:06  time: 0.6716  data_time: 0.0214  memory: 4840  grad_norm: 3.8350  loss: 0.1647  decode.loss_ce.s0: 0.0524  decode.acc_seg.s0: 98.9340  decode.loss_ce.s1: 0.0377  decode.acc_seg.s1: 98.9397  decode.loss_ce.s2: 0.0375  decode.acc_seg.s2: 98.9409  decode.loss_ce.s3: 0.0371  decode.acc_seg.s3: 98.9606
2024/04/15 01:22:54 - mmengine - INFO - Iter(train) [16700/20000]  lr: 1.0000e-06  eta: 0:37:57  time: 0.7004  data_time: 0.0214  memory: 4840  grad_norm: 2.3775  loss: 0.1175  decode.loss_ce.s0: 0.0326  decode.acc_seg.s0: 98.7973  decode.loss_ce.s1: 0.0283  decode.acc_seg.s1: 98.9298  decode.loss_ce.s2: 0.0284  decode.acc_seg.s2: 98.8891  decode.loss_ce.s3: 0.0282  decode.acc_seg.s3: 98.9234
2024/04/15 01:24:02 - mmengine - INFO - Iter(train) [16800/20000]  lr: 1.0000e-06  eta: 0:36:47  time: 0.6686  data_time: 0.0242  memory: 4840  grad_norm: 5.3370  loss: 0.1458  decode.loss_ce.s0: 0.0417  decode.acc_seg.s0: 98.9956  decode.loss_ce.s1: 0.0355  decode.acc_seg.s1: 99.0810  decode.loss_ce.s2: 0.0343  decode.acc_seg.s2: 99.0897  decode.loss_ce.s3: 0.0343  decode.acc_seg.s3: 99.0704
2024/04/15 01:25:11 - mmengine - INFO - Iter(train) [16900/20000]  lr: 1.0000e-06  eta: 0:35:38  time: 0.6759  data_time: 0.0179  memory: 4840  grad_norm: 4.3454  loss: 0.2212  decode.loss_ce.s0: 0.0713  decode.acc_seg.s0: 98.9305  decode.loss_ce.s1: 0.0501  decode.acc_seg.s1: 99.0656  decode.loss_ce.s2: 0.0498  decode.acc_seg.s2: 99.0577  decode.loss_ce.s3: 0.0500  decode.acc_seg.s3: 99.0586
2024/04/15 01:26:19 - mmengine - INFO - Exp name: lraspp_ket_fastvit_ful_20240414_221012
2024/04/15 01:26:19 - mmengine - INFO - Iter(train) [17000/20000]  lr: 1.0000e-06  eta: 0:34:29  time: 0.6792  data_time: 0.0309  memory: 4840  grad_norm: 2.1787  loss: 0.1951  decode.loss_ce.s0: 0.0516  decode.acc_seg.s0: 95.3004  decode.loss_ce.s1: 0.0476  decode.acc_seg.s1: 95.2676  decode.loss_ce.s2: 0.0477  decode.acc_seg.s2: 95.3906  decode.loss_ce.s3: 0.0482  decode.acc_seg.s3: 95.1815
2024/04/15 01:26:20 - mmengine - INFO - per class results:
2024/04/15 01:26:20 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 95.23 | 97.27 | 97.56 | 97.56  |   97.85   | 97.27  |
| monolayer  | 84.95 | 92.58 | 91.86 | 91.86  |   91.16   | 92.58  |
|  bilayer   | 73.67 | 83.03 | 84.84 | 84.84  |   86.72   | 83.03  |
| multilayer | 86.24 | 93.45 | 92.61 | 92.61  |   91.78   | 93.45  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/15 01:26:20 - mmengine - INFO - Iter(val) [8/8]    aAcc: 94.9500  mIoU: 85.0200  mAcc: 91.5800  mDice: 91.7200  mFscore: 91.7200  mPrecision: 91.8800  mRecall: 91.5800  data_time: 0.0158  time: 0.0585
2024/04/15 01:27:27 - mmengine - INFO - Iter(train) [17100/20000]  lr: 1.0000e-06  eta: 0:33:20  time: 0.7465  data_time: 0.0970  memory: 4840  grad_norm: 3.6797  loss: 0.2404  decode.loss_ce.s0: 0.0593  decode.acc_seg.s0: 98.6790  decode.loss_ce.s1: 0.0620  decode.acc_seg.s1: 98.7290  decode.loss_ce.s2: 0.0594  decode.acc_seg.s2: 98.7177  decode.loss_ce.s3: 0.0597  decode.acc_seg.s3: 98.7224
2024/04/15 01:28:36 - mmengine - INFO - Iter(train) [17200/20000]  lr: 1.0000e-06  eta: 0:32:11  time: 0.6684  data_time: 0.0231  memory: 4840  grad_norm: 3.3511  loss: 0.2124  decode.loss_ce.s0: 0.0607  decode.acc_seg.s0: 98.1059  decode.loss_ce.s1: 0.0501  decode.acc_seg.s1: 98.2250  decode.loss_ce.s2: 0.0506  decode.acc_seg.s2: 98.2243  decode.loss_ce.s3: 0.0510  decode.acc_seg.s3: 98.2220
2024/04/15 01:29:43 - mmengine - INFO - Iter(train) [17300/20000]  lr: 1.0000e-06  eta: 0:31:02  time: 0.6676  data_time: 0.0189  memory: 4840  grad_norm: 2.5273  loss: 0.1733  decode.loss_ce.s0: 0.0482  decode.acc_seg.s0: 91.4369  decode.loss_ce.s1: 0.0418  decode.acc_seg.s1: 92.9559  decode.loss_ce.s2: 0.0417  decode.acc_seg.s2: 92.3438  decode.loss_ce.s3: 0.0416  decode.acc_seg.s3: 92.8644
2024/04/15 01:30:51 - mmengine - INFO - Iter(train) [17400/20000]  lr: 1.0000e-06  eta: 0:29:53  time: 0.6665  data_time: 0.0202  memory: 4840  grad_norm: 2.7550  loss: 0.1100  decode.loss_ce.s0: 0.0295  decode.acc_seg.s0: 98.6378  decode.loss_ce.s1: 0.0270  decode.acc_seg.s1: 98.9056  decode.loss_ce.s2: 0.0267  decode.acc_seg.s2: 98.9011  decode.loss_ce.s3: 0.0267  decode.acc_seg.s3: 98.9000
2024/04/15 01:31:59 - mmengine - INFO - Iter(train) [17500/20000]  lr: 1.0000e-06  eta: 0:28:43  time: 0.6694  data_time: 0.0203  memory: 4839  grad_norm: 1.9739  loss: 0.1559  decode.loss_ce.s0: 0.0421  decode.acc_seg.s0: 98.9072  decode.loss_ce.s1: 0.0380  decode.acc_seg.s1: 98.9746  decode.loss_ce.s2: 0.0380  decode.acc_seg.s2: 98.9723  decode.loss_ce.s3: 0.0378  decode.acc_seg.s3: 98.9769
2024/04/15 01:31:59 - mmengine - INFO - Saving checkpoint at 17500 iterations
2024/04/15 01:32:00 - mmengine - INFO - per class results:
2024/04/15 01:32:00 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 95.39 |  97.6 | 97.64 | 97.64  |   97.68   |  97.6  |
| monolayer  | 85.17 | 92.24 | 91.99 | 91.99  |   91.75   | 92.24  |
|  bilayer   | 72.84 | 82.01 | 84.29 | 84.29  |    86.7   | 82.01  |
| multilayer | 85.91 | 93.41 | 92.42 | 92.42  |   91.46   | 93.41  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/15 01:32:00 - mmengine - INFO - Iter(val) [8/8]    aAcc: 95.0100  mIoU: 84.8300  mAcc: 91.3200  mDice: 91.5900  mFscore: 91.5900  mPrecision: 91.9000  mRecall: 91.3200  data_time: 0.0102  time: 0.0535
2024/04/15 01:33:07 - mmengine - INFO - Iter(train) [17600/20000]  lr: 1.0000e-06  eta: 0:27:34  time: 0.6815  data_time: 0.0218  memory: 4840  grad_norm: 4.6880  loss: 0.1702  decode.loss_ce.s0: 0.0542  decode.acc_seg.s0: 97.4650  decode.loss_ce.s1: 0.0389  decode.acc_seg.s1: 97.3247  decode.loss_ce.s2: 0.0386  decode.acc_seg.s2: 97.2767  decode.loss_ce.s3: 0.0386  decode.acc_seg.s3: 97.2717
2024/04/15 01:34:14 - mmengine - INFO - Iter(train) [17700/20000]  lr: 1.0000e-06  eta: 0:26:25  time: 0.6711  data_time: 0.0213  memory: 4840  grad_norm: 2.1869  loss: 0.1012  decode.loss_ce.s0: 0.0270  decode.acc_seg.s0: 98.9999  decode.loss_ce.s1: 0.0248  decode.acc_seg.s1: 98.9636  decode.loss_ce.s2: 0.0247  decode.acc_seg.s2: 98.9790  decode.loss_ce.s3: 0.0246  decode.acc_seg.s3: 98.9680
2024/04/15 01:35:21 - mmengine - INFO - Iter(train) [17800/20000]  lr: 1.0000e-06  eta: 0:25:16  time: 0.6738  data_time: 0.0201  memory: 4840  grad_norm: 4.4336  loss: 0.1850  decode.loss_ce.s0: 0.0483  decode.acc_seg.s0: 98.8552  decode.loss_ce.s1: 0.0454  decode.acc_seg.s1: 98.8536  decode.loss_ce.s2: 0.0458  decode.acc_seg.s2: 98.8565  decode.loss_ce.s3: 0.0456  decode.acc_seg.s3: 98.8679
2024/04/15 01:36:29 - mmengine - INFO - Iter(train) [17900/20000]  lr: 1.0000e-06  eta: 0:24:07  time: 0.6719  data_time: 0.0202  memory: 4840  grad_norm: 6.5376  loss: 0.3667  decode.loss_ce.s0: 0.0977  decode.acc_seg.s0: 88.2008  decode.loss_ce.s1: 0.0857  decode.acc_seg.s1: 88.2444  decode.loss_ce.s2: 0.0920  decode.acc_seg.s2: 88.2516  decode.loss_ce.s3: 0.0913  decode.acc_seg.s3: 88.2510
2024/04/15 01:37:39 - mmengine - INFO - Exp name: lraspp_ket_fastvit_ful_20240414_221012
2024/04/15 01:37:39 - mmengine - INFO - Iter(train) [18000/20000]  lr: 1.0000e-06  eta: 0:22:58  time: 0.6675  data_time: 0.0225  memory: 4840  grad_norm: 6.9273  loss: 0.4299  decode.loss_ce.s0: 0.1082  decode.acc_seg.s0: 99.1673  decode.loss_ce.s1: 0.1089  decode.acc_seg.s1: 99.1646  decode.loss_ce.s2: 0.1047  decode.acc_seg.s2: 99.1792  decode.loss_ce.s3: 0.1080  decode.acc_seg.s3: 99.1845
2024/04/15 01:37:39 - mmengine - INFO - per class results:
2024/04/15 01:37:39 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 95.71 | 97.73 | 97.81 | 97.81  |   97.88   | 97.73  |
| monolayer  | 85.98 | 92.64 | 92.46 | 92.46  |   92.28   | 92.64  |
|  bilayer   | 74.38 | 83.83 | 85.31 | 85.31  |   86.84   | 83.83  |
| multilayer | 86.13 | 93.46 | 92.55 | 92.55  |   91.65   | 93.46  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/15 01:37:39 - mmengine - INFO - Iter(val) [8/8]    aAcc: 95.2800  mIoU: 85.5500  mAcc: 91.9100  mDice: 92.0300  mFscore: 92.0300  mPrecision: 92.1600  mRecall: 91.9100  data_time: 0.0157  time: 0.0585
2024/04/15 01:38:47 - mmengine - INFO - Iter(train) [18100/20000]  lr: 1.0000e-06  eta: 0:21:49  time: 0.7532  data_time: 0.0206  memory: 4839  grad_norm: 5.8622  loss: 0.2828  decode.loss_ce.s0: 0.0749  decode.acc_seg.s0: 98.8692  decode.loss_ce.s1: 0.0709  decode.acc_seg.s1: 98.8894  decode.loss_ce.s2: 0.0690  decode.acc_seg.s2: 98.8891  decode.loss_ce.s3: 0.0680  decode.acc_seg.s3: 98.8946
2024/04/15 01:39:55 - mmengine - INFO - Iter(train) [18200/20000]  lr: 1.0000e-06  eta: 0:20:40  time: 0.6679  data_time: 0.0183  memory: 4839  grad_norm: 2.1509  loss: 0.1070  decode.loss_ce.s0: 0.0285  decode.acc_seg.s0: 98.9977  decode.loss_ce.s1: 0.0262  decode.acc_seg.s1: 99.0397  decode.loss_ce.s2: 0.0262  decode.acc_seg.s2: 99.0343  decode.loss_ce.s3: 0.0260  decode.acc_seg.s3: 99.0364
2024/04/15 01:41:03 - mmengine - INFO - Iter(train) [18300/20000]  lr: 1.0000e-06  eta: 0:19:31  time: 0.6922  data_time: 0.0441  memory: 4839  grad_norm: 4.5619  loss: 0.2153  decode.loss_ce.s0: 0.0624  decode.acc_seg.s0: 97.6180  decode.loss_ce.s1: 0.0500  decode.acc_seg.s1: 98.6430  decode.loss_ce.s2: 0.0510  decode.acc_seg.s2: 98.6830  decode.loss_ce.s3: 0.0518  decode.acc_seg.s3: 98.6319
2024/04/15 01:42:12 - mmengine - INFO - Iter(train) [18400/20000]  lr: 1.0000e-06  eta: 0:18:22  time: 0.7353  data_time: 0.0198  memory: 4840  grad_norm: 3.5989  loss: 0.1359  decode.loss_ce.s0: 0.0428  decode.acc_seg.s0: 98.9951  decode.loss_ce.s1: 0.0317  decode.acc_seg.s1: 99.0852  decode.loss_ce.s2: 0.0308  decode.acc_seg.s2: 99.0861  decode.loss_ce.s3: 0.0306  decode.acc_seg.s3: 99.0891
2024/04/15 01:43:22 - mmengine - INFO - Iter(train) [18500/20000]  lr: 1.0000e-06  eta: 0:17:13  time: 0.6636  data_time: 0.0166  memory: 4839  grad_norm: 8.3636  loss: 0.4397  decode.loss_ce.s0: 0.1169  decode.acc_seg.s0: 98.9851  decode.loss_ce.s1: 0.1046  decode.acc_seg.s1: 99.0086  decode.loss_ce.s2: 0.1077  decode.acc_seg.s2: 99.0093  decode.loss_ce.s3: 0.1104  decode.acc_seg.s3: 99.0251
2024/04/15 01:43:23 - mmengine - INFO - per class results:
2024/04/15 01:43:23 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 95.35 | 97.71 | 97.62 | 97.62  |   97.53   | 97.71  |
| monolayer  |  85.1 | 91.85 | 91.95 | 91.95  |   92.05   | 91.85  |
|  bilayer   | 73.81 | 83.38 | 84.93 | 84.93  |   86.54   | 83.38  |
| multilayer |  86.1 | 93.26 | 92.53 | 92.53  |   91.81   | 93.26  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/15 01:43:23 - mmengine - INFO - Iter(val) [8/8]    aAcc: 95.0200  mIoU: 85.0900  mAcc: 91.5500  mDice: 91.7600  mFscore: 91.7600  mPrecision: 91.9800  mRecall: 91.5500  data_time: 0.0126  time: 0.0551
2024/04/15 01:44:31 - mmengine - INFO - Iter(train) [18600/20000]  lr: 1.0000e-06  eta: 0:16:04  time: 0.6686  data_time: 0.0198  memory: 4840  grad_norm: 3.5015  loss: 0.1707  decode.loss_ce.s0: 0.0468  decode.acc_seg.s0: 98.6359  decode.loss_ce.s1: 0.0414  decode.acc_seg.s1: 98.7131  decode.loss_ce.s2: 0.0412  decode.acc_seg.s2: 98.7049  decode.loss_ce.s3: 0.0413  decode.acc_seg.s3: 98.7153
2024/04/15 01:45:39 - mmengine - INFO - Iter(train) [18700/20000]  lr: 1.0000e-06  eta: 0:14:55  time: 0.6695  data_time: 0.0232  memory: 4840  grad_norm: 25.9887  loss: 0.1360  decode.loss_ce.s0: 0.0347  decode.acc_seg.s0: 98.6923  decode.loss_ce.s1: 0.0338  decode.acc_seg.s1: 98.8044  decode.loss_ce.s2: 0.0336  decode.acc_seg.s2: 98.7909  decode.loss_ce.s3: 0.0339  decode.acc_seg.s3: 98.7881
2024/04/15 01:46:47 - mmengine - INFO - Iter(train) [18800/20000]  lr: 1.0000e-06  eta: 0:13:46  time: 0.6990  data_time: 0.0493  memory: 4840  grad_norm: 7.2131  loss: 0.1748  decode.loss_ce.s0: 0.0453  decode.acc_seg.s0: 98.1901  decode.loss_ce.s1: 0.0402  decode.acc_seg.s1: 99.0938  decode.loss_ce.s2: 0.0437  decode.acc_seg.s2: 99.1092  decode.loss_ce.s3: 0.0456  decode.acc_seg.s3: 99.1025
2024/04/15 01:47:56 - mmengine - INFO - Iter(train) [18900/20000]  lr: 1.0000e-06  eta: 0:12:37  time: 0.6702  data_time: 0.0220  memory: 4840  grad_norm: 10.4796  loss: 0.1877  decode.loss_ce.s0: 0.0561  decode.acc_seg.s0: 89.4204  decode.loss_ce.s1: 0.0439  decode.acc_seg.s1: 90.5707  decode.loss_ce.s2: 0.0440  decode.acc_seg.s2: 90.4719  decode.loss_ce.s3: 0.0437  decode.acc_seg.s3: 90.9712
2024/04/15 01:49:04 - mmengine - INFO - Exp name: lraspp_ket_fastvit_ful_20240414_221012
2024/04/15 01:49:04 - mmengine - INFO - Iter(train) [19000/20000]  lr: 1.0000e-06  eta: 0:11:29  time: 0.6665  data_time: 0.0202  memory: 4840  grad_norm: 2.8878  loss: 0.1877  decode.loss_ce.s0: 0.0535  decode.acc_seg.s0: 99.0618  decode.loss_ce.s1: 0.0451  decode.acc_seg.s1: 98.9637  decode.loss_ce.s2: 0.0444  decode.acc_seg.s2: 98.9792  decode.loss_ce.s3: 0.0447  decode.acc_seg.s3: 98.9948
2024/04/15 01:49:05 - mmengine - INFO - per class results:
2024/04/15 01:49:05 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 94.94 | 97.04 |  97.4 |  97.4  |   97.77   | 97.04  |
| monolayer  | 84.44 | 92.24 | 91.56 | 91.56  |   90.89   | 92.24  |
|  bilayer   | 74.03 | 83.56 | 85.08 | 85.08  |   86.64   | 83.56  |
| multilayer | 85.41 | 93.32 | 92.13 | 92.13  |   90.97   | 93.32  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/15 01:49:05 - mmengine - INFO - Iter(val) [8/8]    aAcc: 94.7500  mIoU: 84.7000  mAcc: 91.5400  mDice: 91.5400  mFscore: 91.5400  mPrecision: 91.5700  mRecall: 91.5400  data_time: 0.0164  time: 0.0594
2024/04/15 01:50:13 - mmengine - INFO - Iter(train) [19100/20000]  lr: 1.0000e-06  eta: 0:10:20  time: 0.6879  data_time: 0.0401  memory: 4840  grad_norm: 4.3094  loss: 0.2498  decode.loss_ce.s0: 0.0732  decode.acc_seg.s0: 98.8544  decode.loss_ce.s1: 0.0595  decode.acc_seg.s1: 98.9096  decode.loss_ce.s2: 0.0581  decode.acc_seg.s2: 98.9098  decode.loss_ce.s3: 0.0589  decode.acc_seg.s3: 98.8950
2024/04/15 01:51:22 - mmengine - INFO - Iter(train) [19200/20000]  lr: 1.0000e-06  eta: 0:09:11  time: 0.6861  data_time: 0.0340  memory: 4839  grad_norm: 8.9910  loss: 0.2612  decode.loss_ce.s0: 0.0762  decode.acc_seg.s0: 98.7906  decode.loss_ce.s1: 0.0629  decode.acc_seg.s1: 97.8629  decode.loss_ce.s2: 0.0609  decode.acc_seg.s2: 97.7517  decode.loss_ce.s3: 0.0613  decode.acc_seg.s3: 97.8583
2024/04/15 01:52:29 - mmengine - INFO - Iter(train) [19300/20000]  lr: 1.0000e-06  eta: 0:08:02  time: 0.6775  data_time: 0.0207  memory: 4840  grad_norm: 6.9926  loss: 0.2230  decode.loss_ce.s0: 0.0599  decode.acc_seg.s0: 99.0335  decode.loss_ce.s1: 0.0544  decode.acc_seg.s1: 99.0365  decode.loss_ce.s2: 0.0542  decode.acc_seg.s2: 99.0299  decode.loss_ce.s3: 0.0546  decode.acc_seg.s3: 99.0334
2024/04/15 01:53:39 - mmengine - INFO - Iter(train) [19400/20000]  lr: 1.0000e-06  eta: 0:06:53  time: 0.6677  data_time: 0.0212  memory: 4840  grad_norm: 13.6717  loss: 0.2233  decode.loss_ce.s0: 0.0655  decode.acc_seg.s0: 99.0953  decode.loss_ce.s1: 0.0499  decode.acc_seg.s1: 99.1118  decode.loss_ce.s2: 0.0542  decode.acc_seg.s2: 99.1057  decode.loss_ce.s3: 0.0536  decode.acc_seg.s3: 99.1029
2024/04/15 01:54:48 - mmengine - INFO - Iter(train) [19500/20000]  lr: 1.0000e-06  eta: 0:05:44  time: 0.6729  data_time: 0.0153  memory: 4840  grad_norm: 4.8524  loss: 0.1193  decode.loss_ce.s0: 0.0332  decode.acc_seg.s0: 98.9688  decode.loss_ce.s1: 0.0287  decode.acc_seg.s1: 98.9431  decode.loss_ce.s2: 0.0287  decode.acc_seg.s2: 98.9517  decode.loss_ce.s3: 0.0286  decode.acc_seg.s3: 98.9398
2024/04/15 01:54:49 - mmengine - INFO - per class results:
2024/04/15 01:54:49 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 95.48 | 97.81 | 97.69 | 97.69  |   97.57   | 97.81  |
| monolayer  | 85.26 |  92.1 | 92.04 | 92.04  |   91.98   |  92.1  |
|  bilayer   | 72.98 | 82.07 | 84.38 | 84.38  |   86.82   | 82.07  |
| multilayer | 86.44 | 93.25 | 92.72 | 92.72  |   92.21   | 93.25  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/15 01:54:49 - mmengine - INFO - Iter(val) [8/8]    aAcc: 95.0800  mIoU: 85.0400  mAcc: 91.3100  mDice: 91.7100  mFscore: 91.7100  mPrecision: 92.1400  mRecall: 91.3100  data_time: 0.0110  time: 0.0538
2024/04/15 01:55:56 - mmengine - INFO - Iter(train) [19600/20000]  lr: 1.0000e-06  eta: 0:04:35  time: 0.6682  data_time: 0.0208  memory: 4839  grad_norm: 22.6447  loss: 0.3708  decode.loss_ce.s0: 0.0750  decode.acc_seg.s0: 90.9966  decode.loss_ce.s1: 0.0790  decode.acc_seg.s1: 85.8694  decode.loss_ce.s2: 0.1024  decode.acc_seg.s2: 85.8997  decode.loss_ce.s3: 0.1144  decode.acc_seg.s3: 85.8899
2024/04/15 01:57:06 - mmengine - INFO - Iter(train) [19700/20000]  lr: 1.0000e-06  eta: 0:03:26  time: 0.6718  data_time: 0.0177  memory: 4840  grad_norm: 4.1895  loss: 0.2597  decode.loss_ce.s0: 0.0739  decode.acc_seg.s0: 98.7832  decode.loss_ce.s1: 0.0623  decode.acc_seg.s1: 98.9193  decode.loss_ce.s2: 0.0616  decode.acc_seg.s2: 98.9318  decode.loss_ce.s3: 0.0618  decode.acc_seg.s3: 98.9203
2024/04/15 01:58:15 - mmengine - INFO - Iter(train) [19800/20000]  lr: 1.0000e-06  eta: 0:02:17  time: 0.6674  data_time: 0.0135  memory: 4840  grad_norm: 2.8745  loss: 0.2072  decode.loss_ce.s0: 0.0589  decode.acc_seg.s0: 98.7152  decode.loss_ce.s1: 0.0491  decode.acc_seg.s1: 98.8736  decode.loss_ce.s2: 0.0493  decode.acc_seg.s2: 98.8823  decode.loss_ce.s3: 0.0499  decode.acc_seg.s3: 98.8670
2024/04/15 01:59:24 - mmengine - INFO - Iter(train) [19900/20000]  lr: 1.0000e-06  eta: 0:01:08  time: 0.6703  data_time: 0.0204  memory: 4840  grad_norm: 2.7740  loss: 0.2219  decode.loss_ce.s0: 0.0598  decode.acc_seg.s0: 99.2219  decode.loss_ce.s1: 0.0542  decode.acc_seg.s1: 99.2218  decode.loss_ce.s2: 0.0538  decode.acc_seg.s2: 99.2239  decode.loss_ce.s3: 0.0541  decode.acc_seg.s3: 99.2267
2024/04/15 02:00:33 - mmengine - INFO - Exp name: lraspp_ket_fastvit_ful_20240414_221012
2024/04/15 02:00:33 - mmengine - INFO - Iter(train) [20000/20000]  lr: 1.0000e-06  eta: 0:00:00  time: 0.7524  data_time: 0.0293  memory: 4840  grad_norm: 6.0937  loss: 0.1192  decode.loss_ce.s0: 0.0319  decode.acc_seg.s0: 99.0240  decode.loss_ce.s1: 0.0292  decode.acc_seg.s1: 98.9968  decode.loss_ce.s2: 0.0291  decode.acc_seg.s2: 99.0201  decode.loss_ce.s3: 0.0289  decode.acc_seg.s3: 99.0359
2024/04/15 02:00:33 - mmengine - INFO - Saving checkpoint at 20000 iterations
2024/04/15 02:00:34 - mmengine - INFO - per class results:
2024/04/15 02:00:34 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 95.26 | 97.43 | 97.57 | 97.57  |   97.72   | 97.43  |
| monolayer  | 85.08 | 92.43 | 91.94 | 91.94  |   91.45   | 92.43  |
|  bilayer   | 73.98 |  83.2 | 85.04 | 85.04  |   86.97   |  83.2  |
| multilayer | 86.31 | 93.25 | 92.65 | 92.65  |   92.06   | 93.25  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/15 02:00:34 - mmengine - INFO - Iter(val) [8/8]    aAcc: 95.0000  mIoU: 85.1600  mAcc: 91.5800  mDice: 91.8000  mFscore: 91.8000  mPrecision: 92.0500  mRecall: 91.5800  data_time: 0.0101  time: 0.0528
