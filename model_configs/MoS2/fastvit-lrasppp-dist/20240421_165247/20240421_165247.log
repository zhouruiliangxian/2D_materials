2024/04/21 16:52:49 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.19 (default, Mar 20 2024, 19:58:24) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 0
    GPU 0,1: NVIDIA RTX A2000 12GB
    CUDA_HOME: /home/zhouruiliang/.conda/envs/mmseg
    NVCC: Cuda compilation tools, release 11.6, V11.6.124
    GCC: gcc (Ubuntu 7.5.0-6ubuntu2) 7.5.0
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 4.9.0
    MMEngine: 0.10.3

Runtime environment:
    cudnn_benchmark: True
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 0
    Distributed launcher: pytorch
    Distributed training: True
    GPU number: 2
------------------------------------------------------------

2024/04/21 16:52:49 - mmengine - INFO - Config:
channels = [
    48,
    96,
    384,
]
crop_size = (
    640,
    640,
)
custom_imports = dict(
    allow_failed_imports=False, imports=[
        'mmpretrain.models',
    ])
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    pad_val=0,
    seg_pad_val=255,
    size=(
        512,
        1024,
    ),
    std=[
        58.395,
        57.12,
        57.375,
    ],
    type='SegDataPreProcessor')
data_root = 'MoS2_data/'
dataset_type = 'MoSdata'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False,
        interval=2500,
        max_keep_ckpts=1,
        save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=100, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'pytorch'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        features_only=True,
        model_name='fastvit_t8',
        out_indices=(
            0,
            1,
            3,
        ),
        pretrained=True,
        type='mmpretrain.TIMMBackbone'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            640,
            640,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        act_cfg=dict(type='ReLU'),
        align_corners=False,
        channels=128,
        dropout_ratio=0.1,
        in_channels=[
            48,
            96,
            384,
        ],
        in_index=(
            0,
            1,
            2,
        ),
        input_transform='multiple_select',
        loss_decode=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=4,
        type='LRASPPHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
norm_cfg = dict(requires_grad=True, type='SyncBN')
optim_wrapper = dict(
    clip_grad=None,
    optimizer=dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
optimizer = dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0005)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0.0001,
        power=0.9,
        type='PolyLR'),
]
randomness = dict(seed=0)
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(img_path='img_dir/test', seg_map_path='ann_dir/test'),
        data_root='MoS2_data/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                1024,
            ), type='Resize'),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='MoSdata'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
        'mDice',
        'mFscore',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        1024,
    ), type='Resize'),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(max_iters=20000, type='IterBasedTrainLoop', val_interval=500)
train_dataloader = dict(
    batch_size=8,
    dataset=dict(
        data_prefix=dict(
            img_path='img_dir/train', seg_map_path='ann_dir/train'),
        data_root='MoS2_data/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.5,
                    2.0,
                ),
                scale=(
                    2048,
                    1024,
                ),
                type='RandomResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    640,
                    640,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='MoSdata'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.5,
            2.0,
        ),
        scale=(
            2048,
            1024,
        ),
        type='RandomResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(file_client_args=dict(backend='disk'), type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(img_path='img_dir/val', seg_map_path='ann_dir/val'),
        data_root='MoS2_data/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                1024,
            ), type='Resize'),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='MoSdata'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
        'mDice',
        'mFscore',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_head_dirs/fastvit-irasppp-dist'

2024/04/21 16:53:00 - mmengine - INFO - backbone out_indices: (0, 1, 3)
2024/04/21 16:53:00 - mmengine - INFO - backbone out_channels: [48, 96, 384]
2024/04/21 16:53:00 - mmengine - INFO - backbone out_strides: [4, 8, 32]
2024/04/21 16:53:00 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/04/21 16:53:00 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Name of parameter - Initialization information

backbone.timm_model.stem_0.conv_kxk.0.conv.weight - torch.Size([48, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_0.conv_kxk.0.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_0.conv_kxk.0.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_0.conv_scale.conv.weight - torch.Size([48, 3, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_0.conv_scale.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_0.conv_scale.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_1.conv_kxk.0.conv.weight - torch.Size([48, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_1.conv_kxk.0.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_1.conv_kxk.0.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_1.conv_scale.conv.weight - torch.Size([48, 1, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_1.conv_scale.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_1.conv_scale.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_2.identity.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_2.identity.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_2.conv_kxk.0.conv.weight - torch.Size([48, 48, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_2.conv_kxk.0.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stem_2.conv_kxk.0.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.token_mixer.norm.identity.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.token_mixer.norm.identity.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.token_mixer.mixer.identity.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.token_mixer.mixer.identity.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.token_mixer.mixer.conv_kxk.0.conv.weight - torch.Size([48, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.token_mixer.mixer.conv_kxk.0.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.token_mixer.mixer.conv_kxk.0.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.token_mixer.mixer.conv_scale.conv.weight - torch.Size([48, 1, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.token_mixer.mixer.conv_scale.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.token_mixer.mixer.conv_scale.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.token_mixer.layer_scale.gamma - torch.Size([48, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.mlp.conv.conv.weight - torch.Size([48, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.mlp.conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.mlp.conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.mlp.fc1.weight - torch.Size([144, 48, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.mlp.fc1.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.mlp.fc2.weight - torch.Size([48, 144, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.mlp.fc2.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.0.layer_scale.gamma - torch.Size([48, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.token_mixer.norm.identity.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.token_mixer.norm.identity.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.token_mixer.mixer.identity.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.token_mixer.mixer.identity.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.token_mixer.mixer.conv_kxk.0.conv.weight - torch.Size([48, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.token_mixer.mixer.conv_kxk.0.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.token_mixer.mixer.conv_kxk.0.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.token_mixer.mixer.conv_scale.conv.weight - torch.Size([48, 1, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.token_mixer.mixer.conv_scale.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.token_mixer.mixer.conv_scale.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.token_mixer.layer_scale.gamma - torch.Size([48, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.mlp.conv.conv.weight - torch.Size([48, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.mlp.conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.mlp.conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.mlp.fc1.weight - torch.Size([144, 48, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.mlp.fc1.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.mlp.fc2.weight - torch.Size([48, 144, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.mlp.fc2.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_0.blocks.1.layer_scale.gamma - torch.Size([48, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.downsample.proj.0.large_conv.conv.weight - torch.Size([96, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.downsample.proj.0.large_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.downsample.proj.0.large_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.downsample.proj.0.small_conv.conv.weight - torch.Size([96, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.downsample.proj.0.small_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.downsample.proj.0.small_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.downsample.proj.1.identity.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.downsample.proj.1.identity.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.downsample.proj.1.conv_kxk.0.conv.weight - torch.Size([96, 96, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.downsample.proj.1.conv_kxk.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.downsample.proj.1.conv_kxk.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.token_mixer.norm.identity.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.token_mixer.norm.identity.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.token_mixer.mixer.identity.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.token_mixer.mixer.identity.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.token_mixer.mixer.conv_kxk.0.conv.weight - torch.Size([96, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.token_mixer.mixer.conv_kxk.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.token_mixer.mixer.conv_kxk.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.token_mixer.mixer.conv_scale.conv.weight - torch.Size([96, 1, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.token_mixer.mixer.conv_scale.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.token_mixer.mixer.conv_scale.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.token_mixer.layer_scale.gamma - torch.Size([96, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.mlp.conv.conv.weight - torch.Size([96, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.mlp.conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.mlp.conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.mlp.fc1.weight - torch.Size([288, 96, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.mlp.fc1.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.mlp.fc2.weight - torch.Size([96, 288, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.mlp.fc2.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.0.layer_scale.gamma - torch.Size([96, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.token_mixer.norm.identity.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.token_mixer.norm.identity.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.token_mixer.mixer.identity.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.token_mixer.mixer.identity.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.token_mixer.mixer.conv_kxk.0.conv.weight - torch.Size([96, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.token_mixer.mixer.conv_kxk.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.token_mixer.mixer.conv_kxk.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.token_mixer.mixer.conv_scale.conv.weight - torch.Size([96, 1, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.token_mixer.mixer.conv_scale.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.token_mixer.mixer.conv_scale.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.token_mixer.layer_scale.gamma - torch.Size([96, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.mlp.conv.conv.weight - torch.Size([96, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.mlp.conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.mlp.conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.mlp.fc1.weight - torch.Size([288, 96, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.mlp.fc1.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.mlp.fc2.weight - torch.Size([96, 288, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.mlp.fc2.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_1.blocks.1.layer_scale.gamma - torch.Size([96, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.downsample.proj.0.large_conv.conv.weight - torch.Size([192, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.downsample.proj.0.large_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.downsample.proj.0.large_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.downsample.proj.0.small_conv.conv.weight - torch.Size([192, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.downsample.proj.0.small_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.downsample.proj.0.small_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.downsample.proj.1.identity.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.downsample.proj.1.identity.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.downsample.proj.1.conv_kxk.0.conv.weight - torch.Size([192, 192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.downsample.proj.1.conv_kxk.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.downsample.proj.1.conv_kxk.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.token_mixer.norm.identity.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.token_mixer.norm.identity.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.token_mixer.mixer.identity.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.token_mixer.mixer.identity.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.token_mixer.mixer.conv_kxk.0.conv.weight - torch.Size([192, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.token_mixer.mixer.conv_kxk.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.token_mixer.mixer.conv_kxk.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.token_mixer.mixer.conv_scale.conv.weight - torch.Size([192, 1, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.token_mixer.mixer.conv_scale.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.token_mixer.mixer.conv_scale.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.token_mixer.layer_scale.gamma - torch.Size([192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.mlp.conv.conv.weight - torch.Size([192, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.mlp.conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.mlp.conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.mlp.fc1.weight - torch.Size([576, 192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.mlp.fc1.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.mlp.fc2.weight - torch.Size([192, 576, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.mlp.fc2.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.0.layer_scale.gamma - torch.Size([192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.token_mixer.norm.identity.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.token_mixer.norm.identity.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.token_mixer.mixer.identity.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.token_mixer.mixer.identity.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.token_mixer.mixer.conv_kxk.0.conv.weight - torch.Size([192, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.token_mixer.mixer.conv_kxk.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.token_mixer.mixer.conv_kxk.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.token_mixer.mixer.conv_scale.conv.weight - torch.Size([192, 1, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.token_mixer.mixer.conv_scale.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.token_mixer.mixer.conv_scale.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.token_mixer.layer_scale.gamma - torch.Size([192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.mlp.conv.conv.weight - torch.Size([192, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.mlp.conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.mlp.conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.mlp.fc1.weight - torch.Size([576, 192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.mlp.fc1.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.mlp.fc2.weight - torch.Size([192, 576, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.mlp.fc2.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.1.layer_scale.gamma - torch.Size([192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.token_mixer.norm.identity.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.token_mixer.norm.identity.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.token_mixer.mixer.identity.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.token_mixer.mixer.identity.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.token_mixer.mixer.conv_kxk.0.conv.weight - torch.Size([192, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.token_mixer.mixer.conv_kxk.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.token_mixer.mixer.conv_kxk.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.token_mixer.mixer.conv_scale.conv.weight - torch.Size([192, 1, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.token_mixer.mixer.conv_scale.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.token_mixer.mixer.conv_scale.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.token_mixer.layer_scale.gamma - torch.Size([192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.mlp.conv.conv.weight - torch.Size([192, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.mlp.conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.mlp.conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.mlp.fc1.weight - torch.Size([576, 192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.mlp.fc1.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.mlp.fc2.weight - torch.Size([192, 576, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.mlp.fc2.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.2.layer_scale.gamma - torch.Size([192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.token_mixer.norm.identity.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.token_mixer.norm.identity.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.token_mixer.mixer.identity.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.token_mixer.mixer.identity.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.token_mixer.mixer.conv_kxk.0.conv.weight - torch.Size([192, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.token_mixer.mixer.conv_kxk.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.token_mixer.mixer.conv_kxk.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.token_mixer.mixer.conv_scale.conv.weight - torch.Size([192, 1, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.token_mixer.mixer.conv_scale.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.token_mixer.mixer.conv_scale.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.token_mixer.layer_scale.gamma - torch.Size([192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.mlp.conv.conv.weight - torch.Size([192, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.mlp.conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.mlp.conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.mlp.fc1.weight - torch.Size([576, 192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.mlp.fc1.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.mlp.fc2.weight - torch.Size([192, 576, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.mlp.fc2.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_2.blocks.3.layer_scale.gamma - torch.Size([192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.downsample.proj.0.large_conv.conv.weight - torch.Size([384, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.downsample.proj.0.large_conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.downsample.proj.0.large_conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.downsample.proj.0.small_conv.conv.weight - torch.Size([384, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.downsample.proj.0.small_conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.downsample.proj.0.small_conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.downsample.proj.1.identity.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.downsample.proj.1.identity.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.downsample.proj.1.conv_kxk.0.conv.weight - torch.Size([384, 384, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.downsample.proj.1.conv_kxk.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.downsample.proj.1.conv_kxk.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.token_mixer.norm.identity.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.token_mixer.norm.identity.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.token_mixer.mixer.identity.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.token_mixer.mixer.identity.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.token_mixer.mixer.conv_kxk.0.conv.weight - torch.Size([384, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.token_mixer.mixer.conv_kxk.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.token_mixer.mixer.conv_kxk.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.token_mixer.mixer.conv_scale.conv.weight - torch.Size([384, 1, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.token_mixer.mixer.conv_scale.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.token_mixer.mixer.conv_scale.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.token_mixer.layer_scale.gamma - torch.Size([384, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.mlp.conv.conv.weight - torch.Size([384, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.mlp.conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.mlp.conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.mlp.fc1.weight - torch.Size([1152, 384, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.mlp.fc1.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.mlp.fc2.weight - torch.Size([384, 1152, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.mlp.fc2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.0.layer_scale.gamma - torch.Size([384, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.token_mixer.norm.identity.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.token_mixer.norm.identity.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.token_mixer.mixer.identity.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.token_mixer.mixer.identity.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.token_mixer.mixer.conv_kxk.0.conv.weight - torch.Size([384, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.token_mixer.mixer.conv_kxk.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.token_mixer.mixer.conv_kxk.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.token_mixer.mixer.conv_scale.conv.weight - torch.Size([384, 1, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.token_mixer.mixer.conv_scale.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.token_mixer.mixer.conv_scale.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.token_mixer.layer_scale.gamma - torch.Size([384, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.mlp.conv.conv.weight - torch.Size([384, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.mlp.conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.mlp.conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.mlp.fc1.weight - torch.Size([1152, 384, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.mlp.fc1.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.mlp.fc2.weight - torch.Size([384, 1152, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.mlp.fc2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.timm_model.stages_3.blocks.1.layer_scale.gamma - torch.Size([384, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.conv_seg.weight - torch.Size([4, 128, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.convs.conv0.weight - torch.Size([32, 48, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.conv1.weight - torch.Size([64, 96, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.conv_ups.conv_up0.conv.weight - torch.Size([128, 160, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.conv_ups.conv_up0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.conv_ups.conv_up0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.conv_ups.conv_up1.conv.weight - torch.Size([128, 192, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.conv_ups.conv_up1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.conv_ups.conv_up1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.conv_up_input.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.conv_up_input.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_conv.conv.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.aspp_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.image_pool.1.conv.weight - torch.Size([128, 384, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2024/04/21 16:53:01 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2024/04/21 16:53:01 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2024/04/21 16:53:01 - mmengine - INFO - Checkpoints will be saved to /home/zhouruiliang/code/mmsegmentation-main/work_head_dirs/fastvit-irasppp-dist.
2024/04/21 16:53:16 - mmengine - INFO - Exp name: lraspp_fastvit_ful_20240421_165247
2024/04/21 16:53:16 - mmengine - INFO - Iter(train) [   14/20000]  lr: 9.9993e-03  eta: 6:06:24  time: 0.4193  data_time: 0.0127  memory: 7151  loss: 1.1214  decode.loss_ce: 1.1214  decode.acc_seg: 50.9745
2024/04/21 16:54:16 - mmengine - INFO - Iter(train) [  100/20000]  lr: 9.9945e-03  eta: 4:09:26  time: 0.6903  data_time: 0.0145  memory: 4205  loss: 0.7603  decode.loss_ce: 0.7603  decode.acc_seg: 68.3019
2024/04/21 16:55:25 - mmengine - INFO - Iter(train) [  200/20000]  lr: 9.9889e-03  eta: 3:57:22  time: 0.6253  data_time: 0.2510  memory: 4205  loss: 0.6906  decode.loss_ce: 0.6906  decode.acc_seg: 69.4164
2024/04/21 16:56:33 - mmengine - INFO - Iter(train) [  300/20000]  lr: 9.9833e-03  eta: 3:52:24  time: 0.6263  data_time: 0.0526  memory: 4205  loss: 0.6332  decode.loss_ce: 0.6332  decode.acc_seg: 82.4101
2024/04/21 16:57:41 - mmengine - INFO - Iter(train) [  400/20000]  lr: 9.9778e-03  eta: 3:49:09  time: 0.6319  data_time: 0.2543  memory: 4205  loss: 0.6253  decode.loss_ce: 0.6253  decode.acc_seg: 81.7777
2024/04/21 16:58:51 - mmengine - INFO - Iter(train) [  500/20000]  lr: 9.9722e-03  eta: 3:47:25  time: 0.7645  data_time: 0.3927  memory: 4205  loss: 0.6062  decode.loss_ce: 0.6062  decode.acc_seg: 86.3708
2024/04/21 16:58:54 - mmengine - INFO - per class results:
2024/04/21 16:58:54 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 90.08 | 97.15 | 94.78 | 94.78  |   92.53   | 97.15  |
| monolayer  | 61.57 | 78.15 | 76.22 | 76.22  |   74.38   | 78.15  |
|  bilayer   |  0.0  |  0.0  |  0.0  |  nan   |    0.0    |  0.0   |
| multilayer | 79.71 | 92.82 | 88.71 | 88.71  |   84.95   | 92.82  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 16:58:54 - mmengine - INFO - Iter(val) [8/8]    aAcc: 86.7100  mIoU: 57.8400  mAcc: 67.0300  mDice: 64.9300  mFscore: 86.5700  mPrecision: 62.9700  mRecall: 67.0300  data_time: 0.2101  time: 0.3730
2024/04/21 16:58:54 - mmengine - INFO - The best checkpoint with 57.8400 mIoU at 500 iter is saved to best_mIoU_iter_500.pth.
2024/04/21 16:59:59 - mmengine - INFO - Iter(train) [  600/20000]  lr: 9.9666e-03  eta: 3:43:48  time: 0.4959  data_time: 0.0157  memory: 4866  loss: 0.4641  decode.loss_ce: 0.4641  decode.acc_seg: 69.2203
2024/04/21 17:01:08 - mmengine - INFO - Iter(train) [  700/20000]  lr: 9.9611e-03  eta: 3:42:27  time: 0.7564  data_time: 0.1031  memory: 4209  loss: 0.4151  decode.loss_ce: 0.4151  decode.acc_seg: 76.5028
2024/04/21 17:02:15 - mmengine - INFO - Iter(train) [  800/20000]  lr: 9.9555e-03  eta: 3:40:42  time: 0.7419  data_time: 0.2626  memory: 4209  loss: 0.3759  decode.loss_ce: 0.3759  decode.acc_seg: 81.3336
2024/04/21 17:03:24 - mmengine - INFO - Iter(train) [  900/20000]  lr: 9.9499e-03  eta: 3:39:16  time: 0.6146  data_time: 0.0146  memory: 4209  loss: 0.4802  decode.loss_ce: 0.4802  decode.acc_seg: 89.3667
2024/04/21 17:04:30 - mmengine - INFO - Exp name: lraspp_fastvit_ful_20240421_165247
2024/04/21 17:04:30 - mmengine - INFO - Iter(train) [ 1000/20000]  lr: 9.9444e-03  eta: 3:37:29  time: 0.5572  data_time: 0.1795  memory: 4209  loss: 0.3996  decode.loss_ce: 0.3996  decode.acc_seg: 83.6208
2024/04/21 17:04:31 - mmengine - INFO - per class results:
2024/04/21 17:04:31 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 91.79 | 97.52 | 95.72 | 95.72  |   93.99   | 97.52  |
| monolayer  | 67.06 | 83.11 | 80.29 | 80.29  |   77.65   | 83.11  |
|  bilayer   |  4.33 |  4.69 |  8.29 |  8.29  |   35.93   |  4.69  |
| multilayer | 83.31 | 92.69 | 90.89 | 90.89  |   89.17   | 92.69  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 17:04:31 - mmengine - INFO - Iter(val) [8/8]    aAcc: 88.4900  mIoU: 61.6200  mAcc: 69.5000  mDice: 68.8000  mFscore: 68.8000  mPrecision: 74.1800  mRecall: 69.5000  data_time: 0.0154  time: 0.0528
2024/04/21 17:04:31 - mmengine - INFO - The previous best checkpoint /home/zhouruiliang/code/mmsegmentation-main/work_head_dirs/fastvit-irasppp-dist/best_mIoU_iter_500.pth is removed
2024/04/21 17:04:31 - mmengine - INFO - The best checkpoint with 61.6200 mIoU at 1000 iter is saved to best_mIoU_iter_1000.pth.
2024/04/21 17:05:39 - mmengine - INFO - Iter(train) [ 1100/20000]  lr: 9.9388e-03  eta: 3:36:11  time: 0.7457  data_time: 0.3400  memory: 4209  loss: 0.3228  decode.loss_ce: 0.3228  decode.acc_seg: 77.8451
2024/04/21 17:06:47 - mmengine - INFO - Iter(train) [ 1200/20000]  lr: 9.9332e-03  eta: 3:34:49  time: 0.6422  data_time: 0.2692  memory: 4207  loss: 0.3082  decode.loss_ce: 0.3082  decode.acc_seg: 89.2075
2024/04/21 17:07:55 - mmengine - INFO - Iter(train) [ 1300/20000]  lr: 9.9276e-03  eta: 3:33:39  time: 0.8082  data_time: 0.0173  memory: 4209  loss: 0.3600  decode.loss_ce: 0.3600  decode.acc_seg: 82.0050
2024/04/21 17:09:03 - mmengine - INFO - Iter(train) [ 1400/20000]  lr: 9.9221e-03  eta: 3:32:20  time: 0.8125  data_time: 0.4362  memory: 4209  loss: 0.2899  decode.loss_ce: 0.2899  decode.acc_seg: 94.1788
2024/04/21 17:10:10 - mmengine - INFO - Iter(train) [ 1500/20000]  lr: 9.9165e-03  eta: 3:30:57  time: 0.6876  data_time: 0.3108  memory: 4209  loss: 0.3069  decode.loss_ce: 0.3069  decode.acc_seg: 94.5007
2024/04/21 17:10:11 - mmengine - INFO - per class results:
2024/04/21 17:10:11 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 92.46 | 95.82 | 96.08 | 96.08  |   96.34   | 95.82  |
| monolayer  | 75.41 | 89.55 | 85.98 | 85.98  |   82.69   | 89.55  |
|  bilayer   | 48.79 | 54.61 | 65.59 | 65.59  |   82.08   | 54.61  |
| multilayer | 86.53 | 91.77 | 92.78 | 92.78  |   93.81   | 91.77  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 17:10:11 - mmengine - INFO - Iter(val) [8/8]    aAcc: 91.6800  mIoU: 75.8000  mAcc: 82.9400  mDice: 85.1100  mFscore: 85.1100  mPrecision: 88.7300  mRecall: 82.9400  data_time: 0.0177  time: 0.0551
2024/04/21 17:10:11 - mmengine - INFO - The previous best checkpoint /home/zhouruiliang/code/mmsegmentation-main/work_head_dirs/fastvit-irasppp-dist/best_mIoU_iter_1000.pth is removed
2024/04/21 17:10:12 - mmengine - INFO - The best checkpoint with 75.8000 mIoU at 1500 iter is saved to best_mIoU_iter_1500.pth.
2024/04/21 17:11:16 - mmengine - INFO - Iter(train) [ 1600/20000]  lr: 9.9109e-03  eta: 3:29:07  time: 0.5987  data_time: 0.0206  memory: 4209  loss: 0.3176  decode.loss_ce: 0.3176  decode.acc_seg: 74.3747
2024/04/21 17:12:24 - mmengine - INFO - Iter(train) [ 1700/20000]  lr: 9.9053e-03  eta: 3:27:56  time: 0.7025  data_time: 0.3237  memory: 4209  loss: 0.3018  decode.loss_ce: 0.3018  decode.acc_seg: 85.7436
2024/04/21 17:13:30 - mmengine - INFO - Iter(train) [ 1800/20000]  lr: 9.8998e-03  eta: 3:26:34  time: 0.6716  data_time: 0.0922  memory: 4209  loss: 0.2326  decode.loss_ce: 0.2326  decode.acc_seg: 95.2244
2024/04/21 17:14:36 - mmengine - INFO - Iter(train) [ 1900/20000]  lr: 9.8942e-03  eta: 3:25:07  time: 0.5731  data_time: 0.1794  memory: 4208  loss: 0.2860  decode.loss_ce: 0.2860  decode.acc_seg: 95.0170
2024/04/21 17:15:44 - mmengine - INFO - Exp name: lraspp_fastvit_ful_20240421_165247
2024/04/21 17:15:44 - mmengine - INFO - Iter(train) [ 2000/20000]  lr: 9.8886e-03  eta: 3:23:52  time: 0.6415  data_time: 0.2446  memory: 4209  loss: 0.3240  decode.loss_ce: 0.3240  decode.acc_seg: 93.0493
2024/04/21 17:15:44 - mmengine - INFO - per class results:
2024/04/21 17:15:44 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 92.35 | 96.56 | 96.02 | 96.02  |   95.49   | 96.56  |
| monolayer  | 76.45 | 87.14 | 86.65 | 86.65  |   86.17   | 87.14  |
|  bilayer   | 60.89 |  67.9 | 75.69 | 75.69  |    85.5   |  67.9  |
| multilayer | 85.26 | 92.49 | 92.04 | 92.04  |    91.6   | 92.49  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 17:15:44 - mmengine - INFO - Iter(val) [8/8]    aAcc: 92.2200  mIoU: 78.7400  mAcc: 86.0200  mDice: 87.6000  mFscore: 87.6000  mPrecision: 89.6900  mRecall: 86.0200  data_time: 0.0147  time: 0.0516
2024/04/21 17:15:44 - mmengine - INFO - The previous best checkpoint /home/zhouruiliang/code/mmsegmentation-main/work_head_dirs/fastvit-irasppp-dist/best_mIoU_iter_1500.pth is removed
2024/04/21 17:15:45 - mmengine - INFO - The best checkpoint with 78.7400 mIoU at 2000 iter is saved to best_mIoU_iter_2000.pth.
2024/04/21 17:16:52 - mmengine - INFO - Iter(train) [ 2100/20000]  lr: 9.8830e-03  eta: 3:22:43  time: 0.5970  data_time: 0.2223  memory: 4208  loss: 0.4594  decode.loss_ce: 0.4594  decode.acc_seg: 87.7483
2024/04/21 17:18:00 - mmengine - INFO - Iter(train) [ 2200/20000]  lr: 9.8775e-03  eta: 3:21:34  time: 0.6215  data_time: 0.2222  memory: 4208  loss: 0.3173  decode.loss_ce: 0.3173  decode.acc_seg: 92.0544
2024/04/21 17:19:07 - mmengine - INFO - Iter(train) [ 2300/20000]  lr: 9.8719e-03  eta: 3:20:23  time: 0.7028  data_time: 0.2264  memory: 4209  loss: 0.3048  decode.loss_ce: 0.3048  decode.acc_seg: 91.7009
2024/04/21 17:20:16 - mmengine - INFO - Iter(train) [ 2400/20000]  lr: 9.8663e-03  eta: 3:19:19  time: 0.7408  data_time: 0.0121  memory: 4207  loss: 0.3050  decode.loss_ce: 0.3050  decode.acc_seg: 88.1399
2024/04/21 17:21:23 - mmengine - INFO - Iter(train) [ 2500/20000]  lr: 9.8607e-03  eta: 3:18:09  time: 0.6191  data_time: 0.0154  memory: 4209  loss: 0.2158  decode.loss_ce: 0.2158  decode.acc_seg: 82.1475
2024/04/21 17:21:23 - mmengine - INFO - Saving checkpoint at 2500 iterations
2024/04/21 17:21:24 - mmengine - INFO - per class results:
2024/04/21 17:21:24 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 95.29 | 98.36 | 97.59 | 97.59  |   96.83   | 98.36  |
| monolayer  | 81.44 | 89.62 | 89.77 | 89.77  |   89.92   | 89.62  |
|  bilayer   | 58.37 | 67.12 | 73.71 | 73.71  |   81.74   | 67.12  |
| multilayer | 85.08 |  92.3 | 91.94 | 91.94  |   91.58   |  92.3  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 17:21:24 - mmengine - INFO - Iter(val) [8/8]    aAcc: 93.9000  mIoU: 80.0500  mAcc: 86.8500  mDice: 88.2500  mFscore: 88.2500  mPrecision: 90.0200  mRecall: 86.8500  data_time: 0.0123  time: 0.0486
2024/04/21 17:21:24 - mmengine - INFO - The previous best checkpoint /home/zhouruiliang/code/mmsegmentation-main/work_head_dirs/fastvit-irasppp-dist/best_mIoU_iter_2000.pth is removed
2024/04/21 17:21:25 - mmengine - INFO - The best checkpoint with 80.0500 mIoU at 2500 iter is saved to best_mIoU_iter_2500.pth.
2024/04/21 17:22:32 - mmengine - INFO - Iter(train) [ 2600/20000]  lr: 9.8551e-03  eta: 3:16:59  time: 0.8158  data_time: 0.4156  memory: 4208  loss: 0.3146  decode.loss_ce: 0.3146  decode.acc_seg: 93.3954
2024/04/21 17:23:40 - mmengine - INFO - Iter(train) [ 2700/20000]  lr: 9.8496e-03  eta: 3:15:53  time: 0.7037  data_time: 0.2960  memory: 4208  loss: 0.2465  decode.loss_ce: 0.2465  decode.acc_seg: 92.7547
2024/04/21 17:24:48 - mmengine - INFO - Iter(train) [ 2800/20000]  lr: 9.8440e-03  eta: 3:14:47  time: 0.7472  data_time: 0.0651  memory: 4208  loss: 0.2022  decode.loss_ce: 0.2022  decode.acc_seg: 91.7961
2024/04/21 17:25:58 - mmengine - INFO - Iter(train) [ 2900/20000]  lr: 9.8384e-03  eta: 3:13:50  time: 0.8197  data_time: 0.0195  memory: 4208  loss: 0.2465  decode.loss_ce: 0.2465  decode.acc_seg: 94.5351
2024/04/21 17:27:04 - mmengine - INFO - Exp name: lraspp_fastvit_ful_20240421_165247
2024/04/21 17:27:04 - mmengine - INFO - Iter(train) [ 3000/20000]  lr: 9.8328e-03  eta: 3:12:29  time: 0.6031  data_time: 0.0197  memory: 4209  loss: 0.2525  decode.loss_ce: 0.2525  decode.acc_seg: 90.7399
2024/04/21 17:27:04 - mmengine - INFO - per class results:
2024/04/21 17:27:04 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 84.82 | 86.56 | 91.79 | 91.79  |   97.68   | 86.56  |
| monolayer  | 66.51 | 92.25 | 79.88 | 79.88  |   70.44   | 92.25  |
|  bilayer   | 48.38 | 55.59 | 65.21 | 65.21  |   78.86   | 55.59  |
| multilayer | 85.13 | 91.98 | 91.97 | 91.97  |   91.96   | 91.98  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 17:27:04 - mmengine - INFO - Iter(val) [8/8]    aAcc: 86.9600  mIoU: 71.2100  mAcc: 81.5900  mDice: 82.2100  mFscore: 82.2100  mPrecision: 84.7300  mRecall: 81.5900  data_time: 0.0158  time: 0.0528
2024/04/21 17:28:11 - mmengine - INFO - Iter(train) [ 3100/20000]  lr: 9.8273e-03  eta: 3:11:14  time: 0.5180  data_time: 0.1210  memory: 4207  loss: 0.3421  decode.loss_ce: 0.3421  decode.acc_seg: 85.6032
2024/04/21 17:29:19 - mmengine - INFO - Iter(train) [ 3200/20000]  lr: 9.8217e-03  eta: 3:10:08  time: 0.6816  data_time: 0.2804  memory: 4208  loss: 0.2033  decode.loss_ce: 0.2033  decode.acc_seg: 96.2473
2024/04/21 17:30:27 - mmengine - INFO - Iter(train) [ 3300/20000]  lr: 9.8161e-03  eta: 3:08:59  time: 0.6560  data_time: 0.2764  memory: 4209  loss: 0.3043  decode.loss_ce: 0.3043  decode.acc_seg: 94.8223
2024/04/21 17:31:35 - mmengine - INFO - Iter(train) [ 3400/20000]  lr: 9.8105e-03  eta: 3:07:52  time: 0.6858  data_time: 0.3100  memory: 4209  loss: 0.2317  decode.loss_ce: 0.2317  decode.acc_seg: 89.1081
2024/04/21 17:32:44 - mmengine - INFO - Iter(train) [ 3500/20000]  lr: 9.8049e-03  eta: 3:06:50  time: 0.6573  data_time: 0.0180  memory: 4207  loss: 0.2787  decode.loss_ce: 0.2787  decode.acc_seg: 75.5569
2024/04/21 17:32:45 - mmengine - INFO - per class results:
2024/04/21 17:32:45 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 91.22 | 94.24 | 95.41 | 95.41  |   96.61   | 94.24  |
| monolayer  | 74.65 | 89.64 | 85.48 | 85.48  |    81.7   | 89.64  |
|  bilayer   | 53.33 | 63.16 | 69.56 | 69.56  |    77.4   | 63.16  |
| multilayer | 83.82 | 90.15 |  91.2 |  91.2  |   92.27   | 90.15  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 17:32:45 - mmengine - INFO - Iter(val) [8/8]    aAcc: 91.0600  mIoU: 75.7500  mAcc: 84.3000  mDice: 85.4100  mFscore: 85.4100  mPrecision: 86.9900  mRecall: 84.3000  data_time: 0.0160  time: 0.0531
2024/04/21 17:33:52 - mmengine - INFO - Iter(train) [ 3600/20000]  lr: 9.7994e-03  eta: 3:05:41  time: 0.7479  data_time: 0.2377  memory: 4208  loss: 0.3024  decode.loss_ce: 0.3024  decode.acc_seg: 81.8173
2024/04/21 17:35:02 - mmengine - INFO - Iter(train) [ 3700/20000]  lr: 9.7938e-03  eta: 3:04:39  time: 0.7108  data_time: 0.0202  memory: 4209  loss: 0.2257  decode.loss_ce: 0.2257  decode.acc_seg: 86.7470
2024/04/21 17:36:09 - mmengine - INFO - Iter(train) [ 3800/20000]  lr: 9.7882e-03  eta: 3:03:30  time: 0.6357  data_time: 0.2609  memory: 4207  loss: 0.3323  decode.loss_ce: 0.3323  decode.acc_seg: 87.3045
2024/04/21 17:37:19 - mmengine - INFO - Iter(train) [ 3900/20000]  lr: 9.7826e-03  eta: 3:02:28  time: 0.7130  data_time: 0.2755  memory: 4208  loss: 0.1864  decode.loss_ce: 0.1864  decode.acc_seg: 95.7041
2024/04/21 17:38:26 - mmengine - INFO - Exp name: lraspp_fastvit_ful_20240421_165247
2024/04/21 17:38:26 - mmengine - INFO - Iter(train) [ 4000/20000]  lr: 9.7770e-03  eta: 3:01:17  time: 0.5998  data_time: 0.1938  memory: 4208  loss: 0.1999  decode.loss_ce: 0.1999  decode.acc_seg: 91.0183
2024/04/21 17:38:27 - mmengine - INFO - per class results:
2024/04/21 17:38:27 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 89.85 | 94.25 | 94.65 | 94.65  |   95.06   | 94.25  |
| monolayer  | 73.11 | 85.85 | 84.47 | 84.47  |   83.13   | 85.85  |
|  bilayer   | 66.61 | 77.17 | 79.96 | 79.96  |   82.96   | 77.17  |
| multilayer |  87.2 | 93.11 | 93.16 | 93.16  |   93.22   | 93.11  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 17:38:27 - mmengine - INFO - Iter(val) [8/8]    aAcc: 91.0300  mIoU: 79.1900  mAcc: 87.5900  mDice: 88.0600  mFscore: 88.0600  mPrecision: 88.5900  mRecall: 87.5900  data_time: 0.0154  time: 0.0522
2024/04/21 17:39:35 - mmengine - INFO - Iter(train) [ 4100/20000]  lr: 9.7714e-03  eta: 3:00:11  time: 0.6256  data_time: 0.0147  memory: 4209  loss: 0.2281  decode.loss_ce: 0.2281  decode.acc_seg: 95.2554
2024/04/21 17:40:42 - mmengine - INFO - Iter(train) [ 4200/20000]  lr: 9.7659e-03  eta: 2:59:01  time: 0.6980  data_time: 0.1247  memory: 4207  loss: 0.1986  decode.loss_ce: 0.1986  decode.acc_seg: 94.5486
2024/04/21 17:41:50 - mmengine - INFO - Iter(train) [ 4300/20000]  lr: 9.7603e-03  eta: 2:57:51  time: 0.7332  data_time: 0.2456  memory: 4208  loss: 0.1891  decode.loss_ce: 0.1891  decode.acc_seg: 89.8895
2024/04/21 17:42:57 - mmengine - INFO - Iter(train) [ 4400/20000]  lr: 9.7547e-03  eta: 2:56:41  time: 0.6214  data_time: 0.1765  memory: 4207  loss: 0.2634  decode.loss_ce: 0.2634  decode.acc_seg: 75.6151
2024/04/21 17:44:02 - mmengine - INFO - Iter(train) [ 4500/20000]  lr: 9.7491e-03  eta: 2:55:23  time: 0.5435  data_time: 0.1670  memory: 4209  loss: 0.1801  decode.loss_ce: 0.1801  decode.acc_seg: 87.2257
2024/04/21 17:44:03 - mmengine - INFO - per class results:
2024/04/21 17:44:03 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 94.38 | 97.25 | 97.11 | 97.11  |   96.98   | 97.25  |
| monolayer  | 81.78 | 89.07 | 89.98 | 89.98  |   90.91   | 89.07  |
|  bilayer   | 64.99 | 85.59 | 78.78 | 78.78  |   72.98   | 85.59  |
| multilayer | 85.58 | 89.49 | 92.23 | 92.23  |   95.14   | 89.49  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 17:44:03 - mmengine - INFO - Iter(val) [8/8]    aAcc: 93.7900  mIoU: 81.6800  mAcc: 90.3500  mDice: 89.5300  mFscore: 89.5300  mPrecision: 89.0000  mRecall: 90.3500  data_time: 0.0163  time: 0.0544
2024/04/21 17:44:03 - mmengine - INFO - The previous best checkpoint /home/zhouruiliang/code/mmsegmentation-main/work_head_dirs/fastvit-irasppp-dist/best_mIoU_iter_2500.pth is removed
2024/04/21 17:44:03 - mmengine - INFO - The best checkpoint with 81.6800 mIoU at 4500 iter is saved to best_mIoU_iter_4500.pth.
2024/04/21 17:45:10 - mmengine - INFO - Iter(train) [ 4600/20000]  lr: 9.7435e-03  eta: 2:54:14  time: 0.5414  data_time: 0.0638  memory: 4209  loss: 0.2111  decode.loss_ce: 0.2111  decode.acc_seg: 96.9960
2024/04/21 17:46:20 - mmengine - INFO - Iter(train) [ 4700/20000]  lr: 9.7379e-03  eta: 2:53:13  time: 0.6797  data_time: 0.0204  memory: 4209  loss: 0.1924  decode.loss_ce: 0.1924  decode.acc_seg: 94.1450
2024/04/21 17:47:29 - mmengine - INFO - Iter(train) [ 4800/20000]  lr: 9.7323e-03  eta: 2:52:06  time: 0.6906  data_time: 0.0143  memory: 4208  loss: 0.2048  decode.loss_ce: 0.2048  decode.acc_seg: 96.4158
2024/04/21 17:48:36 - mmengine - INFO - Iter(train) [ 4900/20000]  lr: 9.7268e-03  eta: 2:50:57  time: 0.7403  data_time: 0.0160  memory: 4209  loss: 0.2433  decode.loss_ce: 0.2433  decode.acc_seg: 87.8228
2024/04/21 17:49:45 - mmengine - INFO - Exp name: lraspp_fastvit_ful_20240421_165247
2024/04/21 17:49:45 - mmengine - INFO - Iter(train) [ 5000/20000]  lr: 9.7212e-03  eta: 2:49:51  time: 0.6796  data_time: 0.0414  memory: 4209  loss: 0.2014  decode.loss_ce: 0.2014  decode.acc_seg: 87.6112
2024/04/21 17:49:45 - mmengine - INFO - Saving checkpoint at 5000 iterations
2024/04/21 17:49:46 - mmengine - INFO - per class results:
2024/04/21 17:49:46 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 93.07 | 97.04 | 96.41 | 96.41  |   95.78   | 97.04  |
| monolayer  | 77.49 | 89.12 | 87.32 | 87.32  |   85.58   | 89.12  |
|  bilayer   | 52.01 | 61.24 | 68.43 | 68.43  |   77.53   | 61.24  |
| multilayer | 85.15 | 87.65 | 91.98 | 91.98  |   96.77   | 87.65  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 17:49:46 - mmengine - INFO - Iter(val) [8/8]    aAcc: 92.2800  mIoU: 76.9300  mAcc: 83.7600  mDice: 86.0300  mFscore: 86.0300  mPrecision: 88.9200  mRecall: 83.7600  data_time: 0.0120  time: 0.0487
2024/04/21 17:50:54 - mmengine - INFO - Iter(train) [ 5100/20000]  lr: 9.7156e-03  eta: 2:48:45  time: 0.7600  data_time: 0.0192  memory: 4209  loss: 0.2276  decode.loss_ce: 0.2276  decode.acc_seg: 92.5756
2024/04/21 17:52:02 - mmengine - INFO - Iter(train) [ 5200/20000]  lr: 9.7100e-03  eta: 2:47:36  time: 0.5853  data_time: 0.0151  memory: 4208  loss: 0.1881  decode.loss_ce: 0.1881  decode.acc_seg: 91.2405
2024/04/21 17:53:10 - mmengine - INFO - Iter(train) [ 5300/20000]  lr: 9.7044e-03  eta: 2:46:28  time: 0.7680  data_time: 0.0174  memory: 4209  loss: 0.1841  decode.loss_ce: 0.1841  decode.acc_seg: 95.1402
2024/04/21 17:54:17 - mmengine - INFO - Iter(train) [ 5400/20000]  lr: 9.6988e-03  eta: 2:45:18  time: 0.7894  data_time: 0.0711  memory: 4208  loss: 0.1844  decode.loss_ce: 0.1844  decode.acc_seg: 92.4153
2024/04/21 17:55:25 - mmengine - INFO - Iter(train) [ 5500/20000]  lr: 9.6932e-03  eta: 2:44:08  time: 0.6680  data_time: 0.2651  memory: 4209  loss: 0.1775  decode.loss_ce: 0.1775  decode.acc_seg: 92.0182
2024/04/21 17:55:25 - mmengine - INFO - per class results:
2024/04/21 17:55:25 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 95.48 | 98.28 | 97.69 | 97.69  |    97.1   | 98.28  |
| monolayer  | 84.44 | 90.93 | 91.56 | 91.56  |   92.21   | 90.93  |
|  bilayer   | 71.54 | 81.25 | 83.41 | 83.41  |   85.69   | 81.25  |
| multilayer | 87.18 | 92.66 | 93.15 | 93.15  |   93.65   | 92.66  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 17:55:25 - mmengine - INFO - Iter(val) [8/8]    aAcc: 94.9600  mIoU: 84.6600  mAcc: 90.7800  mDice: 91.4500  mFscore: 91.4500  mPrecision: 92.1600  mRecall: 90.7800  data_time: 0.0145  time: 0.0524
2024/04/21 17:55:25 - mmengine - INFO - The previous best checkpoint /home/zhouruiliang/code/mmsegmentation-main/work_head_dirs/fastvit-irasppp-dist/best_mIoU_iter_4500.pth is removed
2024/04/21 17:55:25 - mmengine - INFO - The best checkpoint with 84.6600 mIoU at 5500 iter is saved to best_mIoU_iter_5500.pth.
2024/04/21 17:56:33 - mmengine - INFO - Iter(train) [ 5600/20000]  lr: 9.6877e-03  eta: 2:43:02  time: 0.6560  data_time: 0.2471  memory: 4208  loss: 0.2296  decode.loss_ce: 0.2296  decode.acc_seg: 90.6402
2024/04/21 17:57:40 - mmengine - INFO - Iter(train) [ 5700/20000]  lr: 9.6821e-03  eta: 2:41:51  time: 0.5997  data_time: 0.0155  memory: 4209  loss: 0.2607  decode.loss_ce: 0.2607  decode.acc_seg: 82.1993
2024/04/21 17:58:50 - mmengine - INFO - Iter(train) [ 5800/20000]  lr: 9.6765e-03  eta: 2:40:47  time: 0.7555  data_time: 0.2798  memory: 4209  loss: 0.1638  decode.loss_ce: 0.1638  decode.acc_seg: 96.6973
2024/04/21 17:59:57 - mmengine - INFO - Iter(train) [ 5900/20000]  lr: 9.6709e-03  eta: 2:39:39  time: 0.7047  data_time: 0.0234  memory: 4209  loss: 0.2552  decode.loss_ce: 0.2552  decode.acc_seg: 96.0660
2024/04/21 18:01:07 - mmengine - INFO - Exp name: lraspp_fastvit_ful_20240421_165247
2024/04/21 18:01:07 - mmengine - INFO - Iter(train) [ 6000/20000]  lr: 9.6653e-03  eta: 2:38:34  time: 0.7457  data_time: 0.0193  memory: 4208  loss: 0.1597  decode.loss_ce: 0.1597  decode.acc_seg: 96.0247
2024/04/21 18:01:07 - mmengine - INFO - per class results:
2024/04/21 18:01:07 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 92.87 | 97.17 |  96.3 |  96.3  |   95.45   | 97.17  |
| monolayer  | 78.16 | 87.82 | 87.74 | 87.74  |   87.67   | 87.82  |
|  bilayer   | 58.05 | 71.07 | 73.46 | 73.46  |    76.0   | 71.07  |
| multilayer | 84.56 | 87.48 | 91.64 | 91.64  |   96.21   | 87.48  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 18:01:07 - mmengine - INFO - Iter(val) [8/8]    aAcc: 92.4900  mIoU: 78.4100  mAcc: 85.8900  mDice: 87.2800  mFscore: 87.2800  mPrecision: 88.8300  mRecall: 85.8900  data_time: 0.0174  time: 0.0551
2024/04/21 18:02:14 - mmengine - INFO - Iter(train) [ 6100/20000]  lr: 9.6597e-03  eta: 2:37:24  time: 0.5975  data_time: 0.2207  memory: 4209  loss: 0.1799  decode.loss_ce: 0.1799  decode.acc_seg: 97.1430
2024/04/21 18:03:20 - mmengine - INFO - Iter(train) [ 6200/20000]  lr: 9.6541e-03  eta: 2:36:11  time: 0.5951  data_time: 0.1324  memory: 4208  loss: 0.1517  decode.loss_ce: 0.1517  decode.acc_seg: 95.4796
2024/04/21 18:04:28 - mmengine - INFO - Iter(train) [ 6300/20000]  lr: 9.6485e-03  eta: 2:35:04  time: 0.6131  data_time: 0.1643  memory: 4209  loss: 0.1790  decode.loss_ce: 0.1790  decode.acc_seg: 94.6505
2024/04/21 18:05:39 - mmengine - INFO - Iter(train) [ 6400/20000]  lr: 9.6429e-03  eta: 2:34:01  time: 0.6510  data_time: 0.0131  memory: 4209  loss: 0.1667  decode.loss_ce: 0.1667  decode.acc_seg: 93.1451
2024/04/21 18:06:46 - mmengine - INFO - Iter(train) [ 6500/20000]  lr: 9.6373e-03  eta: 2:32:52  time: 0.6624  data_time: 0.0423  memory: 4209  loss: 0.2669  decode.loss_ce: 0.2669  decode.acc_seg: 96.8961
2024/04/21 18:06:46 - mmengine - INFO - per class results:
2024/04/21 18:06:46 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 93.18 | 95.84 | 96.47 | 96.47  |    97.1   | 95.84  |
| monolayer  | 79.63 | 89.18 | 88.66 | 88.66  |   88.14   | 89.18  |
|  bilayer   | 67.58 | 84.63 | 80.65 | 80.65  |   77.03   | 84.63  |
| multilayer | 83.93 | 90.98 | 91.26 | 91.26  |   91.54   | 90.98  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 18:06:46 - mmengine - INFO - Iter(val) [8/8]    aAcc: 93.0700  mIoU: 81.0800  mAcc: 90.1600  mDice: 89.2600  mFscore: 89.2600  mPrecision: 88.4500  mRecall: 90.1600  data_time: 0.0144  time: 0.0511
2024/04/21 18:07:55 - mmengine - INFO - Iter(train) [ 6600/20000]  lr: 9.6317e-03  eta: 2:31:44  time: 0.6456  data_time: 0.1178  memory: 4209  loss: 0.1676  decode.loss_ce: 0.1676  decode.acc_seg: 97.2616
2024/04/21 18:09:03 - mmengine - INFO - Iter(train) [ 6700/20000]  lr: 9.6262e-03  eta: 2:30:38  time: 0.8501  data_time: 0.4745  memory: 4208  loss: 0.2016  decode.loss_ce: 0.2016  decode.acc_seg: 85.1358
2024/04/21 18:10:10 - mmengine - INFO - Iter(train) [ 6800/20000]  lr: 9.6206e-03  eta: 2:29:28  time: 0.7517  data_time: 0.0425  memory: 4207  loss: 0.1837  decode.loss_ce: 0.1837  decode.acc_seg: 92.9578
2024/04/21 18:11:19 - mmengine - INFO - Iter(train) [ 6900/20000]  lr: 9.6150e-03  eta: 2:28:22  time: 0.7130  data_time: 0.1870  memory: 4208  loss: 0.1723  decode.loss_ce: 0.1723  decode.acc_seg: 90.0092
2024/04/21 18:12:27 - mmengine - INFO - Exp name: lraspp_fastvit_ful_20240421_165247
2024/04/21 18:12:27 - mmengine - INFO - Iter(train) [ 7000/20000]  lr: 9.6094e-03  eta: 2:27:13  time: 0.6856  data_time: 0.0166  memory: 4208  loss: 0.2014  decode.loss_ce: 0.2014  decode.acc_seg: 92.3040
2024/04/21 18:12:27 - mmengine - INFO - per class results:
2024/04/21 18:12:27 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 91.52 | 95.24 | 95.57 | 95.57  |   95.91   | 95.24  |
| monolayer  | 76.83 | 87.55 |  86.9 |  86.9  |   86.26   | 87.55  |
|  bilayer   | 68.84 |  85.2 | 81.54 | 81.54  |   78.19   |  85.2  |
| multilayer | 85.83 |  90.0 | 92.38 | 92.38  |   94.88   |  90.0  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 18:12:27 - mmengine - INFO - Iter(val) [8/8]    aAcc: 92.2100  mIoU: 80.7600  mAcc: 89.5000  mDice: 89.1000  mFscore: 89.1000  mPrecision: 88.8100  mRecall: 89.5000  data_time: 0.0167  time: 0.0541
2024/04/21 18:13:35 - mmengine - INFO - Iter(train) [ 7100/20000]  lr: 9.6038e-03  eta: 2:26:04  time: 0.6914  data_time: 0.3041  memory: 4209  loss: 0.1597  decode.loss_ce: 0.1597  decode.acc_seg: 95.7957
2024/04/21 18:14:41 - mmengine - INFO - Iter(train) [ 7200/20000]  lr: 9.5982e-03  eta: 2:24:53  time: 0.6409  data_time: 0.0198  memory: 4208  loss: 0.1502  decode.loss_ce: 0.1502  decode.acc_seg: 95.1115
2024/04/21 18:15:48 - mmengine - INFO - Iter(train) [ 7300/20000]  lr: 9.5926e-03  eta: 2:23:45  time: 0.6278  data_time: 0.0190  memory: 4209  loss: 0.2179  decode.loss_ce: 0.2179  decode.acc_seg: 90.5187
2024/04/21 18:16:55 - mmengine - INFO - Iter(train) [ 7400/20000]  lr: 9.5870e-03  eta: 2:22:35  time: 0.7532  data_time: 0.2931  memory: 4209  loss: 0.1518  decode.loss_ce: 0.1518  decode.acc_seg: 90.5537
2024/04/21 18:18:03 - mmengine - INFO - Iter(train) [ 7500/20000]  lr: 9.5814e-03  eta: 2:21:27  time: 0.6855  data_time: 0.0186  memory: 4207  loss: 0.2021  decode.loss_ce: 0.2021  decode.acc_seg: 94.0924
2024/04/21 18:18:03 - mmengine - INFO - Saving checkpoint at 7500 iterations
2024/04/21 18:18:04 - mmengine - INFO - per class results:
2024/04/21 18:18:04 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 92.62 | 95.79 | 96.17 | 96.17  |   96.55   | 95.79  |
| monolayer  | 77.03 | 89.29 | 87.02 | 87.02  |   84.87   | 89.29  |
|  bilayer   | 53.27 | 61.68 | 69.51 | 69.51  |   79.62   | 61.68  |
| multilayer | 86.46 | 93.99 | 92.74 | 92.74  |   91.52   | 93.99  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 18:18:04 - mmengine - INFO - Iter(val) [8/8]    aAcc: 92.1400  mIoU: 77.3400  mAcc: 85.1900  mDice: 86.3600  mFscore: 86.3600  mPrecision: 88.1400  mRecall: 85.1900  data_time: 0.0077  time: 0.0450
2024/04/21 18:19:12 - mmengine - INFO - Iter(train) [ 7600/20000]  lr: 9.5758e-03  eta: 2:20:18  time: 0.6137  data_time: 0.2347  memory: 4209  loss: 0.2372  decode.loss_ce: 0.2372  decode.acc_seg: 93.1030
2024/04/21 18:20:20 - mmengine - INFO - Iter(train) [ 7700/20000]  lr: 9.5702e-03  eta: 2:19:11  time: 0.7486  data_time: 0.3678  memory: 4209  loss: 0.1871  decode.loss_ce: 0.1871  decode.acc_seg: 96.0204
2024/04/21 18:21:26 - mmengine - INFO - Iter(train) [ 7800/20000]  lr: 9.5646e-03  eta: 2:18:01  time: 0.6269  data_time: 0.0172  memory: 4209  loss: 0.1743  decode.loss_ce: 0.1743  decode.acc_seg: 91.6018
2024/04/21 18:22:35 - mmengine - INFO - Iter(train) [ 7900/20000]  lr: 9.5590e-03  eta: 2:16:54  time: 0.6428  data_time: 0.2690  memory: 4208  loss: 0.1734  decode.loss_ce: 0.1734  decode.acc_seg: 89.6499
2024/04/21 18:23:44 - mmengine - INFO - Exp name: lraspp_fastvit_ful_20240421_165247
2024/04/21 18:23:44 - mmengine - INFO - Iter(train) [ 8000/20000]  lr: 9.5534e-03  eta: 2:15:47  time: 0.6893  data_time: 0.2870  memory: 4207  loss: 0.1507  decode.loss_ce: 0.1507  decode.acc_seg: 90.9842
2024/04/21 18:23:44 - mmengine - INFO - per class results:
2024/04/21 18:23:44 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 93.65 | 97.23 | 96.72 | 96.72  |   96.22   | 97.23  |
| monolayer  | 79.07 | 90.04 | 88.31 | 88.31  |   86.65   | 90.04  |
|  bilayer   | 55.17 | 63.82 | 71.11 | 71.11  |   80.27   | 63.82  |
| multilayer | 86.23 | 89.29 |  92.6 |  92.6  |   96.18   | 89.29  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 18:23:44 - mmengine - INFO - Iter(val) [8/8]    aAcc: 92.9100  mIoU: 78.5300  mAcc: 85.0900  mDice: 87.1900  mFscore: 87.1900  mPrecision: 89.8300  mRecall: 85.0900  data_time: 0.0171  time: 0.0538
2024/04/21 18:24:51 - mmengine - INFO - Iter(train) [ 8100/20000]  lr: 9.5478e-03  eta: 2:14:38  time: 0.5879  data_time: 0.2118  memory: 4209  loss: 0.1577  decode.loss_ce: 0.1577  decode.acc_seg: 95.4823
2024/04/21 18:25:59 - mmengine - INFO - Iter(train) [ 8200/20000]  lr: 9.5422e-03  eta: 2:13:30  time: 0.7307  data_time: 0.1518  memory: 4207  loss: 0.1764  decode.loss_ce: 0.1764  decode.acc_seg: 95.2732
2024/04/21 18:27:07 - mmengine - INFO - Iter(train) [ 8300/20000]  lr: 9.5366e-03  eta: 2:12:23  time: 0.6316  data_time: 0.0375  memory: 4209  loss: 0.1757  decode.loss_ce: 0.1757  decode.acc_seg: 90.8943
2024/04/21 18:28:17 - mmengine - INFO - Iter(train) [ 8400/20000]  lr: 9.5310e-03  eta: 2:11:17  time: 0.7262  data_time: 0.0749  memory: 4209  loss: 0.2159  decode.loss_ce: 0.2159  decode.acc_seg: 89.9352
2024/04/21 18:29:26 - mmengine - INFO - Iter(train) [ 8500/20000]  lr: 9.5254e-03  eta: 2:10:11  time: 0.7340  data_time: 0.0126  memory: 4208  loss: 0.1457  decode.loss_ce: 0.1457  decode.acc_seg: 95.6658
2024/04/21 18:29:26 - mmengine - INFO - per class results:
2024/04/21 18:29:26 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 92.74 | 94.83 | 96.23 | 96.23  |   97.68   | 94.83  |
| monolayer  | 79.96 | 91.47 | 88.87 | 88.87  |    86.4   | 91.47  |
|  bilayer   | 65.04 | 87.61 | 78.82 | 78.82  |   71.63   | 87.61  |
| multilayer | 85.22 | 86.83 | 92.02 | 92.02  |   97.87   | 86.83  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 18:29:26 - mmengine - INFO - Iter(val) [8/8]    aAcc: 92.8700  mIoU: 80.7400  mAcc: 90.1800  mDice: 88.9800  mFscore: 88.9800  mPrecision: 88.4000  mRecall: 90.1800  data_time: 0.0164  time: 0.0532
2024/04/21 18:30:34 - mmengine - INFO - Iter(train) [ 8600/20000]  lr: 9.5198e-03  eta: 2:09:03  time: 0.6079  data_time: 0.1117  memory: 4209  loss: 0.1964  decode.loss_ce: 0.1964  decode.acc_seg: 96.2327
2024/04/21 18:31:44 - mmengine - INFO - Iter(train) [ 8700/20000]  lr: 9.5142e-03  eta: 2:07:57  time: 0.7720  data_time: 0.0514  memory: 4208  loss: 0.1454  decode.loss_ce: 0.1454  decode.acc_seg: 95.5417
2024/04/21 18:32:52 - mmengine - INFO - Iter(train) [ 8800/20000]  lr: 9.5086e-03  eta: 2:06:50  time: 0.7462  data_time: 0.1531  memory: 4209  loss: 0.2409  decode.loss_ce: 0.2409  decode.acc_seg: 74.5799
2024/04/21 18:34:02 - mmengine - INFO - Iter(train) [ 8900/20000]  lr: 9.5030e-03  eta: 2:05:44  time: 0.6755  data_time: 0.2985  memory: 4208  loss: 0.1331  decode.loss_ce: 0.1331  decode.acc_seg: 96.1941
2024/04/21 18:35:10 - mmengine - INFO - Exp name: lraspp_fastvit_ful_20240421_165247
2024/04/21 18:35:10 - mmengine - INFO - Iter(train) [ 9000/20000]  lr: 9.4974e-03  eta: 2:04:36  time: 0.6917  data_time: 0.0620  memory: 4209  loss: 0.1942  decode.loss_ce: 0.1942  decode.acc_seg: 96.5820
2024/04/21 18:35:10 - mmengine - INFO - per class results:
2024/04/21 18:35:10 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 91.92 | 94.11 | 95.79 | 95.79  |   97.54   | 94.11  |
| monolayer  | 78.18 | 92.95 | 87.76 | 87.76  |   83.11   | 92.95  |
|  bilayer   | 61.07 | 75.57 | 75.83 | 75.83  |    76.1   | 75.57  |
| multilayer | 84.56 | 86.13 | 91.63 | 91.63  |   97.88   | 86.13  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 18:35:10 - mmengine - INFO - Iter(val) [8/8]    aAcc: 92.1600  mIoU: 78.9300  mAcc: 87.1900  mDice: 87.7500  mFscore: 87.7500  mPrecision: 88.6600  mRecall: 87.1900  data_time: 0.0146  time: 0.0514
2024/04/21 18:36:20 - mmengine - INFO - Iter(train) [ 9100/20000]  lr: 9.4918e-03  eta: 2:03:30  time: 0.7808  data_time: 0.0746  memory: 4207  loss: 0.1576  decode.loss_ce: 0.1576  decode.acc_seg: 95.5845
2024/04/21 18:37:27 - mmengine - INFO - Iter(train) [ 9200/20000]  lr: 9.4862e-03  eta: 2:02:21  time: 0.7516  data_time: 0.0164  memory: 4209  loss: 0.1915  decode.loss_ce: 0.1915  decode.acc_seg: 87.3572
2024/04/21 18:38:35 - mmengine - INFO - Iter(train) [ 9300/20000]  lr: 9.4806e-03  eta: 2:01:14  time: 0.6185  data_time: 0.0162  memory: 4207  loss: 0.1957  decode.loss_ce: 0.1957  decode.acc_seg: 95.6396
2024/04/21 18:39:43 - mmengine - INFO - Iter(train) [ 9400/20000]  lr: 9.4750e-03  eta: 2:00:05  time: 0.5325  data_time: 0.0193  memory: 4207  loss: 0.1664  decode.loss_ce: 0.1664  decode.acc_seg: 96.2681
2024/04/21 18:40:50 - mmengine - INFO - Iter(train) [ 9500/20000]  lr: 9.4694e-03  eta: 1:58:56  time: 0.5636  data_time: 0.0367  memory: 4208  loss: 0.1746  decode.loss_ce: 0.1746  decode.acc_seg: 85.8056
2024/04/21 18:40:50 - mmengine - INFO - per class results:
2024/04/21 18:40:50 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 93.13 | 95.66 | 96.44 | 96.44  |   97.24   | 95.66  |
| monolayer  | 80.55 | 91.31 | 89.23 | 89.23  |   87.24   | 91.31  |
|  bilayer   | 57.22 | 73.04 | 72.79 | 72.79  |   72.54   | 73.04  |
| multilayer | 84.59 | 89.97 | 91.65 | 91.65  |    93.4   | 89.97  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 18:40:50 - mmengine - INFO - Iter(val) [8/8]    aAcc: 92.8400  mIoU: 78.8700  mAcc: 87.4900  mDice: 87.5300  mFscore: 87.5300  mPrecision: 87.6000  mRecall: 87.4900  data_time: 0.0154  time: 0.0524
2024/04/21 18:41:58 - mmengine - INFO - Iter(train) [ 9600/20000]  lr: 9.4638e-03  eta: 1:57:47  time: 0.7393  data_time: 0.2744  memory: 4208  loss: 0.1730  decode.loss_ce: 0.1730  decode.acc_seg: 95.8003
2024/04/21 18:43:06 - mmengine - INFO - Iter(train) [ 9700/20000]  lr: 9.4582e-03  eta: 1:56:39  time: 0.6850  data_time: 0.3177  memory: 4208  loss: 0.1540  decode.loss_ce: 0.1540  decode.acc_seg: 95.6720
2024/04/21 18:44:13 - mmengine - INFO - Iter(train) [ 9800/20000]  lr: 9.4526e-03  eta: 1:55:31  time: 0.6471  data_time: 0.2759  memory: 4208  loss: 0.1524  decode.loss_ce: 0.1524  decode.acc_seg: 89.0488
2024/04/21 18:45:23 - mmengine - INFO - Iter(train) [ 9900/20000]  lr: 9.4470e-03  eta: 1:54:25  time: 0.6658  data_time: 0.2678  memory: 4208  loss: 0.1554  decode.loss_ce: 0.1554  decode.acc_seg: 92.7814
2024/04/21 18:46:33 - mmengine - INFO - Exp name: lraspp_fastvit_ful_20240421_165247
2024/04/21 18:46:33 - mmengine - INFO - Iter(train) [10000/20000]  lr: 9.4414e-03  eta: 1:53:19  time: 0.7166  data_time: 0.0172  memory: 4208  loss: 0.1651  decode.loss_ce: 0.1651  decode.acc_seg: 85.5222
2024/04/21 18:46:33 - mmengine - INFO - Saving checkpoint at 10000 iterations
2024/04/21 18:46:34 - mmengine - INFO - per class results:
2024/04/21 18:46:34 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background |  91.8 | 95.34 | 95.73 | 95.73  |   96.11   | 95.34  |
| monolayer  | 75.88 | 84.15 | 86.29 | 86.29  |   88.54   | 84.15  |
|  bilayer   | 59.18 | 86.74 | 74.36 | 74.36  |   65.07   | 86.74  |
| multilayer | 85.52 |  92.7 |  92.2 |  92.2  |    91.7   |  92.7  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 18:46:34 - mmengine - INFO - Iter(val) [8/8]    aAcc: 91.6800  mIoU: 78.1000  mAcc: 89.7300  mDice: 87.1400  mFscore: 87.1400  mPrecision: 85.3500  mRecall: 89.7300  data_time: 0.0113  time: 0.0480
2024/04/21 18:47:41 - mmengine - INFO - Iter(train) [10100/20000]  lr: 9.4358e-03  eta: 1:52:10  time: 0.7686  data_time: 0.2347  memory: 4209  loss: 0.1521  decode.loss_ce: 0.1521  decode.acc_seg: 85.0192
2024/04/21 18:48:49 - mmengine - INFO - Iter(train) [10200/20000]  lr: 9.4302e-03  eta: 1:51:02  time: 0.6517  data_time: 0.2344  memory: 4207  loss: 0.1645  decode.loss_ce: 0.1645  decode.acc_seg: 92.1246
2024/04/21 18:49:57 - mmengine - INFO - Iter(train) [10300/20000]  lr: 9.4246e-03  eta: 1:49:55  time: 0.6166  data_time: 0.0159  memory: 4209  loss: 0.1491  decode.loss_ce: 0.1491  decode.acc_seg: 97.1043
2024/04/21 18:51:06 - mmengine - INFO - Iter(train) [10400/20000]  lr: 9.4190e-03  eta: 1:48:47  time: 0.6729  data_time: 0.2890  memory: 4209  loss: 0.1475  decode.loss_ce: 0.1475  decode.acc_seg: 92.0900
2024/04/21 18:52:15 - mmengine - INFO - Iter(train) [10500/20000]  lr: 9.4134e-03  eta: 1:47:40  time: 0.6451  data_time: 0.1341  memory: 4209  loss: 0.1514  decode.loss_ce: 0.1514  decode.acc_seg: 94.5764
2024/04/21 18:52:16 - mmengine - INFO - per class results:
2024/04/21 18:52:16 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 91.83 | 97.39 | 95.74 | 95.74  |   94.14   | 97.39  |
| monolayer  | 75.27 | 84.92 | 85.89 | 85.89  |   86.88   | 84.92  |
|  bilayer   | 60.81 | 71.63 | 75.63 | 75.63  |   80.11   | 71.63  |
| multilayer | 84.45 | 86.78 | 91.57 | 91.57  |   96.91   | 86.78  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 18:52:16 - mmengine - INFO - Iter(val) [8/8]    aAcc: 91.8200  mIoU: 78.0900  mAcc: 85.1800  mDice: 87.2100  mFscore: 87.2100  mPrecision: 89.5100  mRecall: 85.1800  data_time: 0.0143  time: 0.0512
2024/04/21 18:53:25 - mmengine - INFO - Iter(train) [10600/20000]  lr: 9.4078e-03  eta: 1:46:33  time: 0.6387  data_time: 0.1324  memory: 4209  loss: 0.2006  decode.loss_ce: 0.2006  decode.acc_seg: 93.5902
2024/04/21 18:54:32 - mmengine - INFO - Iter(train) [10700/20000]  lr: 9.4022e-03  eta: 1:45:25  time: 0.4888  data_time: 0.1099  memory: 4209  loss: 0.2051  decode.loss_ce: 0.2051  decode.acc_seg: 96.4199
2024/04/21 18:55:40 - mmengine - INFO - Iter(train) [10800/20000]  lr: 9.3965e-03  eta: 1:44:17  time: 0.7797  data_time: 0.3987  memory: 4208  loss: 0.1575  decode.loss_ce: 0.1575  decode.acc_seg: 95.4196
2024/04/21 18:56:48 - mmengine - INFO - Iter(train) [10900/20000]  lr: 9.3909e-03  eta: 1:43:08  time: 0.6814  data_time: 0.0219  memory: 4209  loss: 0.1674  decode.loss_ce: 0.1674  decode.acc_seg: 87.0995
2024/04/21 18:57:55 - mmengine - INFO - Exp name: lraspp_fastvit_ful_20240421_165247
2024/04/21 18:57:55 - mmengine - INFO - Iter(train) [11000/20000]  lr: 9.3853e-03  eta: 1:42:00  time: 0.7098  data_time: 0.0186  memory: 4208  loss: 0.1216  decode.loss_ce: 0.1216  decode.acc_seg: 94.6203
2024/04/21 18:57:56 - mmengine - INFO - per class results:
2024/04/21 18:57:56 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 93.56 | 96.34 | 96.67 | 96.67  |   97.02   | 96.34  |
| monolayer  | 80.71 | 91.28 | 89.33 | 89.33  |   87.45   | 91.28  |
|  bilayer   | 64.76 | 76.07 | 78.61 | 78.61  |   81.33   | 76.07  |
| multilayer |  86.4 | 90.43 |  92.7 |  92.7  |   95.09   | 90.43  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 18:57:56 - mmengine - INFO - Iter(val) [8/8]    aAcc: 93.4400  mIoU: 81.3600  mAcc: 88.5300  mDice: 89.3300  mFscore: 89.3300  mPrecision: 90.2200  mRecall: 88.5300  data_time: 0.0154  time: 0.0524
2024/04/21 18:59:05 - mmengine - INFO - Iter(train) [11100/20000]  lr: 9.3797e-03  eta: 1:40:53  time: 0.6658  data_time: 0.2912  memory: 4207  loss: 0.1561  decode.loss_ce: 0.1561  decode.acc_seg: 92.3595
2024/04/21 19:00:13 - mmengine - INFO - Iter(train) [11200/20000]  lr: 9.3741e-03  eta: 1:39:44  time: 0.6671  data_time: 0.0195  memory: 4209  loss: 0.1517  decode.loss_ce: 0.1517  decode.acc_seg: 86.5662
2024/04/21 19:01:21 - mmengine - INFO - Iter(train) [11300/20000]  lr: 9.3685e-03  eta: 1:38:37  time: 0.7081  data_time: 0.0186  memory: 4208  loss: 0.1423  decode.loss_ce: 0.1423  decode.acc_seg: 96.6217
2024/04/21 19:02:29 - mmengine - INFO - Iter(train) [11400/20000]  lr: 9.3629e-03  eta: 1:37:29  time: 0.7126  data_time: 0.3091  memory: 4209  loss: 0.1436  decode.loss_ce: 0.1436  decode.acc_seg: 94.0474
2024/04/21 19:03:36 - mmengine - INFO - Iter(train) [11500/20000]  lr: 9.3573e-03  eta: 1:36:20  time: 0.6888  data_time: 0.0220  memory: 4208  loss: 0.2035  decode.loss_ce: 0.2035  decode.acc_seg: 96.1547
2024/04/21 19:03:37 - mmengine - INFO - per class results:
2024/04/21 19:03:37 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 85.21 | 87.16 | 92.02 | 92.02  |   97.45   | 87.16  |
| monolayer  | 66.92 | 89.61 | 80.18 | 80.18  |   72.54   | 89.61  |
|  bilayer   | 37.43 |  56.0 | 54.47 | 54.47  |   53.03   |  56.0  |
| multilayer | 84.19 | 89.85 | 91.42 | 91.42  |   93.04   | 89.85  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 19:03:37 - mmengine - INFO - Iter(val) [8/8]    aAcc: 86.4500  mIoU: 68.4400  mAcc: 80.6500  mDice: 79.5200  mFscore: 79.5200  mPrecision: 79.0200  mRecall: 80.6500  data_time: 0.0138  time: 0.0503
2024/04/21 19:04:43 - mmengine - INFO - Iter(train) [11600/20000]  lr: 9.3517e-03  eta: 1:35:11  time: 0.6198  data_time: 0.0158  memory: 4209  loss: 0.1115  decode.loss_ce: 0.1115  decode.acc_seg: 94.7887
2024/04/21 19:05:50 - mmengine - INFO - Iter(train) [11700/20000]  lr: 9.3461e-03  eta: 1:34:02  time: 0.5888  data_time: 0.0204  memory: 4209  loss: 0.3031  decode.loss_ce: 0.3031  decode.acc_seg: 64.0456
2024/04/21 19:06:57 - mmengine - INFO - Iter(train) [11800/20000]  lr: 9.3404e-03  eta: 1:32:53  time: 0.6205  data_time: 0.2216  memory: 4209  loss: 0.1528  decode.loss_ce: 0.1528  decode.acc_seg: 91.8814
2024/04/21 19:08:05 - mmengine - INFO - Iter(train) [11900/20000]  lr: 9.3348e-03  eta: 1:31:46  time: 0.5295  data_time: 0.0207  memory: 4209  loss: 0.1556  decode.loss_ce: 0.1556  decode.acc_seg: 97.3842
2024/04/21 19:09:13 - mmengine - INFO - Exp name: lraspp_fastvit_ful_20240421_165247
2024/04/21 19:09:13 - mmengine - INFO - Iter(train) [12000/20000]  lr: 9.3292e-03  eta: 1:30:37  time: 0.6854  data_time: 0.0258  memory: 4209  loss: 0.1591  decode.loss_ce: 0.1591  decode.acc_seg: 94.7703
2024/04/21 19:09:13 - mmengine - INFO - per class results:
2024/04/21 19:09:13 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 90.65 | 93.52 |  95.1 |  95.1  |   96.72   | 93.52  |
| monolayer  | 77.34 | 85.75 | 87.22 | 87.22  |   88.74   | 85.75  |
|  bilayer   | 49.48 | 83.81 | 66.21 | 66.21  |   54.71   | 83.81  |
| multilayer | 85.29 | 92.82 | 92.06 | 92.06  |   91.31   | 92.82  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 19:09:13 - mmengine - INFO - Iter(val) [8/8]    aAcc: 90.8900  mIoU: 75.6900  mAcc: 88.9800  mDice: 85.1500  mFscore: 85.1500  mPrecision: 82.8700  mRecall: 88.9800  data_time: 0.0177  time: 0.0553
2024/04/21 19:10:20 - mmengine - INFO - Iter(train) [12100/20000]  lr: 9.3236e-03  eta: 1:29:29  time: 0.7375  data_time: 0.0567  memory: 4208  loss: 0.1307  decode.loss_ce: 0.1307  decode.acc_seg: 92.8398
2024/04/21 19:11:29 - mmengine - INFO - Iter(train) [12200/20000]  lr: 9.3180e-03  eta: 1:28:21  time: 0.6758  data_time: 0.1158  memory: 4209  loss: 0.1635  decode.loss_ce: 0.1635  decode.acc_seg: 92.3818
2024/04/21 19:12:38 - mmengine - INFO - Iter(train) [12300/20000]  lr: 9.3124e-03  eta: 1:27:14  time: 0.8658  data_time: 0.4905  memory: 4208  loss: 0.1653  decode.loss_ce: 0.1653  decode.acc_seg: 96.4988
2024/04/21 19:13:45 - mmengine - INFO - Iter(train) [12400/20000]  lr: 9.3068e-03  eta: 1:26:05  time: 0.7410  data_time: 0.3615  memory: 4208  loss: 0.1180  decode.loss_ce: 0.1180  decode.acc_seg: 96.6947
2024/04/21 19:14:53 - mmengine - INFO - Iter(train) [12500/20000]  lr: 9.3012e-03  eta: 1:24:57  time: 0.7254  data_time: 0.3469  memory: 4208  loss: 0.1365  decode.loss_ce: 0.1365  decode.acc_seg: 96.6758
2024/04/21 19:14:53 - mmengine - INFO - Saving checkpoint at 12500 iterations
2024/04/21 19:14:54 - mmengine - INFO - per class results:
2024/04/21 19:14:54 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 89.76 | 94.14 |  94.6 |  94.6  |   95.07   | 94.14  |
| monolayer  | 77.29 | 86.41 | 87.19 | 87.19  |   87.99   | 86.41  |
|  bilayer   | 56.44 | 81.13 | 72.16 | 72.16  |   64.97   | 81.13  |
| multilayer | 86.66 | 91.68 | 92.85 | 92.85  |   94.05   | 91.68  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 19:14:54 - mmengine - INFO - Iter(val) [8/8]    aAcc: 91.2000  mIoU: 77.5400  mAcc: 88.3400  mDice: 86.7000  mFscore: 86.7000  mPrecision: 85.5200  mRecall: 88.3400  data_time: 0.0112  time: 0.0480
2024/04/21 19:16:00 - mmengine - INFO - Iter(train) [12600/20000]  lr: 9.2955e-03  eta: 1:23:49  time: 0.8059  data_time: 0.4256  memory: 4208  loss: 0.1506  decode.loss_ce: 0.1506  decode.acc_seg: 89.2777
2024/04/21 19:17:07 - mmengine - INFO - Iter(train) [12700/20000]  lr: 9.2899e-03  eta: 1:22:40  time: 0.7015  data_time: 0.0185  memory: 4209  loss: 0.2285  decode.loss_ce: 0.2285  decode.acc_seg: 82.5975
2024/04/21 19:18:13 - mmengine - INFO - Iter(train) [12800/20000]  lr: 9.2843e-03  eta: 1:21:31  time: 0.6367  data_time: 0.2089  memory: 4209  loss: 0.1427  decode.loss_ce: 0.1427  decode.acc_seg: 95.8457
2024/04/21 19:19:23 - mmengine - INFO - Iter(train) [12900/20000]  lr: 9.2787e-03  eta: 1:20:24  time: 0.6077  data_time: 0.2267  memory: 4209  loss: 0.1315  decode.loss_ce: 0.1315  decode.acc_seg: 94.8748
2024/04/21 19:20:31 - mmengine - INFO - Exp name: lraspp_fastvit_ful_20240421_165247
2024/04/21 19:20:31 - mmengine - INFO - Iter(train) [13000/20000]  lr: 9.2731e-03  eta: 1:19:16  time: 0.6484  data_time: 0.0178  memory: 4208  loss: 0.1542  decode.loss_ce: 0.1542  decode.acc_seg: 95.6562
2024/04/21 19:20:32 - mmengine - INFO - per class results:
2024/04/21 19:20:32 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 95.31 | 98.45 |  97.6 |  97.6  |   96.76   | 98.45  |
| monolayer  | 83.45 | 91.48 | 90.98 | 90.98  |   90.49   | 91.48  |
|  bilayer   | 66.56 | 77.01 | 79.92 | 79.92  |   83.06   | 77.01  |
| multilayer | 84.55 | 86.56 | 91.63 | 91.63  |   97.34   | 86.56  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 19:20:32 - mmengine - INFO - Iter(val) [8/8]    aAcc: 94.4600  mIoU: 82.4700  mAcc: 88.3700  mDice: 90.0300  mFscore: 90.0300  mPrecision: 91.9100  mRecall: 88.3700  data_time: 0.0151  time: 0.0525
2024/04/21 19:21:40 - mmengine - INFO - Iter(train) [13100/20000]  lr: 9.2675e-03  eta: 1:18:09  time: 0.6974  data_time: 0.0139  memory: 4208  loss: 0.1507  decode.loss_ce: 0.1507  decode.acc_seg: 92.3121
2024/04/21 19:22:48 - mmengine - INFO - Iter(train) [13200/20000]  lr: 9.2618e-03  eta: 1:17:00  time: 0.7321  data_time: 0.2001  memory: 4209  loss: 0.1300  decode.loss_ce: 0.1300  decode.acc_seg: 96.7501
2024/04/21 19:23:55 - mmengine - INFO - Iter(train) [13300/20000]  lr: 9.2562e-03  eta: 1:15:52  time: 0.5921  data_time: 0.0612  memory: 4208  loss: 0.1249  decode.loss_ce: 0.1249  decode.acc_seg: 95.2089
2024/04/21 19:25:04 - mmengine - INFO - Iter(train) [13400/20000]  lr: 9.2506e-03  eta: 1:14:45  time: 0.6343  data_time: 0.0217  memory: 4208  loss: 0.1142  decode.loss_ce: 0.1142  decode.acc_seg: 96.8800
2024/04/21 19:26:13 - mmengine - INFO - Iter(train) [13500/20000]  lr: 9.2450e-03  eta: 1:13:37  time: 0.7839  data_time: 0.0562  memory: 4208  loss: 0.1589  decode.loss_ce: 0.1589  decode.acc_seg: 91.4968
2024/04/21 19:26:13 - mmengine - INFO - per class results:
2024/04/21 19:26:13 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 93.05 | 97.19 |  96.4 |  96.4  |   95.63   | 97.19  |
| monolayer  |  79.6 | 87.84 | 88.64 | 88.64  |   89.47   | 87.84  |
|  bilayer   | 72.26 | 79.62 |  83.9 |  83.9  |   88.66   | 79.62  |
| multilayer | 87.55 | 93.58 | 93.36 | 93.36  |   93.14   | 93.58  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 19:26:13 - mmengine - INFO - Iter(val) [8/8]    aAcc: 93.4700  mIoU: 83.1200  mAcc: 89.5600  mDice: 90.5800  mFscore: 90.5800  mPrecision: 91.7200  mRecall: 89.5600  data_time: 0.0192  time: 0.0565
2024/04/21 19:27:21 - mmengine - INFO - Iter(train) [13600/20000]  lr: 9.2394e-03  eta: 1:12:29  time: 0.6964  data_time: 0.3181  memory: 4209  loss: 0.1398  decode.loss_ce: 0.1398  decode.acc_seg: 95.3218
2024/04/21 19:28:28 - mmengine - INFO - Iter(train) [13700/20000]  lr: 9.2338e-03  eta: 1:11:21  time: 0.7439  data_time: 0.0454  memory: 4208  loss: 0.1279  decode.loss_ce: 0.1279  decode.acc_seg: 97.7106
2024/04/21 19:29:37 - mmengine - INFO - Iter(train) [13800/20000]  lr: 9.2281e-03  eta: 1:10:13  time: 0.7063  data_time: 0.0908  memory: 4208  loss: 0.1085  decode.loss_ce: 0.1085  decode.acc_seg: 96.8252
2024/04/21 19:30:46 - mmengine - INFO - Iter(train) [13900/20000]  lr: 9.2225e-03  eta: 1:09:06  time: 0.7890  data_time: 0.4111  memory: 4209  loss: 0.1671  decode.loss_ce: 0.1671  decode.acc_seg: 89.8959
2024/04/21 19:31:53 - mmengine - INFO - Exp name: lraspp_fastvit_ful_20240421_165247
2024/04/21 19:31:53 - mmengine - INFO - Iter(train) [14000/20000]  lr: 9.2169e-03  eta: 1:07:57  time: 0.7003  data_time: 0.3223  memory: 4209  loss: 0.1267  decode.loss_ce: 0.1267  decode.acc_seg: 97.2576
2024/04/21 19:31:54 - mmengine - INFO - per class results:
2024/04/21 19:31:54 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 91.79 |  96.6 | 95.72 | 95.72  |   94.86   |  96.6  |
| monolayer  | 77.19 | 86.12 | 87.13 | 87.13  |   88.16   | 86.12  |
|  bilayer   | 71.12 | 83.21 | 83.12 | 83.12  |   83.04   | 83.21  |
| multilayer | 83.01 | 88.18 | 90.71 | 90.71  |    93.4   | 88.18  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 19:31:54 - mmengine - INFO - Iter(val) [8/8]    aAcc: 92.3800  mIoU: 80.7800  mAcc: 88.5300  mDice: 89.1700  mFscore: 89.1700  mPrecision: 89.8600  mRecall: 88.5300  data_time: 0.0150  time: 0.0531
2024/04/21 19:33:03 - mmengine - INFO - Iter(train) [14100/20000]  lr: 9.2113e-03  eta: 1:06:50  time: 0.8068  data_time: 0.4312  memory: 4208  loss: 0.1290  decode.loss_ce: 0.1290  decode.acc_seg: 95.7569
2024/04/21 19:34:09 - mmengine - INFO - Iter(train) [14200/20000]  lr: 9.2057e-03  eta: 1:05:41  time: 0.7466  data_time: 0.3719  memory: 4209  loss: 0.1207  decode.loss_ce: 0.1207  decode.acc_seg: 97.4442
2024/04/21 19:35:18 - mmengine - INFO - Iter(train) [14300/20000]  lr: 9.2000e-03  eta: 1:04:34  time: 0.7231  data_time: 0.3484  memory: 4208  loss: 0.1645  decode.loss_ce: 0.1645  decode.acc_seg: 83.5668
2024/04/21 19:36:26 - mmengine - INFO - Iter(train) [14400/20000]  lr: 9.1944e-03  eta: 1:03:26  time: 0.7424  data_time: 0.3476  memory: 4209  loss: 0.2062  decode.loss_ce: 0.2062  decode.acc_seg: 96.7069
2024/04/21 19:37:33 - mmengine - INFO - Iter(train) [14500/20000]  lr: 9.1888e-03  eta: 1:02:18  time: 0.7540  data_time: 0.3127  memory: 4208  loss: 0.1991  decode.loss_ce: 0.1991  decode.acc_seg: 91.8916
2024/04/21 19:37:34 - mmengine - INFO - per class results:
2024/04/21 19:37:34 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 93.09 | 96.16 | 96.42 | 96.42  |   96.68   | 96.16  |
| monolayer  | 78.72 | 87.57 | 88.09 | 88.09  |   88.62   | 87.57  |
|  bilayer   | 55.13 | 73.59 | 71.08 | 71.08  |   68.73   | 73.59  |
| multilayer | 83.97 | 92.73 | 91.29 | 91.29  |   89.88   | 92.73  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 19:37:34 - mmengine - INFO - Iter(val) [8/8]    aAcc: 92.4100  mIoU: 77.7300  mAcc: 87.5100  mDice: 86.7200  mFscore: 86.7200  mPrecision: 85.9800  mRecall: 87.5100  data_time: 0.0283  time: 0.0650
2024/04/21 19:38:42 - mmengine - INFO - Iter(train) [14600/20000]  lr: 9.1832e-03  eta: 1:01:10  time: 0.5826  data_time: 0.0146  memory: 4207  loss: 0.1211  decode.loss_ce: 0.1211  decode.acc_seg: 95.1933
2024/04/21 19:39:51 - mmengine - INFO - Iter(train) [14700/20000]  lr: 9.1776e-03  eta: 1:00:02  time: 0.6535  data_time: 0.1629  memory: 4209  loss: 0.1208  decode.loss_ce: 0.1208  decode.acc_seg: 92.3775
2024/04/21 19:40:59 - mmengine - INFO - Iter(train) [14800/20000]  lr: 9.1719e-03  eta: 0:58:54  time: 0.6507  data_time: 0.0831  memory: 4209  loss: 0.2100  decode.loss_ce: 0.2100  decode.acc_seg: 96.2695
2024/04/21 19:42:11 - mmengine - INFO - Iter(train) [14900/20000]  lr: 9.1663e-03  eta: 0:57:47  time: 0.8760  data_time: 0.5031  memory: 4207  loss: 0.1657  decode.loss_ce: 0.1657  decode.acc_seg: 97.5012
2024/04/21 19:43:17 - mmengine - INFO - Exp name: lraspp_fastvit_ful_20240421_165247
2024/04/21 19:43:17 - mmengine - INFO - Iter(train) [15000/20000]  lr: 9.1607e-03  eta: 0:56:39  time: 0.5527  data_time: 0.0143  memory: 4209  loss: 0.1188  decode.loss_ce: 0.1188  decode.acc_seg: 92.3068
2024/04/21 19:43:17 - mmengine - INFO - Saving checkpoint at 15000 iterations
2024/04/21 19:43:18 - mmengine - INFO - per class results:
2024/04/21 19:43:18 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 93.02 | 94.92 | 96.39 | 96.39  |    97.9   | 94.92  |
| monolayer  | 80.32 | 94.36 | 89.09 | 89.09  |   84.37   | 94.36  |
|  bilayer   | 69.84 | 80.45 | 82.24 | 82.24  |   84.12   | 80.45  |
| multilayer | 83.13 |  84.8 | 90.79 | 90.79  |   97.68   |  84.8  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 19:43:18 - mmengine - INFO - Iter(val) [8/8]    aAcc: 93.1600  mIoU: 81.5800  mAcc: 88.6300  mDice: 89.6300  mFscore: 89.6300  mPrecision: 91.0200  mRecall: 88.6300  data_time: 0.0114  time: 0.0479
2024/04/21 19:44:28 - mmengine - INFO - Iter(train) [15100/20000]  lr: 9.1551e-03  eta: 0:55:31  time: 0.8044  data_time: 0.0147  memory: 4209  loss: 0.2166  decode.loss_ce: 0.2166  decode.acc_seg: 96.5630
2024/04/21 19:45:36 - mmengine - INFO - Iter(train) [15200/20000]  lr: 9.1494e-03  eta: 0:54:23  time: 0.8017  data_time: 0.3697  memory: 4208  loss: 0.1051  decode.loss_ce: 0.1051  decode.acc_seg: 94.0323
2024/04/21 19:46:45 - mmengine - INFO - Iter(train) [15300/20000]  lr: 9.1438e-03  eta: 0:53:16  time: 0.7600  data_time: 0.0123  memory: 4209  loss: 0.1656  decode.loss_ce: 0.1656  decode.acc_seg: 91.3932
2024/04/21 19:47:54 - mmengine - INFO - Iter(train) [15400/20000]  lr: 9.1382e-03  eta: 0:52:08  time: 0.6421  data_time: 0.0119  memory: 4209  loss: 0.1091  decode.loss_ce: 0.1091  decode.acc_seg: 96.9295
2024/04/21 19:49:01 - mmengine - INFO - Iter(train) [15500/20000]  lr: 9.1326e-03  eta: 0:51:00  time: 0.7434  data_time: 0.1929  memory: 4208  loss: 0.1501  decode.loss_ce: 0.1501  decode.acc_seg: 95.6213
2024/04/21 19:49:02 - mmengine - INFO - per class results:
2024/04/21 19:49:02 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 91.69 | 93.55 | 95.66 | 95.66  |   97.88   | 93.55  |
| monolayer  | 79.06 | 92.56 | 88.31 | 88.31  |   84.43   | 92.56  |
|  bilayer   | 57.65 | 73.92 | 73.13 | 73.13  |   72.37   | 73.92  |
| multilayer | 86.05 | 92.23 |  92.5 |  92.5  |   92.77   | 92.23  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 19:49:02 - mmengine - INFO - Iter(val) [8/8]    aAcc: 92.1600  mIoU: 78.6100  mAcc: 88.0600  mDice: 87.4000  mFscore: 87.4000  mPrecision: 86.8600  mRecall: 88.0600  data_time: 0.0234  time: 0.0598
2024/04/21 19:50:10 - mmengine - INFO - Iter(train) [15600/20000]  lr: 9.1269e-03  eta: 0:49:52  time: 0.6929  data_time: 0.0178  memory: 4209  loss: 0.1112  decode.loss_ce: 0.1112  decode.acc_seg: 97.5761
2024/04/21 19:51:18 - mmengine - INFO - Iter(train) [15700/20000]  lr: 9.1213e-03  eta: 0:48:44  time: 0.5809  data_time: 0.0132  memory: 4207  loss: 0.1020  decode.loss_ce: 0.1020  decode.acc_seg: 95.8178
2024/04/21 19:52:25 - mmengine - INFO - Iter(train) [15800/20000]  lr: 9.1157e-03  eta: 0:47:36  time: 0.6495  data_time: 0.0126  memory: 4208  loss: 0.2610  decode.loss_ce: 0.2610  decode.acc_seg: 89.4082
2024/04/21 19:53:34 - mmengine - INFO - Iter(train) [15900/20000]  lr: 9.1101e-03  eta: 0:46:28  time: 0.7400  data_time: 0.3625  memory: 4208  loss: 0.1535  decode.loss_ce: 0.1535  decode.acc_seg: 94.8292
2024/04/21 19:54:42 - mmengine - INFO - Exp name: lraspp_fastvit_ful_20240421_165247
2024/04/21 19:54:42 - mmengine - INFO - Iter(train) [16000/20000]  lr: 9.1044e-03  eta: 0:45:20  time: 0.6422  data_time: 0.2192  memory: 4209  loss: 0.1276  decode.loss_ce: 0.1276  decode.acc_seg: 97.1569
2024/04/21 19:54:42 - mmengine - INFO - per class results:
2024/04/21 19:54:42 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 94.17 | 96.72 |  97.0 |  97.0  |   97.28   | 96.72  |
| monolayer  | 82.69 | 90.73 | 90.53 | 90.53  |   90.33   | 90.73  |
|  bilayer   | 73.09 | 84.69 | 84.45 | 84.45  |   84.22   | 84.69  |
| multilayer | 86.31 | 93.68 | 92.65 | 92.65  |   91.64   | 93.68  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 19:54:42 - mmengine - INFO - Iter(val) [8/8]    aAcc: 94.2400  mIoU: 84.0700  mAcc: 91.4600  mDice: 91.1600  mFscore: 91.1600  mPrecision: 90.8700  mRecall: 91.4600  data_time: 0.0301  time: 0.0666
2024/04/21 19:55:53 - mmengine - INFO - Iter(train) [16100/20000]  lr: 9.0988e-03  eta: 0:44:12  time: 0.7243  data_time: 0.3486  memory: 4207  loss: 0.1878  decode.loss_ce: 0.1878  decode.acc_seg: 88.2644
2024/04/21 19:57:01 - mmengine - INFO - Iter(train) [16200/20000]  lr: 9.0932e-03  eta: 0:43:04  time: 0.7075  data_time: 0.0186  memory: 4209  loss: 0.1363  decode.loss_ce: 0.1363  decode.acc_seg: 97.3083
2024/04/21 19:58:10 - mmengine - INFO - Iter(train) [16300/20000]  lr: 9.0875e-03  eta: 0:41:57  time: 0.7893  data_time: 0.4209  memory: 4209  loss: 0.1729  decode.loss_ce: 0.1729  decode.acc_seg: 85.8498
2024/04/21 19:59:17 - mmengine - INFO - Iter(train) [16400/20000]  lr: 9.0819e-03  eta: 0:40:48  time: 0.5577  data_time: 0.1591  memory: 4208  loss: 0.1559  decode.loss_ce: 0.1559  decode.acc_seg: 94.4891
2024/04/21 20:00:26 - mmengine - INFO - Iter(train) [16500/20000]  lr: 9.0763e-03  eta: 0:39:40  time: 0.6907  data_time: 0.0162  memory: 4209  loss: 0.1139  decode.loss_ce: 0.1139  decode.acc_seg: 95.7306
2024/04/21 20:00:26 - mmengine - INFO - per class results:
2024/04/21 20:00:26 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 92.28 | 94.11 | 95.99 | 95.99  |   97.94   | 94.11  |
| monolayer  | 80.66 | 92.17 |  89.3 |  89.3  |    86.6   | 92.17  |
|  bilayer   | 63.37 | 84.96 | 77.58 | 77.58  |   71.38   | 84.96  |
| multilayer | 86.83 | 90.97 | 92.95 | 92.95  |   95.02   | 90.97  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 20:00:26 - mmengine - INFO - Iter(val) [8/8]    aAcc: 92.8500  mIoU: 80.7900  mAcc: 90.5500  mDice: 88.9500  mFscore: 88.9500  mPrecision: 87.7400  mRecall: 90.5500  data_time: 0.0157  time: 0.0530
2024/04/21 20:01:34 - mmengine - INFO - Iter(train) [16600/20000]  lr: 9.0706e-03  eta: 0:38:32  time: 0.6546  data_time: 0.0135  memory: 4209  loss: 0.1462  decode.loss_ce: 0.1462  decode.acc_seg: 96.7421
2024/04/21 20:02:41 - mmengine - INFO - Iter(train) [16700/20000]  lr: 9.0650e-03  eta: 0:37:24  time: 0.6310  data_time: 0.0518  memory: 4209  loss: 0.1123  decode.loss_ce: 0.1123  decode.acc_seg: 96.1644
2024/04/21 20:03:49 - mmengine - INFO - Iter(train) [16800/20000]  lr: 9.0594e-03  eta: 0:36:16  time: 0.7915  data_time: 0.0129  memory: 4209  loss: 0.1147  decode.loss_ce: 0.1147  decode.acc_seg: 96.5215
2024/04/21 20:05:00 - mmengine - INFO - Iter(train) [16900/20000]  lr: 9.0538e-03  eta: 0:35:09  time: 0.7471  data_time: 0.0180  memory: 4209  loss: 0.1820  decode.loss_ce: 0.1820  decode.acc_seg: 95.2412
2024/04/21 20:06:06 - mmengine - INFO - Exp name: lraspp_fastvit_ful_20240421_165247
2024/04/21 20:06:06 - mmengine - INFO - Iter(train) [17000/20000]  lr: 9.0481e-03  eta: 0:34:00  time: 0.6171  data_time: 0.1497  memory: 4209  loss: 0.1274  decode.loss_ce: 0.1274  decode.acc_seg: 92.8246
2024/04/21 20:06:06 - mmengine - INFO - per class results:
2024/04/21 20:06:06 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 93.77 |  98.0 | 96.78 | 96.78  |    95.6   |  98.0  |
| monolayer  | 81.25 | 87.58 | 89.65 | 89.65  |   91.83   | 87.58  |
|  bilayer   | 70.71 | 82.44 | 82.84 | 82.84  |   83.25   | 82.44  |
| multilayer | 86.71 | 91.78 | 92.88 | 92.88  |   94.01   | 91.78  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 20:06:06 - mmengine - INFO - Iter(val) [8/8]    aAcc: 93.8800  mIoU: 83.1100  mAcc: 89.9500  mDice: 90.5400  mFscore: 90.5400  mPrecision: 91.1700  mRecall: 89.9500  data_time: 0.0114  time: 0.0487
2024/04/21 20:07:14 - mmengine - INFO - Iter(train) [17100/20000]  lr: 9.0425e-03  eta: 0:32:52  time: 0.7961  data_time: 0.4159  memory: 4209  loss: 0.1766  decode.loss_ce: 0.1766  decode.acc_seg: 92.1691
2024/04/21 20:08:21 - mmengine - INFO - Iter(train) [17200/20000]  lr: 9.0369e-03  eta: 0:31:44  time: 0.6536  data_time: 0.0199  memory: 4208  loss: 0.1352  decode.loss_ce: 0.1352  decode.acc_seg: 94.3476
2024/04/21 20:09:29 - mmengine - INFO - Iter(train) [17300/20000]  lr: 9.0312e-03  eta: 0:30:36  time: 0.6616  data_time: 0.2855  memory: 4209  loss: 0.1357  decode.loss_ce: 0.1357  decode.acc_seg: 88.6742
2024/04/21 20:10:35 - mmengine - INFO - Iter(train) [17400/20000]  lr: 9.0256e-03  eta: 0:29:28  time: 0.6808  data_time: 0.0203  memory: 4209  loss: 0.1029  decode.loss_ce: 0.1029  decode.acc_seg: 95.2241
2024/04/21 20:11:43 - mmengine - INFO - Iter(train) [17500/20000]  lr: 9.0200e-03  eta: 0:28:20  time: 0.7645  data_time: 0.0175  memory: 4209  loss: 0.1250  decode.loss_ce: 0.1250  decode.acc_seg: 96.4979
2024/04/21 20:11:43 - mmengine - INFO - Saving checkpoint at 17500 iterations
2024/04/21 20:11:44 - mmengine - INFO - per class results:
2024/04/21 20:11:44 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background |  91.8 |  93.8 | 95.72 | 95.72  |   97.72   |  93.8  |
| monolayer  | 82.96 | 92.62 | 90.68 | 90.68  |   88.82   | 92.62  |
|  bilayer   | 51.47 | 77.35 | 67.96 | 67.96  |   60.61   | 77.35  |
| multilayer |  87.3 | 92.28 | 93.22 | 93.22  |   94.18   | 92.28  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 20:11:44 - mmengine - INFO - Iter(val) [8/8]    aAcc: 92.5100  mIoU: 78.3800  mAcc: 89.0100  mDice: 86.9000  mFscore: 86.9000  mPrecision: 85.3300  mRecall: 89.0100  data_time: 0.0083  time: 0.0455
2024/04/21 20:12:48 - mmengine - INFO - Iter(train) [17600/20000]  lr: 9.0143e-03  eta: 0:27:11  time: 0.6597  data_time: 0.2289  memory: 4209  loss: 0.1665  decode.loss_ce: 0.1665  decode.acc_seg: 92.2926
2024/04/21 20:13:55 - mmengine - INFO - Iter(train) [17700/20000]  lr: 9.0087e-03  eta: 0:26:03  time: 0.6861  data_time: 0.2961  memory: 4209  loss: 0.1059  decode.loss_ce: 0.1059  decode.acc_seg: 96.4065
2024/04/21 20:15:03 - mmengine - INFO - Iter(train) [17800/20000]  lr: 9.0031e-03  eta: 0:24:55  time: 0.6773  data_time: 0.0194  memory: 4209  loss: 0.1226  decode.loss_ce: 0.1226  decode.acc_seg: 95.6255
2024/04/21 20:16:10 - mmengine - INFO - Iter(train) [17900/20000]  lr: 8.9974e-03  eta: 0:23:47  time: 0.7685  data_time: 0.3797  memory: 4209  loss: 0.1549  decode.loss_ce: 0.1549  decode.acc_seg: 85.5312
2024/04/21 20:17:18 - mmengine - INFO - Exp name: lraspp_fastvit_ful_20240421_165247
2024/04/21 20:17:18 - mmengine - INFO - Iter(train) [18000/20000]  lr: 8.9918e-03  eta: 0:22:39  time: 0.6072  data_time: 0.0207  memory: 4208  loss: 0.1862  decode.loss_ce: 0.1862  decode.acc_seg: 96.8835
2024/04/21 20:17:18 - mmengine - INFO - per class results:
2024/04/21 20:17:18 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 92.83 |  97.6 | 96.28 | 96.28  |    95.0   |  97.6  |
| monolayer  | 78.72 | 85.59 |  88.1 |  88.1  |   90.76   | 85.59  |
|  bilayer   | 71.83 | 83.88 |  83.6 |  83.6  |   83.33   | 83.88  |
| multilayer | 86.61 | 92.11 | 92.82 | 92.82  |   93.55   | 92.11  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 20:17:18 - mmengine - INFO - Iter(val) [8/8]    aAcc: 93.2100  mIoU: 82.5000  mAcc: 89.7900  mDice: 90.2000  mFscore: 90.2000  mPrecision: 90.6600  mRecall: 89.7900  data_time: 0.0181  time: 0.0553
2024/04/21 20:18:26 - mmengine - INFO - Iter(train) [18100/20000]  lr: 8.9862e-03  eta: 0:21:31  time: 0.7044  data_time: 0.0183  memory: 4209  loss: 0.1580  decode.loss_ce: 0.1580  decode.acc_seg: 95.6956
2024/04/21 20:19:32 - mmengine - INFO - Iter(train) [18200/20000]  lr: 8.9805e-03  eta: 0:20:23  time: 0.4763  data_time: 0.0159  memory: 4208  loss: 0.1029  decode.loss_ce: 0.1029  decode.acc_seg: 97.1136
2024/04/21 20:20:40 - mmengine - INFO - Iter(train) [18300/20000]  lr: 8.9749e-03  eta: 0:19:15  time: 0.6690  data_time: 0.1335  memory: 4209  loss: 0.1546  decode.loss_ce: 0.1546  decode.acc_seg: 94.6537
2024/04/21 20:21:49 - mmengine - INFO - Iter(train) [18400/20000]  lr: 8.9692e-03  eta: 0:18:07  time: 0.7573  data_time: 0.0195  memory: 4208  loss: 0.1140  decode.loss_ce: 0.1140  decode.acc_seg: 96.6661
2024/04/21 20:22:58 - mmengine - INFO - Iter(train) [18500/20000]  lr: 8.9636e-03  eta: 0:16:59  time: 0.7342  data_time: 0.0138  memory: 4208  loss: 0.1661  decode.loss_ce: 0.1661  decode.acc_seg: 97.0592
2024/04/21 20:22:58 - mmengine - INFO - per class results:
2024/04/21 20:22:58 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 94.51 | 97.01 | 97.18 | 97.18  |   97.35   | 97.01  |
| monolayer  | 82.63 | 92.46 | 90.49 | 90.49  |    88.6   | 92.46  |
|  bilayer   | 64.68 | 72.15 | 78.55 | 78.55  |    86.2   | 72.15  |
| multilayer | 86.26 | 91.97 | 92.62 | 92.62  |   93.28   | 91.97  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 20:22:58 - mmengine - INFO - Iter(val) [8/8]    aAcc: 94.0800  mIoU: 82.0200  mAcc: 88.4000  mDice: 89.7100  mFscore: 89.7100  mPrecision: 91.3600  mRecall: 88.4000  data_time: 0.0156  time: 0.0526
2024/04/21 20:24:06 - mmengine - INFO - Iter(train) [18600/20000]  lr: 8.9580e-03  eta: 0:15:51  time: 0.8046  data_time: 0.4309  memory: 4208  loss: 0.1415  decode.loss_ce: 0.1415  decode.acc_seg: 95.7075
2024/04/21 20:25:13 - mmengine - INFO - Iter(train) [18700/20000]  lr: 8.9523e-03  eta: 0:14:43  time: 0.6940  data_time: 0.0898  memory: 4209  loss: 0.1073  decode.loss_ce: 0.1073  decode.acc_seg: 97.6315
2024/04/21 20:26:21 - mmengine - INFO - Iter(train) [18800/20000]  lr: 8.9467e-03  eta: 0:13:35  time: 0.7587  data_time: 0.0146  memory: 4209  loss: 0.1546  decode.loss_ce: 0.1546  decode.acc_seg: 97.2105
2024/04/21 20:27:31 - mmengine - INFO - Iter(train) [18900/20000]  lr: 8.9411e-03  eta: 0:12:27  time: 0.7792  data_time: 0.0152  memory: 4209  loss: 0.1299  decode.loss_ce: 0.1299  decode.acc_seg: 88.4741
2024/04/21 20:28:39 - mmengine - INFO - Exp name: lraspp_fastvit_ful_20240421_165247
2024/04/21 20:28:39 - mmengine - INFO - Iter(train) [19000/20000]  lr: 8.9354e-03  eta: 0:11:19  time: 0.6507  data_time: 0.2434  memory: 4209  loss: 0.1390  decode.loss_ce: 0.1390  decode.acc_seg: 97.0378
2024/04/21 20:28:39 - mmengine - INFO - per class results:
2024/04/21 20:28:39 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 94.62 | 96.99 | 97.23 | 97.23  |   97.47   | 96.99  |
| monolayer  | 83.31 | 92.92 |  90.9 |  90.9  |   88.96   | 92.92  |
|  bilayer   | 70.35 | 79.44 |  82.6 |  82.6  |   86.01   | 79.44  |
| multilayer |  86.9 | 90.26 | 92.99 | 92.99  |   95.89   | 90.26  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 20:28:39 - mmengine - INFO - Iter(val) [8/8]    aAcc: 94.4200  mIoU: 83.7900  mAcc: 89.9000  mDice: 90.9300  mFscore: 90.9300  mPrecision: 92.0800  mRecall: 89.9000  data_time: 0.0145  time: 0.0514
2024/04/21 20:29:47 - mmengine - INFO - Iter(train) [19100/20000]  lr: 8.9298e-03  eta: 0:10:11  time: 0.7026  data_time: 0.2774  memory: 4209  loss: 0.1415  decode.loss_ce: 0.1415  decode.acc_seg: 96.2301
2024/04/21 20:30:55 - mmengine - INFO - Iter(train) [19200/20000]  lr: 8.9241e-03  eta: 0:09:03  time: 0.6807  data_time: 0.1444  memory: 4207  loss: 0.1426  decode.loss_ce: 0.1426  decode.acc_seg: 94.3376
2024/04/21 20:32:03 - mmengine - INFO - Iter(train) [19300/20000]  lr: 8.9185e-03  eta: 0:07:55  time: 0.6447  data_time: 0.2561  memory: 4208  loss: 0.1544  decode.loss_ce: 0.1544  decode.acc_seg: 95.7654
2024/04/21 20:33:12 - mmengine - INFO - Iter(train) [19400/20000]  lr: 8.9129e-03  eta: 0:06:47  time: 0.6855  data_time: 0.0397  memory: 4207  loss: 0.1251  decode.loss_ce: 0.1251  decode.acc_seg: 97.3114
2024/04/21 20:34:22 - mmengine - INFO - Iter(train) [19500/20000]  lr: 8.9072e-03  eta: 0:05:39  time: 0.6951  data_time: 0.0135  memory: 4209  loss: 0.1369  decode.loss_ce: 0.1369  decode.acc_seg: 94.2605
2024/04/21 20:34:23 - mmengine - INFO - per class results:
2024/04/21 20:34:23 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 91.24 | 94.73 | 95.42 | 95.42  |   96.12   | 94.73  |
| monolayer  | 79.38 |  86.2 | 88.51 | 88.51  |   90.93   |  86.2  |
|  bilayer   | 48.72 | 75.08 | 65.52 | 65.52  |   58.12   | 75.08  |
| multilayer |  83.9 | 95.24 | 91.24 | 91.24  |   87.56   | 95.24  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 20:34:23 - mmengine - INFO - Iter(val) [8/8]    aAcc: 91.4800  mIoU: 75.8100  mAcc: 87.8100  mDice: 85.1700  mFscore: 85.1700  mPrecision: 83.1800  mRecall: 87.8100  data_time: 0.0143  time: 0.0511
2024/04/21 20:35:29 - mmengine - INFO - Iter(train) [19600/20000]  lr: 8.9016e-03  eta: 0:04:31  time: 0.6204  data_time: 0.0320  memory: 4209  loss: 0.1380  decode.loss_ce: 0.1380  decode.acc_seg: 88.9985
2024/04/21 20:36:40 - mmengine - INFO - Iter(train) [19700/20000]  lr: 8.8959e-03  eta: 0:03:23  time: 0.7928  data_time: 0.4156  memory: 4209  loss: 0.1404  decode.loss_ce: 0.1404  decode.acc_seg: 95.9579
2024/04/21 20:37:49 - mmengine - INFO - Iter(train) [19800/20000]  lr: 8.8903e-03  eta: 0:02:15  time: 0.8256  data_time: 0.4507  memory: 4209  loss: 0.1539  decode.loss_ce: 0.1539  decode.acc_seg: 94.5073
2024/04/21 20:38:58 - mmengine - INFO - Iter(train) [19900/20000]  lr: 8.8846e-03  eta: 0:01:08  time: 0.8307  data_time: 0.1892  memory: 4209  loss: 0.1194  decode.loss_ce: 0.1194  decode.acc_seg: 97.3876
2024/04/21 20:40:05 - mmengine - INFO - Exp name: lraspp_fastvit_ful_20240421_165247
2024/04/21 20:40:05 - mmengine - INFO - Iter(train) [20000/20000]  lr: 8.8790e-03  eta: 0:00:00  time: 0.7342  data_time: 0.2733  memory: 4208  loss: 0.1091  decode.loss_ce: 0.1091  decode.acc_seg: 95.2625
2024/04/21 20:40:05 - mmengine - INFO - Saving checkpoint at 20000 iterations
2024/04/21 20:40:06 - mmengine - INFO - per class results:
2024/04/21 20:40:06 - mmengine - INFO - 
+------------+-------+-------+-------+--------+-----------+--------+
|   Class    |  IoU  |  Acc  |  Dice | Fscore | Precision | Recall |
+------------+-------+-------+-------+--------+-----------+--------+
| Background | 90.82 | 92.91 | 95.19 | 95.19  |   97.58   | 92.91  |
| monolayer  | 80.02 | 91.48 |  88.9 |  88.9  |   86.47   | 91.48  |
|  bilayer   | 43.33 | 71.58 | 60.46 | 60.46  |   52.34   | 71.58  |
| multilayer |  83.5 | 87.92 | 91.01 | 91.01  |   94.32   | 87.92  |
+------------+-------+-------+-------+--------+-----------+--------+
2024/04/21 20:40:06 - mmengine - INFO - Iter(val) [8/8]    aAcc: 91.0000  mIoU: 74.4200  mAcc: 85.9700  mDice: 83.8900  mFscore: 83.8900  mPrecision: 82.6800  mRecall: 85.9700  data_time: 0.0104  time: 0.0468
